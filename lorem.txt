BASH(1) General Commands Manual BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string |
       file]

COPYRIGHT
       Bash is Copyright (C)  1989-2016
       by the Free Software Foundation,
       Inc.

DESCRIPTION
       Bash is an sh-compatible command
       language  interpreter  that exe‐
       cutes  commands  read  from  the
       standard  input  or from a file.
       Bash  also  incorporates  useful
       features  from  the  Korn  and C
       shells (ksh and csh).

       Bash is intended to be a confor‐
       mant implementation of the Shell
       and  Utilities  portion  of  the
       IEEE  POSIX  specification (IEEE
       Standard 1003.1).  Bash  can  be
       configured  to  be POSIX-confor‐
       mant by default.

OPTIONS
       All  of   the   single-character
       shell  options documented in the
       description of the  set  builtin
       command  can  be used as options
       when the shell is  invoked.   In
       addition,  bash  interprets  the
       following  options  when  it  is
       invoked:

       -c        If  the  -c  option is
                 present, then commands
                 are   read   from  the
                 first non-option argu‐
                 ment   command_string.
                 If there are arguments
                 after     the     com‐
                 mand_string, the first
                 argument  is  assigned
                 to $0 and any  remain‐
                 ing    arguments   are
                 assigned to the  posi‐
                 tional     parameters.
                 The assignment  to  $0
                 sets  the  name of the
                 shell, which  is  used
                 in  warning  and error
                 messages.
       -i        If the  -i  option  is
                 present,  the shell is
                 interactive.
       -l        Make bash act as if it
                 had  been invoked as a
                 login shell (see INVO‐
                 CATION below).
       -r        If  the  -r  option is
                 present,   the   shell
                 becomes     restricted
                 (see RESTRICTED  SHELL
                 below).
       -s        If  the  -s  option is
                 present,  or   if   no
                 arguments remain after
                 option     processing,
                 then commands are read
                 from   the    standard
                 input.    This  option
                 allows the  positional
                 parameters  to  be set
                 when    invoking    an
                 interactive shell.
       -v        Print    shell   input
                 lines  as   they   are
                 read.
       -x        Print   commands   and
                 their   arguments   as
                 they are executed.
       -D        A  list of all double-
                 quoted  strings   pre‐
                 ceded  by $ is printed
                 on the  standard  out‐
                 put.   These  are  the
                 strings that are  sub‐
                 ject    to    language
                 translation  when  the
                 current  locale is not
                 C  or   POSIX.    This
                 implies the -n option;
                 no  commands  will  be
                 executed.
       [-+]O [shopt_option]
                 shopt_option is one of
                 the   shell    options
                 accepted  by the shopt
                 builtin   (see   SHELL
                 BUILTIN       COMMANDS
                 below).             If
                 shopt_option        is
                 present, -O  sets  the
                 value  of that option;
                 +O  unsets   it.    If
                 shopt_option   is  not
                 supplied,  the   names
                 and   values   of  the
                 shell options accepted
                 by  shopt  are printed
                 on the  standard  out‐
                 put.   If  the invoca‐
                 tion option is +O, the
                 output is displayed in
                 a format that  may  be
                 reused as input.
       --        A  --  signals the end
                 of  options  and  dis‐
                 ables  further  option
                 processing.  Any argu‐
                 ments after the -- are
                 treated  as  filenames
                 and   arguments.    An
                 argument   of   -   is
                 equivalent to --.

       Bash also interprets a number of
       multi-character options.   These
       options  must appear on the com‐
       mand  line  before  the  single-
       character  options  to be recog‐
       nized.

       --debugger
              Arrange for the  debugger
              profile  to  be  executed
              before the shell  starts.
              Turns  on extended debug‐
              ging   mode   (see    the
              description of the extde‐
              bug option to  the  shopt
              builtin below).
       --dump-po-strings
              Equivalent to -D, but the
              output is in the GNU get‐
              text po (portable object)
              file format.
       --dump-strings
              Equivalent to -D.
       --help Display a  usage  message
              on  standard  output  and
              exit successfully.
       --init-file file
       --rcfile file
              Execute   commands   from
              file  instead of the sys‐
              tem  wide  initialization
              file /etc/bash.bashrc and
              the   standard   personal
              initialization       file
              ~/.bashrc if the shell is
              interactive  (see INVOCA‐
              TION below).

       --login
              Equivalent to -l.

       --noediting
              Do not use the GNU  read‐
              line library to read com‐
              mand lines when the shell
              is interactive.

       --noprofile
              Do  not  read  either the
              system-wide startup  file
              /etc/profile  or  any  of
              the personal  initializa‐
              tion  files  ~/.bash_pro‐
              file,  ~/.bash_login,  or
              ~/.profile.   By default,
              bash  reads  these  files
              when  it  is invoked as a
              login shell (see  INVOCA‐
              TION below).

       --norc Do  not  read and execute
              the system wide  initial‐
              ization              file
              /etc/bash.bashrc and  the
              personal   initialization
              file  ~/.bashrc  if   the
              shell   is   interactive.
              This  option  is  on   by
              default  if  the shell is
              invoked as sh.

       --posix
              Change  the  behavior  of
              bash  where  the  default
              operation  differs   from
              the   POSIX  standard  to
              match the standard (posix
              mode).    See   SEE  ALSO
              below for a reference  to
              a  document  that details
              how  posix  mode  affects
              bash's behavior.

       --restricted
              The     shell     becomes
              restricted           (see
              RESTRICTED SHELL below).

       --verbose
              Equivalent to -v.

       --version
              Show  version information
              for this instance of bash
              on  the  standard  output
              and exit successfully.

ARGUMENTS
       If arguments remain after option
       processing,  and  neither the -c
       nor the -s option has been  sup‐
       plied,  the  first  argument  is
       assumed to be the name of a file
       containing  shell  commands.  If
       bash is invoked in this fashion,
       $0  is  set  to  the name of the
       file, and the positional parame‐
       ters  are  set  to the remaining
       arguments.  Bash reads and  exe‐
       cutes  commands  from this file,
       then exits.  Bash's exit  status
       is  the  exit status of the last
       command executed in the  script.
       If no commands are executed, the
       exit status is 0.  An attempt is
       first  made  to open the file in
       the current directory,  and,  if
       no file is found, then the shell
       searches the directories in PATH
       for the script.

INVOCATION
       A login shell is one whose first
       character of argument zero is  a
       -,   or  one  started  with  the
       --login option.

       An  interactive  shell  is   one
       started without non-option argu‐
       ments (unless -s  is  specified)
       and  without the -c option whose
       standard  input  and  error  are
       both  connected to terminals (as
       determined by isatty(3)), or one
       started with the -i option.  PS1
       is set and $- includes i if bash
       is interactive, allowing a shell
       script or a startup file to test
       this state.

       The     following     paragraphs
       describe how bash  executes  its
       startup  files.   If  any of the
       files exist but cannot be  read,
       bash  reports  an error.  Tildes
       are  expanded  in  filenames  as
       described   below   under  Tilde
       Expansion in the EXPANSION  sec‐
       tion.

       When   bash  is  invoked  as  an
       interactive login shell, or as a
       non-interactive  shell  with the
       --login option, it  first  reads
       and  executes  commands from the
       file /etc/profile, if that  file
       exists.    After   reading  that
       file, it looks for  ~/.bash_pro‐
       file, ~/.bash_login, and ~/.pro‐
       file, in that order,  and  reads
       and  executes  commands from the
       first one  that  exists  and  is
       readable.     The    --noprofile
       option  may  be  used  when  the
       shell is started to inhibit this
       behavior.

       When an interactive login  shell
       exits,   or   a  non-interactive
       login shell  executes  the  exit
       builtin  command, bash reads and
       executes commands from the  file
       ~/.bash_logout, if it exists.

       When  an  interactive shell that
       is not a login shell is started,
       bash reads and executes commands
       from    /etc/bash.bashrc     and
       ~/.bashrc, if these files exist.
       This may be inhibited  by  using
       the --norc option.  The --rcfile
       file option will force  bash  to
       read  and  execute commands from
       file instead of /etc/bash.bashrc
       and ~/.bashrc.

       When  bash is started non-inter‐
       actively, to run a shell script,
       for  example,  it  looks for the
       variable BASH_ENV in  the  envi‐
       ronment, expands its value if it
       appears  there,  and  uses   the
       expanded  value as the name of a
       file to read and execute.   Bash
       behaves as if the following com‐
       mand were executed:
              if [  -n  "$BASH_ENV"  ];
              then . "$BASH_ENV"; fi
       but  the value of the PATH vari‐
       able is not used to  search  for
       the filename.

       If bash is invoked with the name
       sh,  it  tries  to   mimic   the
       startup  behavior  of historical
       versions of  sh  as  closely  as
       possible,  while  conforming  to
       the  POSIX  standard  as   well.
       When  invoked  as an interactive
       login shell, or  a  non-interac‐
       tive   shell  with  the  --login
       option,  it  first  attempts  to
       read  and  execute commands from
       /etc/profile and ~/.profile,  in
       that   order.   The  --noprofile
       option may be  used  to  inhibit
       this  behavior.  When invoked as
       an interactive  shell  with  the
       name  sh,  bash  looks  for  the
       variable ENV, expands its  value
       if  it  is defined, and uses the
       expanded value as the name of  a
       file to read and execute.  Since
       a shell invoked as sh  does  not
       attempt to read and execute com‐
       mands  from  any  other  startup
       files,  the  --rcfile option has
       no  effect.   A  non-interactive
       shell  invoked  with the name sh
       does not  attempt  to  read  any
       other   startup   files.    When
       invoked as sh, bash enters posix
       mode after the startup files are
       read.

       When bash is  started  in  posix
       mode,  as  with the --posix com‐
       mand line option, it follows the
       POSIX   standard   for   startup
       files.  In this  mode,  interac‐
       tive shells expand the ENV vari‐
       able and commands are  read  and
       executed  from  the  file  whose
       name is the expanded value.   No
       other startup files are read.

       Bash  attempts to determine when
       it is being run with  its  stan‐
       dard  input  connected to a net‐
       work connection,  as  when  exe‐
       cuted  by  the remote shell dae‐
       mon, usually rshd, or the secure
       shell   daemon  sshd.   If  bash
       determines it is  being  run  in
       this  fashion, it reads and exe‐
       cutes  commands  from  ~/.bashrc
       and  ~/.bashrc,  if  these files
       exist and are readable.  It will
       not  do  this  if invoked as sh.
       The --norc option may be used to
       inhibit  this  behavior, and the
       --rcfile option may be  used  to
       force  another  file to be read,
       but neither rshd nor sshd gener‐
       ally invoke the shell with those
       options  or  allow  them  to  be
       specified.

       If the shell is started with the
       effective user  (group)  id  not
       equal  to  the real user (group)
       id, and the  -p  option  is  not
       supplied,  no  startup files are
       read, shell  functions  are  not
       inherited  from the environment,
       the SHELLOPTS, BASHOPTS, CDPATH,
       and   GLOBIGNORE  variables,  if
       they appear in the  environment,
       are  ignored,  and the effective
       user id is set to the real  user
       id.   If  the  -p option is sup‐
       plied at invocation, the startup
       behavior  is  the  same, but the
       effective user id is not reset.

DEFINITIONS
       The  following  definitions  are
       used throughout the rest of this
       document.
       blank  A space or tab.
       word   A sequence of  characters
              considered  as  a  single
              unit by the shell.   Also
              known as a token.
       name   A word consisting only of
              alphanumeric   characters
              and    underscores,   and
              beginning with an  alpha‐
              betic   character  or  an
              underscore.          Also
              referred to as an identi‐
              fier.
       metacharacter
              A  character  that,  when
              unquoted,       separates
              words.  One of  the  fol‐
              lowing:
              |   & ; ( ) < > space tab
              newline
       control operator
              A token that  performs  a
              control  function.  It is
              one of the following sym‐
              bols:
              || & && ; ;; ;& ;;& ( ) |
              |& <newline>

RESERVED WORDS
       Reserved words  are  words  that
       have  a  special  meaning to the
       shell.  The following words  are
       recognized   as   reserved  when
       unquoted and  either  the  first
       word  of  a  simple command (see
       SHELL  GRAMMAR  below)  or   the
       third word of a case or for com‐
       mand:

       ! case   coproc   do  done  elif
       else  esac fi for function if in
       select then until while { } time
       [[ ]]

SHELL GRAMMAR
   Simple Commands
       A  simple  command is a sequence
       of optional variable assignments
       followed    by   blank-separated
       words and redirections, and ter‐
       minated  by  a control operator.
       The  first  word  specifies  the
       command  to  be executed, and is
       passed as  argument  zero.   The
       remaining  words  are  passed as
       arguments to  the  invoked  com‐
       mand.

       The  return  value  of  a simple
       command is its exit  status,  or
       128+n  if  the command is termi‐
       nated by signal n.

   Pipelines
       A pipeline is a sequence of  one
       or  more  commands  separated by
       one of the control  operators  |
       or  |&.   The format for a pipe‐
       line is:

              [time [-p]] [ ! ] command
              [ [|⎪|&] command2 ... ]

       The  standard  output of command
       is connected via a pipe  to  the
       standard   input   of  command2.
       This  connection  is   performed
       before  any  redirections speci‐
       fied by the command  (see  REDI‐
       RECTION  below).  If |& is used,
       command's  standard  error,   in
       addition to its standard output,
       is connected to command2's stan‐
       dard  input through the pipe; it
       is shorthand for 2>&1  |.   This
       implicit   redirection   of  the
       standard error to  the  standard
       output  is  performed  after any
       redirections  specified  by  the
       command.

       The  return status of a pipeline
       is the exit status of  the  last
       command,   unless  the  pipefail
       option is enabled.  If  pipefail
       is   enabled,   the   pipeline's
       return status is  the  value  of
       the  last (rightmost) command to
       exit with a non-zero status,  or
       zero  if  all commands exit suc‐
       cessfully.  If the reserved word
       !  precedes a pipeline, the exit
       status of that pipeline  is  the
       logical  negation  of  the  exit
       status as described above.   The
       shell  waits for all commands in
       the pipeline to terminate before
       returning a value.

       If  the  time reserved word pre‐
       cedes a pipeline, the elapsed as
       well  as  user  and  system time
       consumed by  its  execution  are
       reported  when the pipeline ter‐
       minates.  The -p option  changes
       the output format to that speci‐
       fied by POSIX.  When  the  shell
       is  in  posix  mode, it does not
       recognize  time  as  a  reserved
       word  if  the  next token begins
       with  a  `-'.   The   TIMEFORMAT
       variable  may be set to a format
       string that  specifies  how  the
       timing   information  should  be
       displayed; see  the  description
       of  TIMEFORMAT under Shell Vari‐
       ables below.

       When the shell is in posix mode,
       time  may  be followed by a new‐
       line.  In this case,  the  shell
       displays the total user and sys‐
       tem time consumed by  the  shell
       and  its children.  The TIMEFOR‐
       MAT  variable  may  be  used  to
       specify  the  format of the time
       information.

       Each command in  a  pipeline  is
       executed  as  a separate process
       (i.e., in a subshell).

   Lists
       A list is a sequence of  one  or
       more  pipelines separated by one
       of the operators ;,  &,  &&,  or
       ||, and optionally terminated by
       one of ;, &, or <newline>.

       Of these list operators, &&  and
       ||  have  equal precedence, fol‐
       lowed by ;  and  &,  which  have
       equal precedence.

       A  sequence  of one or more new‐
       lines  may  appear  in  a   list
       instead   of   a   semicolon  to
       delimit commands.

       If a command  is  terminated  by
       the   control  operator  &,  the
       shell executes  the  command  in
       the  background  in  a subshell.
       The shell does not wait for  the
       command   to   finish,  and  the
       return status  is  0.   Commands
       separated  by  a  ; are executed
       sequentially;  the  shell  waits
       for each command to terminate in
       turn.  The return status is  the
       exit  status of the last command
       executed.

       AND and OR lists  are  sequences
       of  one  or more pipelines sepa‐
       rated by the && and  ||  control
       operators,   respectively.   AND
       and OR lists are  executed  with
       left associativity.  An AND list
       has the form

              command1 && command2

       command2  is  executed  if,  and
       only  if,  command1  returns  an
       exit status of zero.

       An OR list has the form

              command1 || command2

       command2 is executed if and only
       if  command1  returns a non-zero
       exit status.  The return  status
       of  AND and OR lists is the exit
       status of the last command  exe‐
       cuted in the list.

   Compound Commands
       A compound command is one of the
       following.  In most cases a list
       in  a  command's description may
       be separated from  the  rest  of
       the  command by one or more new‐
       lines, and may be followed by  a
       newline in place of a semicolon.

       (list) list  is  executed  in  a
              subshell environment (see
              COMMAND  EXECUTION  ENVI‐
              RONMENT below).  Variable
              assignments  and  builtin
              commands that affect  the
              shell's   environment  do
              not  remain   in   effect
              after  the  command  com‐
              pletes.  The return  sta‐
              tus is the exit status of
              list.

       { list; }
              list is  simply  executed
              in   the   current  shell
              environment.   list  must
              be terminated with a new‐
              line or semicolon.   This
              is  known as a group com‐
              mand.  The return  status
              is  the  exit  status  of
              list.  Note  that  unlike
              the  metacharacters ( and
              ), { and }  are  reserved
              words   and   must  occur
              where a reserved word  is
              permitted  to  be  recog‐
              nized.  Since they do not
              cause  a word break, they
              must  be  separated  from
              list   by  whitespace  or
              another shell metacharac‐
              ter.

       ((expression))
              The  expression is evalu‐
              ated  according  to   the
              rules   described   below
              under ARITHMETIC  EVALUA‐
              TION.   If  the  value of
              the  expression  is  non-
              zero,  the  return status
              is   0;   otherwise   the
              return status is 1.  This
              is exactly equivalent  to
              let "expression".

       [[ expression ]]
              Return a status of 0 or 1
              depending on the  evalua‐
              tion  of  the conditional
              expression    expression.
              Expressions  are composed
              of     the      primaries
              described   below   under
              CONDITIONAL  EXPRESSIONS.
              Word  splitting and path‐
              name  expansion  are  not
              performed  on  the  words
              between the  [[  and  ]];
              tilde  expansion, parame‐
              ter and  variable  expan‐
              sion,  arithmetic  expan‐
              sion,  command  substitu‐
              tion,  process  substitu‐
              tion, and  quote  removal
              are   performed.   Condi‐
              tional operators such  as
              -f must be unquoted to be
              recognized as primaries.

              When used with [[, the  <
              and > operators sort lex‐
              icographically using  the
              current locale.

       See  the description of the test
       builtin command  (section  SHELL
       BUILTIN  COMMANDS below) for the
       handling  of  parameters   (i.e.
       missing parameters).

       When the == and != operators are
       used, the string to the right of
       the  operator  is  considered  a
       pattern and matched according to
       the  rules described below under
       Pattern Matching, as if the ext‐
       glob  shell option were enabled.
       The = operator is equivalent  to
       ==.   If  the  nocasematch shell
       option is enabled, the match  is
       performed  without regard to the
       case of  alphabetic  characters.
       The  return  value  is  0 if the
       string matches (==) or does  not
       match  (!=)  the  pattern, and 1
       otherwise.  Any part of the pat‐
       tern  may be quoted to force the
       quoted portion to be matched  as
       a string.

       An  additional  binary operator,
       =~, is available, with the  same
       precedence  as  == and !=.  When
       it is used, the  string  to  the
       right of the operator is consid‐
       ered an extended regular expres‐
       sion and matched accordingly (as
       in regex(3)).  The return  value
       is  0  if the string matches the
       pattern, and  1  otherwise.   If
       the  regular  expression is syn‐
       tactically incorrect, the condi‐
       tional expression's return value
       is 2.  If the nocasematch  shell
       option  is enabled, the match is
       performed without regard to  the
       case  of  alphabetic characters.
       Any part of the pattern  may  be
       quoted  to force the quoted por‐
       tion to be matched as a  string.
       Bracket  expressions  in regular
       expressions  must   be   treated
       carefully,  since normal quoting
       characters lose  their  meanings
       between  brackets.   If the pat‐
       tern is stored in a shell  vari‐
       able,   quoting   the   variable
       expansion forces the entire pat‐
       tern  to be matched as a string.
       Substrings matched by  parenthe‐
       sized  subexpressions within the
       regular expression are saved  in
       the array variable BASH_REMATCH.
       The element of BASH_REMATCH with
       index  0  is  the portion of the
       string matching the entire regu‐
       lar  expression.  The element of
       BASH_REMATCH with index n is the
       portion  of  the string matching
       the nth parenthesized subexpres‐
       sion.

       Expressions   may   be  combined
       using the  following  operators,
       listed  in  decreasing  order of
       precedence:

              ( expression )
                     Returns the  value
                     of     expression.
                     This may  be  used
                     to   override  the
                     normal  precedence
                     of operators.
              ! expression
                     True if expression
                     is false.
              expression1  &&   expres‐
              sion2
                     True    if    both
                     expression1    and
                     expression2    are
                     true.
              expression1  ||   expres‐
              sion2
                     True   if   either
                     expression1     or
                     expression2     is
                     true.

              The && and  ||  operators
              do  not  evaluate expres‐
              sion2  if  the  value  of
              expression1 is sufficient
              to determine  the  return
              value  of the entire con‐
              ditional expression.

       for name [ [ in [ word ... ] ] ;
       ] do list ; done
              The list of words follow‐
              ing in is expanded,  gen‐
              erating  a list of items.
              The variable name is  set
              to  each  element of this
              list in turn, and list is
              executed  each  time.  If
              the in word  is  omitted,
              the  for command executes
              list once for each  posi‐
              tional  parameter that is
              set    (see    PARAMETERS
              below).   The return sta‐
              tus is the exit status of
              the   last  command  that
              executes.  If the  expan‐
              sion of the items follow‐
              ing  in  results  in   an
              empty  list,  no commands
              are  executed,  and   the
              return status is 0.

       for  (( expr1 ; expr2 ; expr3 ))
       ; do list ; done
              First,   the   arithmetic
              expression expr1 is eval‐
              uated  according  to  the
              rules   described   below
              under ARITHMETIC  EVALUA‐
              TION.    The   arithmetic
              expression expr2 is  then
              evaluated      repeatedly
              until  it  evaluates   to
              zero.   Each  time  expr2
              evaluates to  a  non-zero
              value,  list  is executed
              and    the     arithmetic
              expression expr3 is eval‐
              uated.  If any expression
              is omitted, it behaves as
              if  it  evaluates  to  1.
              The  return  value is the
              exit status of  the  last
              command  in  list that is
              executed, or false if any
              of   the  expressions  is
              invalid.

       select name [ in  word  ]  ;  do
       list ; done
              The list of words follow‐
              ing in is expanded,  gen‐
              erating  a list of items.
              The set of expanded words
              is  printed  on the stan‐
              dard error, each preceded
              by  a  number.  If the in
              word  is   omitted,   the
              positional parameters are
              printed  (see  PARAMETERS
              below).   The  PS3 prompt
              is then displayed  and  a
              line  read from the stan‐
              dard input.  If the  line
              consists of a number cor‐
              responding to one of  the
              displayed words, then the
              value of name is  set  to
              that  word.   If the line
              is empty, the  words  and
              prompt    are   displayed
              again.  If EOF  is  read,
              the   command  completes.
              Any  other   value   read
              causes  name to be set to
              null.  The line  read  is
              saved   in  the  variable
              REPLY.  The list is  exe‐
              cuted  after  each selec‐
              tion until a  break  com‐
              mand  is  executed.   The
              exit status of select  is
              the  exit  status  of the
              last command executed  in
              list,  or zero if no com‐
              mands were executed.

       case word in [ [(] pattern  [  |
       pattern  ]  ...  ) list ;; ] ...
       esac
              A  case   command   first
              expands  word,  and tries
              to match it against  each
              pattern  in  turn,  using
              the same  matching  rules
              as for pathname expansion
              (see  Pathname  Expansion
              below).    The   word  is
              expanded   using    tilde
              expansion,  parameter and
              variable       expansion,
              arithmetic     expansion,
              command     substitution,
              process  substitution and
              quote removal.  Each pat‐
              tern examined is expanded
              using  tilde   expansion,
              parameter   and  variable
              expansion,     arithmetic
              expansion,  command  sub‐
              stitution,  and   process
              substitution.    If   the
              nocasematch shell  option
              is  enabled, the match is
              performed without  regard
              to the case of alphabetic
              characters.  When a match
              is found, the correspond‐
              ing list is executed.  If
              the  ;; operator is used,
              no subsequent matches are
              attempted after the first
              pattern match.  Using  ;&
              in  place  of  ;;  causes
              execution   to   continue
              with  the list associated
              with the next set of pat‐
              terns.    Using   ;;&  in
              place of  ;;  causes  the
              shell  to  test  the next
              pattern   list   in   the
              statement,  if  any,  and
              execute  any   associated
              list   on   a  successful
              match.  The  exit  status
              is  zero  if  no  pattern
              matches.   Otherwise,  it
              is the exit status of the
              last command executed  in
              list.

       if list; then list; [ elif list;
       then list; ] ... [ else list;  ]
       fi
              The  if list is executed.
              If  its  exit  status  is
              zero,  the  then  list is
              executed.      Otherwise,
              each  elif  list  is exe‐
              cuted in turn, and if its
              exit  status is zero, the
              corresponding  then  list
              is  executed and the com‐
              mand  completes.   Other‐
              wise,  the  else  list is
              executed,   if   present.
              The  exit  status  is the
              exit status of  the  last
              command executed, or zero
              if  no  condition  tested
              true.

       while list-1; do list-2; done
       until list-1; do list-2; done
              The while command contin‐
              uously executes the  list
              list-2  as  long  as  the
              last command in the  list
              list-1  returns  an  exit
              status  of   zero.    The
              until  command is identi‐
              cal to the while command,
              except  that  the test is
              negated: list-2  is  exe‐
              cuted as long as the last
              command in list-1 returns
              a  non-zero  exit status.
              The exit  status  of  the
              while  and until commands
              is the exit status of the
              last  command executed in
              list-2, or zero  if  none
              was executed.

   Coprocesses
       A  coprocess  is a shell command
       preceded by the coproc  reserved
       word.   A  coprocess is executed
       asynchronously in a subshell, as
       if  the  command had been termi‐
       nated with the & control  opera‐
       tor,  with a two-way pipe estab‐
       lished  between  the   executing
       shell and the coprocess.

       The format for a coprocess is:

              coproc   [NAME]   command
              [redirections]

       This creates a  coprocess  named
       NAME.   If NAME is not supplied,
       the  default  name  is   COPROC.
       NAME  must  not  be  supplied if
       command is a simple command (see
       above);  otherwise, it is inter‐
       preted as the first word of  the
       simple command.  When the copro‐
       cess is executed, the shell cre‐
       ates   an  array  variable  (see
       Arrays below) named NAME in  the
       context  of the executing shell.
       The standard output  of  command
       is  connected  via  a  pipe to a
       file descriptor in the executing
       shell,  and that file descriptor
       is  assigned  to  NAME[0].   The
       standard  input  of  command  is
       connected via a pipe to  a  file
       descriptor   in   the  executing
       shell, and that file  descriptor
       is  assigned  to  NAME[1].  This
       pipe is established  before  any
       redirections  specified  by  the
       command (see REDIRECTION below).
       The file descriptors can be uti‐
       lized as arguments to shell com‐
       mands   and  redirections  using
       standard word  expansions.   The
       file  descriptors are not avail‐
       able in subshells.  The  process
       ID  of the shell spawned to exe‐
       cute the coprocess is  available
       as  the  value  of  the variable
       NAME_PID.  The wait builtin com‐
       mand may be used to wait for the
       coprocess to terminate.

       Since the coprocess  is  created
       as  an asynchronous command, the
       coproc  command  always  returns
       success.  The return status of a
       coprocess is the exit status  of
       command.

   Shell Function Definitions
       A  shell  function  is an object
       that is  called  like  a  simple
       command  and executes a compound
       command with a new set of  posi‐
       tional  parameters.  Shell func‐
       tions are declared as follows:

       name () compound-command  [redi‐
       rection]
       function name [()] compound-com‐
       mand [redirection]
              This defines  a  function
              named name.  The reserved
              word     function      is
              optional.   If  the func‐
              tion  reserved  word   is
              supplied, the parentheses
              are optional.   The  body
              of  the  function  is the
              compound   command   com‐
              pound-command  (see  Com‐
              pound  Commands   above).
              That command is usually a
              list of commands  between
              {  and  }, but may be any
              command listed under Com‐
              pound   Commands   above,
              with  one  exception:  If
              the   function   reserved
              word  is  used,  but  the
              parentheses  are not sup‐
              plied,  the  braces   are
              required.   compound-com‐
              mand is executed whenever
              name  is specified as the
              name of a simple command.
              When  in posix mode, name
              may not be  the  name  of
              one  of the POSIX special
              builtins.   Any  redirec‐
              tions   (see  REDIRECTION
              below) specified  when  a
              function  is  defined are
              performed when the  func‐
              tion  is  executed.   The
              exit status of a function
              definition is zero unless
              a syntax error occurs  or
              a  readonly function with
              the  same  name   already
              exists.   When  executed,
              the  exit  status  of   a
              function is the exit sta‐
              tus of the  last  command
              executed   in  the  body.
              (See FUNCTIONS below.)

COMMENTS
       In a non-interactive  shell,  or
       an  interactive  shell  in which
       the interactive_comments  option
       to  the shopt builtin is enabled
       (see  SHELL   BUILTIN   COMMANDS
       below),  a word beginning with #
       causes that word and all remain‐
       ing  characters  on that line to
       be  ignored.    An   interactive
       shell   without   the   interac‐
       tive_comments   option   enabled
       does  not  allow  comments.  The
       interactive_comments  option  is
       on  by  default  in  interactive
       shells.

QUOTING
       Quoting is used  to  remove  the
       special meaning of certain char‐
       acters or words  to  the  shell.
       Quoting  can  be used to disable
       special  treatment  for  special
       characters,  to prevent reserved
       words from being  recognized  as
       such,  and  to prevent parameter
       expansion.

       Each   of   the   metacharacters
       listed  above  under DEFINITIONS
       has special meaning to the shell
       and  must  be quoted if it is to
       represent itself.

       When the command history  expan‐
       sion  facilities  are being used
       (see HISTORY  EXPANSION  below),
       the history expansion character,
       usually !,  must  be  quoted  to
       prevent history expansion.

       There  are  three quoting mecha‐
       nisms:  the  escape   character,
       single    quotes,   and   double
       quotes.

       A non-quoted  backslash  (\)  is
       the  escape  character.  It pre‐
       serves the literal value of  the
       next   character  that  follows,
       with the exception of <newline>.
       If  a  \<newline>  pair appears,
       and the backslash is not  itself
       quoted,    the   \<newline>   is
       treated as a  line  continuation
       (that is, it is removed from the
       input  stream  and   effectively
       ignored).

       Enclosing  characters  in single
       quotes  preserves  the   literal
       value  of  each character within
       the quotes.  A single quote  may
       not occur between single quotes,
       even when preceded  by  a  back‐
       slash.

       Enclosing  characters  in double
       quotes  preserves  the   literal
       value  of  all characters within
       the quotes, with  the  exception
       of  $,  `,  \, and, when history
       expansion is enabled,  !.   When
       the  shell is in posix mode, the
       ! has no special meaning  within
       double quotes, even when history
       expansion is enabled.  The char‐
       acters $ and ` retain their spe‐
       cial   meaning   within   double
       quotes.   The  backslash retains
       its special  meaning  only  when
       followed by one of the following
       characters: $, `, ", \, or <new‐
       line>.   A  double  quote may be
       quoted within double  quotes  by
       preceding  it  with a backslash.
       If  enabled,  history  expansion
       will  be  performed  unless an !
       appearing in  double  quotes  is
       escaped  using a backslash.  The
       backslash preceding  the  !   is
       not removed.

       The  special  parameters * and @
       have  special  meaning  when  in
       double  quotes  (see  PARAMETERS
       below).

       Words of the form $'string'  are
       treated   specially.   The  word
       expands to  string,  with  back‐
       slash-escaped         characters
       replaced  as  specified  by  the
       ANSI   C   standard.   Backslash
       escape  sequences,  if  present,
       are decoded as follows:
              \a     alert (bell)
              \b     backspace
              \e
              \E     an  escape charac‐
                     ter
              \f     form feed
              \n     new line
              \r     carriage return
              \t     horizontal tab
              \v     vertical tab
              \\     backslash
              \'     single quote
              \"     double quote
              \?     question mark
              \nnn   the      eight-bit
                     character    whose
                     value is the octal
                     value  nnn (one to
                     three digits)
              \xHH   the      eight-bit
                     character    whose
                     value is the hexa‐
                     decimal  value  HH
                     (one  or  two  hex
                     digits)
              \uHHHH the        Unicode
                     (ISO/IEC    10646)
                     character    whose
                     value is the hexa‐
                     decimal value HHHH
                     (one to  four  hex
                     digits)
              \UHHHHHHHH
                     the        Unicode
                     (ISO/IEC    10646)
                     character    whose
                     value is the hexa‐
                     decimal value HHH‐
                     HHHHH   (one    to
                     eight hex digits)
              \cx    a  control-x char‐
                     acter

       The expanded result  is  single-
       quoted,  as  if  the dollar sign
       had not been present.

       A double-quoted string  preceded
       by  a  dollar  sign  ($"string")
       will  cause  the  string  to  be
       translated according to the cur‐
       rent  locale.   If  the  current
       locale is C or POSIX, the dollar
       sign is ignored.  If the  string
       is  translated and replaced, the
       replacement is double-quoted.

PARAMETERS
       A parameter is  an  entity  that
       stores  values.   It  can  be  a
       name, a number, or  one  of  the
       special  characters listed below
       under  Special  Parameters.    A
       variable  is a parameter denoted
       by a name.   A  variable  has  a
       value    and    zero   or   more
       attributes.    Attributes    are
       assigned   using   the   declare
       builtin  command  (see   declare
       below   in  SHELL  BUILTIN  COM‐
       MANDS).

       A parameter is  set  if  it  has
       been assigned a value.  The null
       string is a valid value.  Once a
       variable is set, it may be unset
       only by using the unset  builtin
       command  (see SHELL BUILTIN COM‐
       MANDS below).

       A variable may be assigned to by
       a statement of the form

              name=[value]

       If value is not given, the vari‐
       able  is   assigned   the   null
       string.    All   values  undergo
       tilde expansion,  parameter  and
       variable expansion, command sub‐
       stitution, arithmetic expansion,
       and quote removal (see EXPANSION
       below).  If the variable has its
       integer   attribute   set,  then
       value is evaluated as an  arith‐
       metic  expression  even  if  the
       $((...)) expansion is  not  used
       (see     Arithmetic    Expansion
       below).  Word splitting  is  not
       performed, with the exception of
       "$@" as  explained  below  under
       Special   Parameters.   Pathname
       expansion  is   not   performed.
       Assignment  statements  may also
       appear  as  arguments   to   the
       alias, declare, typeset, export,
       readonly, and local builtin com‐
       mands   (declaration  commands).
       When  in   posix   mode,   these
       builtins may appear in a command
       after one or more  instances  of
       the  command  builtin and retain
       these assignment statement prop‐
       erties.

       In  the context where an assign‐
       ment statement  is  assigning  a
       value  to  a  shell  variable or
       array index, the += operator can
       be  used  to append to or add to
       the variable's  previous  value.
       This   includes   arguments   to
       builtin commands such as declare
       that  accept  assignment  state‐
       ments  (declaration   commands).
       When += is applied to a variable
       for which the integer  attribute
       has been set, value is evaluated
       as an arithmetic expression  and
       added  to the variable's current
       value, which is also  evaluated.
       When  +=  is applied to an array
       variable using compound  assign‐
       ment  (see  Arrays  below),  the
       variable's value  is  not  unset
       (as it is when using =), and new
       values are appended to the array
       beginning  at  one  greater than
       the array's maximum  index  (for
       indexed   arrays)  or  added  as
       additional key-value pairs in an
       associative array.  When applied
       to  a  string-valued   variable,
       value  is  expanded and appended
       to the variable's value.

       A variable can be  assigned  the
       nameref  attribute  using the -n
       option to the declare  or  local
       builtin    commands   (see   the
       descriptions  of   declare   and
       local   below)   to   create   a
       nameref,  or  a   reference   to
       another  variable.   This allows
       variables  to   be   manipulated
       indirectly.      Whenever    the
       nameref variable is  referenced,
       assigned  to,  unset, or has its
       attributes modified (other  than
       using  or  changing  the nameref
       attribute itself), the operation
       is  actually  performed  on  the
       variable   specified   by    the
       nameref   variable's  value.   A
       nameref is commonly used  within
       shell  functions  to  refer to a
       variable whose name is passed as
       an  argument  to  the  function.
       For instance, if a variable name
       is passed to a shell function as
       its first argument, running
              declare -n ref=$1
       inside the  function  creates  a
       nameref variable ref whose value
       is the variable name  passed  as
       the  first argument.  References
       and  assignments  to  ref,   and
       changes  to  its attributes, are
       treated as  references,  assign‐
       ments,  and  attribute modifica‐
       tions to the variable whose name
       was  passed  as $1.  If the con‐
       trol variable in a for loop  has
       the  nameref attribute, the list
       of words can be a list of  shell
       variables,  and a name reference
       will  be  established  for  each
       word  in the list, in turn, when
       the  loop  is  executed.   Array
       variables  cannot  be  given the
       nameref   attribute.    However,
       nameref  variables can reference
       array variables and  subscripted
       array  variables.   Namerefs can
       be unset using the -n option  to
       the  unset  builtin.  Otherwise,
       if unset is  executed  with  the
       name of a nameref variable as an
       argument,  the  variable  refer‐
       enced  by  the  nameref variable
       will be unset.

   Positional Parameters
       A  positional  parameter  is   a
       parameter denoted by one or more
       digits, other  than  the  single
       digit  0.  Positional parameters
       are assigned  from  the  shell's
       arguments  when  it  is invoked,
       and may be reassigned using  the
       set builtin command.  Positional
       parameters may not  be  assigned
       to  with  assignment statements.
       The  positional  parameters  are
       temporarily   replaced   when  a
       shell function is executed  (see
       FUNCTIONS below).

       When a positional parameter con‐
       sisting of more  than  a  single
       digit  is  expanded,  it must be
       enclosed in braces  (see  EXPAN‐
       SION below).

   Special Parameters
       The shell treats several parame‐
       ters specially.   These  parame‐
       ters  may  only  be  referenced;
       assignment  to   them   is   not
       allowed.
       *      Expands to the positional
              parameters, starting from
              one.   When the expansion
              is  not   within   double
              quotes,  each  positional
              parameter  expands  to  a
              separate  word.   In con‐
              texts where  it  is  per‐
              formed,  those  words are
              subject to  further  word
              splitting   and  pathname
              expansion.    When    the
              expansion  occurs  within
              double quotes, it expands
              to a single word with the
              value of  each  parameter
              separated  by  the  first
              character of the IFS spe‐
              cial  variable.  That is,
              "$*"  is  equivalent   to
              "$1c$2c...",  where  c is
              the  first  character  of
              the   value  of  the  IFS
              variable.   If   IFS   is
              unset, the parameters are
              separated by spaces.   If
              IFS  is null, the parame‐
              ters are  joined  without
              intervening separators.
       @      Expands to the positional
              parameters, starting from
              one.   When the expansion
              occurs   within    double
              quotes,   each  parameter
              expands  to  a   separate
              word.   That  is, "$@" is
              equivalent to  "$1"  "$2"
              ...  If the double-quoted
              expansion occurs within a
              word,  the  expansion  of
              the  first  parameter  is
              joined with the beginning
              part  of   the   original
              word,  and  the expansion
              of the last parameter  is
              joined with the last part
              of  the  original   word.
              When  there  are no posi‐
              tional  parameters,  "$@"
              and  $@ expand to nothing
              (i.e., they are removed).
       #      Expands to the number  of
              positional  parameters in
              decimal.
       ?      Expands to the exit  sta‐
              tus  of the most recently
              executed foreground pipe‐
              line.
       -      Expands  to  the  current
              option flags as specified
              upon  invocation,  by the
              set builtin  command,  or
              those  set  by  the shell
              itself (such  as  the  -i
              option).
       $      Expands to the process ID
              of the shell.   In  a  ()
              subshell,  it  expands to
              the  process  ID  of  the
              current  shell,  not  the
              subshell.
       !      Expands to the process ID
              of  the job most recently
              placed  into  the   back‐
              ground,  whether executed
              as an  asynchronous  com‐
              mand   or  using  the  bg
              builtin (see JOB  CONTROL
              below).
       0      Expands  to  the  name of
              the   shell   or    shell
              script.   This  is set at
              shell initialization.  If
              bash  is  invoked  with a
              file of commands,  $0  is
              set  to  the name of that
              file.  If bash is started
              with  the -c option, then
              $0 is set  to  the  first
              argument after the string
              to be executed, if one is
              present.   Otherwise,  it
              is set  to  the  filename
              used  to  invoke bash, as
              given by argument zero.
       _      At shell startup, set  to
              the   absolute   pathname
              used to invoke the  shell
              or   shell  script  being
              executed as passed in the
              environment  or  argument
              list.       Subsequently,
              expands to the last argu‐
              ment to the previous com‐
              mand,   after  expansion.
              Also  set  to  the   full
              pathname  used  to invoke
              each command executed and
              placed in the environment
              exported to that command.
              When  checking mail, this
              parameter holds the  name
              of  the  mail  file  cur‐
              rently being checked.

   Shell Variables
       The following variables are  set
       by the shell:

       BASH   Expands to the full file‐
              name used to invoke  this
              instance of bash.
       BASHOPTS
              A colon-separated list of
              enabled  shell   options.
              Each  word in the list is
              a valid argument for  the
              -s  option  to  the shopt
              builtin   command    (see
              SHELL   BUILTIN  COMMANDS
              below).    The    options
              appearing in BASHOPTS are
              those reported as  on  by
              shopt.   If this variable
              is  in  the   environment
              when bash starts up, each
              shell option in the  list
              will  be  enabled  before
              reading    any    startup
              files.   This variable is
              read-only.
       BASHPID
              Expands to the process ID
              of   the   current   bash
              process.   This   differs
              from   $$  under  certain
              circumstances,  such   as
              subshells   that  do  not
              require bash  to  be  re-
              initialized.
       BASH_ALIASES
              An    associative   array
              variable  whose   members
              correspond  to the inter‐
              nal list  of  aliases  as
              maintained  by  the alias
              builtin.  Elements  added
              to  this  array appear in
              the alias list;  however,
              unsetting  array elements
              currently does not  cause
              aliases   to  be  removed
              from the alias list.   If
              BASH_ALIASES is unset, it
              loses its special proper‐
              ties,  even if it is sub‐
              sequently reset.
       BASH_ARGC
              An array  variable  whose
              values  are the number of
              parameters in each  frame
              of  the current bash exe‐
              cution call  stack.   The
              number  of  parameters to
              the  current   subroutine
              (shell function or script
              executed   with   .    or
              source)  is at the top of
              the stack.  When  a  sub‐
              routine  is executed, the
              number   of    parameters
              passed   is  pushed  onto
              BASH_ARGC.    The   shell
              sets  BASH_ARGC only when
              in   extended   debugging
              mode (see the description
              of the extdebug option to
              the shopt builtin below)
       BASH_ARGV
              An  array  variable  con‐
              taining all of the param‐
              eters in the current bash
              execution   call   stack.
              The  final  parameter  of
              the last subroutine  call
              is  at  the  top  of  the
              stack; the first  parame‐
              ter  of  the initial call
              is at the bottom.  When a
              subroutine  is  executed,
              the  parameters  supplied
              are      pushed      onto
              BASH_ARGV.    The   shell
              sets  BASH_ARGV only when
              in   extended   debugging
              mode (see the description
              of the extdebug option to
              the shopt builtin below)
       BASH_CMDS
              An    associative   array
              variable  whose   members
              correspond  to the inter‐
              nal hash  table  of  com‐
              mands  as  maintained  by
              the hash  builtin.   Ele‐
              ments added to this array
              appear in the hash table;
              however,  unsetting array
              elements  currently  does
              not  cause  command names
              to be  removed  from  the
              hash table.  If BASH_CMDS
              is unset,  it  loses  its
              special  properties, even
              if  it  is   subsequently
              reset.
       BASH_COMMAND
              The   command   currently
              being executed  or  about
              to  be  executed,  unless
              the shell is executing  a
              command  as the result of
              a trap, in which case  it
              is  the command executing
              at the time of the trap.
       BASH_EXECUTION_STRING
              The command  argument  to
              the -c invocation option.
       BASH_LINENO
              An  array  variable whose
              members are the line num‐
              bers   in   source  files
              where each  corresponding
              member  of  FUNCNAME  was
              invoked.
              ${BASH_LINENO[$i]} is the
              line number in the source
              file
              (${BASH_SOURCE[$i+1]})
              where ${FUNCNAME[$i]} was
              called                (or
              ${BASH_LINENO[$i-1]}   if
              referenced within another
              shell   function).    Use
              LINENO to obtain the cur‐
              rent line number.
       BASH_LOADABLES_PATH
              A colon-separated list of
              directories in which  the
              shell  looks  for dynami‐
              cally  loadable  builtins
              specified  by  the enable
              command.
       BASH_REMATCH
              An array  variable  whose
              members  are  assigned by
              the =~ binary operator to
              the  [[  conditional com‐
              mand.  The  element  with
              index 0 is the portion of
              the string  matching  the
              entire   regular  expres‐
              sion.  The  element  with
              index n is the portion of
              the string  matching  the
              nth  parenthesized subex‐
              pression.  This  variable
              is read-only.
       BASH_SOURCE
              An  array  variable whose
              members  are  the  source
              filenames  where the cor‐
              responding shell function
              names   in  the  FUNCNAME
              array    variable     are
              defined.  The shell func‐
              tion  ${FUNCNAME[$i]}  is
              defined   in   the   file
              ${BASH_SOURCE[$i]}    and
              called               from
              ${BASH_SOURCE[$i+1]}.
       BASH_SUBSHELL
              Incremented by one within
              each subshell or subshell
              environment   when    the
              shell begins executing in
              that  environment.    The
              initial value is 0.
       BASH_VERSINFO
              A readonly array variable
              whose members  hold  ver‐
              sion information for this
              instance  of  bash.   The
              values  assigned  to  the
              array members are as fol‐
              lows:
              BASH_VERSINFO[0]        The
                                      major
                                      ver‐
                                      sion
                                      num‐
                                      ber
                                      (the
                                      release).
              BASH_VERSINFO[1]        The
                                      minor
                                      ver‐
                                      sion
                                      num‐
                                      ber
                                      (the
                                      ver‐
                                      sion).
              BASH_VERSINFO[2]        The
                                      patch
                                      level.
              BASH_VERSINFO[3]        The
                                      build
                                      ver‐
                                      sion.
              BASH_VERSINFO[4]        The
                                      release
                                      sta‐
                                      tus
                                      (e.g.,
                                      beta1).
              BASH_VERSINFO[5]        The
                                      value
                                      of
                                      MACHTYPE.
       BASH_VERSION
              Expands   to   a   string
              describing the version of
              this instance of bash.
       COMP_CWORD
              An       index       into
              ${COMP_WORDS} of the word
              containing   the  current
              cursor  position.    This
              variable   is   available
              only in  shell  functions
              invoked  by  the program‐
              mable completion  facili‐
              ties   (see  Programmable
              Completion below).
       COMP_KEY
              The key (or final key  of
              a  key  sequence) used to
              invoke the  current  com‐
              pletion function.
       COMP_LINE
              The current command line.
              This variable  is  avail‐
              able  only in shell func‐
              tions and  external  com‐
              mands invoked by the pro‐
              grammable      completion
              facilities  (see Program‐
              mable Completion below).
       COMP_POINT
              The index of the  current
              cursor  position relative
              to the beginning  of  the
              current  command.  If the
              current  cursor  position
              is at the end of the cur‐
              rent command,  the  value
              of this variable is equal
              to  ${#COMP_LINE}.   This
              variable   is   available
              only in  shell  functions
              and   external   commands
              invoked by  the  program‐
              mable  completion facili‐
              ties  (see   Programmable
              Completion below).
       COMP_TYPE
              Set  to  an integer value
              corresponding to the type
              of  completion  attempted
              that caused a  completion
              function  to  be  called:
              TAB, for  normal  comple‐
              tion, ?, for listing com‐
              pletions after successive
              tabs,   !,   for  listing
              alternatives  on  partial
              word  completion,  @,  to
              list completions  if  the
              word  is  not unmodified,
              or %,  for  menu  comple‐
              tion.   This  variable is
              available only  in  shell
              functions   and  external
              commands invoked  by  the
              programmable   completion
              facilities (see  Program‐
              mable Completion below).
       COMP_WORDBREAKS
              The   set  of  characters
              that the readline library
              treats as word separators
              when performing word com‐
              pletion.   If  COMP_WORD‐
              BREAKS is unset, it loses
              its  special  properties,
              even  if  it  is   subse‐
              quently reset.
       COMP_WORDS
              An  array  variable  (see
              Arrays below)  consisting
              of  the  individual words
              in  the  current  command
              line.   The line is split
              into  words  as  readline
              would   split  it,  using
              COMP_WORDBREAKS        as
              described   above.   This
              variable   is   available
              only  in  shell functions
              invoked by  the  program‐
              mable  completion facili‐
              ties  (see   Programmable
              Completion below).
       COPROC An  array  variable  (see
              Arrays below) created  to
              hold the file descriptors
              for output from and input
              to  an  unnamed coprocess
              (see Coprocesses above).
       DIRSTACK
              An  array  variable  (see
              Arrays  below) containing
              the current  contents  of
              the    directory   stack.
              Directories appear in the
              stack  in  the order they
              are displayed by the dirs
              builtin.    Assigning  to
              members  of  this   array
              variable  may  be used to
              modify        directories
              already in the stack, but
              the   pushd   and    popd
              builtins  must be used to
              add and  remove  directo‐
              ries.  Assignment to this
              variable will not  change
              the   current  directory.
              If DIRSTACK is unset,  it
              loses its special proper‐
              ties, even if it is  sub‐
              sequently reset.
       EUID   Expands  to the effective
              user ID  of  the  current
              user,    initialized   at
              shell   startup.     This
              variable is readonly.
       FUNCNAME
              An  array  variable  con‐
              taining the names of  all
              shell functions currently
              in  the  execution   call
              stack.   The element with
              index 0 is  the  name  of
              any   currently-executing
              shell function.  The bot‐
              tom-most element (the one
              with the  highest  index)
              is "main".  This variable
              exists only when a  shell
              function   is  executing.
              Assignments  to  FUNCNAME
              have no effect.  If FUNC‐
              NAME is unset,  it  loses
              its  special  properties,
              even  if  it  is   subse‐
              quently reset.

              This variable can be used
              with   BASH_LINENO    and
              BASH_SOURCE.   Each  ele‐
              ment of FUNCNAME has cor‐
              responding   elements  in
              BASH_LINENO           and
              BASH_SOURCE  to  describe
              the  call   stack.    For
              instance, ${FUNCNAME[$i]}
              was called from the  file
              ${BASH_SOURCE[$i+1]}   at
              line               number
              ${BASH_LINENO[$i]}.   The
              caller  builtin  displays
              the  current  call  stack
              using this information.
       GROUPS An  array  variable  con‐
              taining   the   list   of
              groups of which the  cur‐
              rent  user  is  a member.
              Assignments   to   GROUPS
              have   no   effect.    If
              GROUPS is unset, it loses
              its  special  properties,
              even  if  it  is   subse‐
              quently reset.
       HISTCMD
              The  history  number,  or
              index  in   the   history
              list, of the current com‐
              mand.   If   HISTCMD   is
              unset,  it loses its spe‐
              cial properties, even  if
              it is subsequently reset.
       HOSTNAME
              Automatically  set to the
              name of the current host.
       HOSTTYPE
              Automatically  set  to  a
              string    that   uniquely
              describes  the  type   of
              machine  on which bash is
              executing.   The  default
              is system-dependent.
       LINENO Each  time this parameter
              is referenced, the  shell
              substitutes   a   decimal
              number  representing  the
              current  sequential  line
              number (starting with  1)
              within  a script or func‐
              tion.   When  not  in   a
              script  or  function, the
              value substituted is  not
              guaranteed to be meaning‐
              ful.  If LINENO is unset,
              it   loses   its  special
              properties, even if it is
              subsequently reset.
       MACHTYPE
              Automatically  set  to  a
              string     that     fully
              describes the system type
              on which bash is  execut‐
              ing,  in the standard GNU
              cpu-company-system   for‐
              mat.  The default is sys‐
              tem-dependent.
       MAPFILE
              An  array  variable  (see
              Arrays  below) created to
              hold the text read by the
              mapfile  builtin  when no
              variable  name  is   sup‐
              plied.
       OLDPWD The    previous   working
              directory as set  by  the
              cd command.
       OPTARG The  value  of  the  last
              option argument processed
              by  the  getopts  builtin
              command    (see     SHELL
              BUILTIN COMMANDS below).
       OPTIND The  index  of  the  next
              argument to be  processed
              by  the  getopts  builtin
              command    (see     SHELL
              BUILTIN COMMANDS below).
       OSTYPE Automatically  set  to  a
              string that describes the
              operating system on which
              bash is  executing.   The
              default  is system-depen‐
              dent.
       PIPESTATUS
              An  array  variable  (see
              Arrays  below) containing
              a  list  of  exit  status
              values from the processes
              in the most-recently-exe‐
              cuted foreground pipeline
              (which may contain only a
              single command).
       PPID   The  process  ID  of  the
              shell's   parent.    This
              variable is readonly.
       PWD    The    current    working
              directory as set  by  the
              cd command.
       RANDOM Each  time this parameter
              is referenced,  a  random
              integer   between  0  and
              32767 is generated.   The
              sequence  of  random num‐
              bers may  be  initialized
              by  assigning  a value to
              RANDOM.   If  RANDOM   is
              unset,  it loses its spe‐
              cial properties, even  if
              it is subsequently reset.
       READLINE_LINE
              The contents of the read‐
              line line buffer, for use
              with "bind -x" (see SHELL
              BUILTIN COMMANDS below).
       READLINE_POINT
              The   position   of   the
              insertion  point  in  the
              readline line buffer, for
              use  with  "bind -x" (see
              SHELL  BUILTIN   COMMANDS
              below).
       REPLY  Set  to the line of input
              read by the read  builtin
              command when no arguments
              are supplied.
       SECONDS
              Each time this  parameter
              is referenced, the number
              of  seconds  since  shell
              invocation  is  returned.
              If a value is assigned to
              SECONDS,     the    value
              returned upon  subsequent
              references  is the number
              of  seconds   since   the
              assignment plus the value
              assigned.  If SECONDS  is
              unset,  it loses its spe‐
              cial properties, even  if
              it is subsequently reset.
       SHELLOPTS
              A colon-separated list of
              enabled  shell   options.
              Each  word in the list is
              a valid argument for  the
              -o   option  to  the  set
              builtin   command    (see
              SHELL   BUILTIN  COMMANDS
              below).    The    options
              appearing   in  SHELLOPTS
              are those reported as  on
              by set -o.  If this vari‐
              able is in  the  environ‐
              ment when bash starts up,
              each shell option in  the
              list   will   be  enabled
              before    reading     any
              startup    files.    This
              variable is read-only.
       SHLVL  Incremented by  one  each
              time  an instance of bash
              is started.
       UID    Expands to the user ID of
              the  current  user,  ini‐
              tialized     at     shell
              startup.   This  variable
              is readonly.

       The following variables are used
       by  the  shell.   In some cases,
       bash assigns a default value  to
       a   variable;  these  cases  are
       noted below.

       BASH_COMPAT
              The value is used to  set
              the shell's compatibility
              level.  See the  descrip‐
              tion of the shopt builtin
              below under SHELL BUILTIN
              COMMANDS  for  a descrip‐
              tion of the various  com‐
              patibility   levels   and
              their effects.  The value
              may  be  a decimal number
              (e.g., 4.2) or an integer
              (e.g.,  42) corresponding
              to the  desired  compati‐
              bility     level.      If
              BASH_COMPAT is  unset  or
              set  to the empty string,
              the  compatibility  level
              is set to the default for
              the current version.   If
              BASH_COMPAT  is  set to a
              value that is not one  of
              the  valid  compatibility
              levels, the shell  prints
              an error message and sets
              the  compatibility  level
              to  the  default  for the
              current   version.    The
              valid  compatibility lev‐
              els  correspond  to   the
              compatibility     options
              accepted  by  the   shopt
              builtin  described  below
              (for  example,   compat42
              means that 4.2 and 42 are
              valid values).  The  cur‐
              rent  version  is  also a
              valid value.
       BASH_ENV
              If this parameter is  set
              when  bash is executing a
              shell script,  its  value
              is interpreted as a file‐
              name containing  commands
              to  initialize the shell,
              as  in  ~/.bashrc.    The
              value of BASH_ENV is sub‐
              jected    to    parameter
              expansion,  command  sub‐
              stitution, and arithmetic
              expansion   before  being
              interpreted  as  a  file‐
              name.   PATH  is not used
              to search for the  resul‐
              tant filename.
       BASH_XTRACEFD
              If set to an integer cor‐
              responding  to  a   valid
              file   descriptor,   bash
              will write the trace out‐
              put generated when set -x
              is enabled to  that  file
              descriptor.    The   file
              descriptor is closed when
              BASH_XTRACEFD is unset or
              assigned  a  new   value.
              Unsetting   BASH_XTRACEFD
              or assigning it the empty
              string  causes  the trace
              output to be sent to  the
              standard   error.    Note
              that              setting
              BASH_XTRACEFD  to  2 (the
              standard    error    file
              descriptor)    and   then
              unsetting it will  result
              in   the  standard  error
              being closed.
       CDPATH The search path  for  the
              cd  command.   This  is a
              colon-separated  list  of
              directories  in which the
              shell looks for  destina‐
              tion  directories  speci‐
              fied by the  cd  command.
              A    sample    value   is
              ".:~:/usr".
       CHILD_MAX
              Set the number of  exited
              child  status  values for
              the  shell  to  remember.
              Bash  will not allow this
              value  to  be   decreased
              below   a  POSIX-mandated
              minimum, and there  is  a
              maximum  value (currently
              8192) that this  may  not
              exceed.     The   minimum
              value  is   system-depen‐
              dent.
       COLUMNS
              Used  by  the select com‐
              pound command  to  deter‐
              mine  the  terminal width
              when  printing  selection
              lists.  Automatically set
              if    the    checkwinsize
              option  is  enabled or in
              an interactive shell upon
              receipt of a SIGWINCH.
       COMPREPLY
              An  array  variable  from
              which bash reads the pos‐
              sible  completions gener‐
              ated by a shell  function
              invoked  by  the program‐
              mable completion facility
              (see Programmable Comple‐
              tion below).  Each  array
              element contains one pos‐
              sible completion.
       EMACS  If bash finds this  vari‐
              able  in  the environment
              when  the  shell   starts
              with    value   "t",   it
              assumes that the shell is
              running in an Emacs shell
              buffer and disables  line
              editing.
       ENV    Similar to BASH_ENV; used
              when the shell is invoked
              in POSIX mode.
       EXECIGNORE
              A colon-separated list of
              shell patterns (see  Pat‐
              tern  Matching)  defining
              the list of filenames  to
              be   ignored  by  command
              search using PATH.  Files
              whose    full   pathnames
              match one of  these  pat‐
              terns  are not considered
              executable files for  the
              purposes   of  completion
              and command execution via
              PATH  lookup.   This does
              not affect  the  behavior
              of  the  [,  test, and [[
              commands.  Full pathnames
              in the command hash table
              are not subject  to  EXE‐
              CIGNORE.   Use this vari‐
              able  to  ignore   shared
              library  files  that have
              the executable  bit  set,
              but  are  not  executable
              files.     The    pattern
              matching  honors the set‐
              ting of the extglob shell
              option.
       FCEDIT The  default  editor  for
              the fc builtin command.
       FIGNORE
              A colon-separated list of
              suffixes  to  ignore when
              performing filename  com‐
              pletion   (see   READLINE
              below).  A filename whose
              suffix matches one of the
              entries  in  FIGNORE   is
              excluded from the list of
              matched   filenames.    A
              sample  value  is  ".o:~"
              (Quoting is  needed  when
              assigning a value to this
              variable, which  contains
              tildes).
       FUNCNEST
              If set to a numeric value
              greater than 0, defines a
              maximum  function nesting
              level.  Function  invoca‐
              tions  that  exceed  this
              nesting level will  cause
              the  current  command  to
              abort.
       GLOBIGNORE
              A colon-separated list of
              patterns defining the set
              of   filenames   to    be
              ignored    by    pathname
              expansion.  If a filename
              matched   by  a  pathname
              expansion  pattern   also
              matches  one  of the pat‐
              terns in  GLOBIGNORE,  it
              is  removed from the list
              of matches.
       HISTCONTROL
              A colon-separated list of
              values   controlling  how
              commands are saved on the
              history   list.   If  the
              list of  values  includes
              ignorespace,  lines which
              begin with a space  char‐
              acter  are  not  saved in
              the  history   list.    A
              value    of    ignoredups
              causes lines matching the
              previous history entry to
              not be saved.  A value of
              ignoreboth  is  shorthand
              for    ignorespace    and
              ignoredups.   A  value of
              erasedups causes all pre‐
              vious  lines matching the
              current   line   to    be
              removed  from the history
              list before that line  is
              saved.   Any value not in
              the   above    list    is
              ignored.   If HISTCONTROL
              is  unset,  or  does  not
              include  a  valid  value,
              all  lines  read  by  the
              shell parser are saved on
              the history list, subject
              to  the  value of HISTIG‐
              NORE.   The  second   and
              subsequent   lines  of  a
              multi-line compound  com‐
              mand  are not tested, and
              are added to the  history
              regardless  of  the value
              of HISTCONTROL.
       HISTFILE
              The name of the  file  in
              which  command history is
              saved    (see     HISTORY
              below).     The   default
              value is ~/.bash_history.
              If   unset,  the  command
              history is not saved when
              a shell exits.
       HISTFILESIZE
              The   maximum  number  of
              lines  contained  in  the
              history  file.  When this
              variable  is  assigned  a
              value,  the  history file
              is truncated,  if  neces‐
              sary,  to contain no more
              than that number of lines
              by  removing  the  oldest
              entries.    The   history
              file is also truncated to
              this size  after  writing
              it  when  a  shell exits.
              If the value  is  0,  the
              history file is truncated
              to   zero   size.    Non-
              numeric     values    and
              numeric values less  than
              zero  inhibit truncation.
              The   shell   sets    the
              default   value   to  the
              value of  HISTSIZE  after
              reading    any    startup
              files.
       HISTIGNORE
              A colon-separated list of
              patterns  used  to decide
              which    command    lines
              should  be  saved  on the
              history list.  Each  pat‐
              tern  is  anchored at the
              beginning of the line and
              must  match  the complete
              line (no implicit `*'  is
              appended).   Each pattern
              is  tested  against   the
              line   after  the  checks
              specified by  HISTCONTROL
              are applied.  In addition
              to the normal shell  pat‐
              tern matching characters,
              `&' matches the  previous
              history line.  `&' may be
              escaped  using  a   back‐
              slash;  the  backslash is
              removed before attempting
              a  match.  The second and
              subsequent  lines  of   a
              multi-line  compound com‐
              mand are not tested,  and
              are  added to the history
              regardless of  the  value
              of  HISTIGNORE.  The pat‐
              tern matching honors  the
              setting  of  the  extglob
              shell option.
       HISTSIZE
              The number of commands to
              remember  in  the command
              history   (see    HISTORY
              below).   If the value is
              0, commands are not saved
              in   the   history  list.
              Numeric values less  than
              zero result in every com‐
              mand being saved  on  the
              history list (there is no
              limit).  The  shell  sets
              the  default value to 500
              after reading any startup
              files.
       HISTTIMEFORMAT
              If  this  variable is set
              and not null,  its  value
              is   used   as  a  format
              string for strftime(3) to
              print   the   time  stamp
              associated with each his‐
              tory  entry  displayed by
              the history builtin.   If
              this   variable  is  set,
              time stamps  are  written
              to  the  history  file so
              they  may  be   preserved
              across   shell  sessions.
              This  uses  the   history
              comment character to dis‐
              tinguish timestamps  from
              other history lines.
       HOME   The home directory of the
              current user; the default
              argument   for   the   cd
              builtin   command.    The
              value of this variable is
              also used when performing
              tilde expansion.
       HOSTFILE
              Contains  the  name  of a
              file in the  same  format
              as /etc/hosts that should
              be read  when  the  shell
              needs to complete a host‐
              name.  The list of possi‐
              ble  hostname completions
              may be changed while  the
              shell   is  running;  the
              next time  hostname  com‐
              pletion    is   attempted
              after   the   value    is
              changed,  bash  adds  the
              contents of the new  file
              to the existing list.  If
              HOSTFILE is set, but  has
              no  value,  or  does  not
              name  a  readable   file,
              bash   attempts  to  read
              /etc/hosts to obtain  the
              list of possible hostname
              completions.  When  HOST‐
              FILE  is unset, the host‐
              name list is cleared.
       IFS    The Internal Field  Sepa‐
              rator  that  is  used for
              word   splitting    after
              expansion  and  to  split
              lines into words with the
              read   builtin   command.
              The  default   value   is
              ``<space><tab><new‐
              line>''.
       IGNOREEOF
              Controls the action of an
              interactive    shell   on
              receipt of an EOF charac‐
              ter  as  the  sole input.
              If set, the value is  the
              number of consecutive EOF
              characters which must  be
              typed  as the first char‐
              acters on an  input  line
              before  bash  exits.   If
              the variable  exists  but
              does  not  have a numeric
              value, or has  no  value,
              the  default value is 10.
              If it does not exist, EOF
              signifies   the   end  of
              input to the shell.
       INPUTRC
              The  filename   for   the
              readline   startup  file,
              overriding the default of
              ~/.inputrc  (see READLINE
              below).
       LANG   Used  to  determine   the
              locale  category  for any
              category not specifically
              selected  with a variable
              starting with LC_.
       LC_ALL This  variable  overrides
              the value of LANG and any
              other LC_ variable speci‐
              fying a locale category.
       LC_COLLATE
              This  variable determines
              the collation order  used
              when  sorting the results
              of  pathname   expansion,
              and determines the behav‐
              ior of range expressions,
              equivalence  classes, and
              collating       sequences
              within pathname expansion
              and pattern matching.
       LC_CTYPE
              This variable  determines
              the   interpretation   of
              characters and the behav‐
              ior  of character classes
              within pathname expansion
              and pattern matching.
       LC_MESSAGES
              This  variable determines
              the locale used to trans‐
              late        double-quoted
              strings preceded by a $.
       LC_NUMERIC
              This variable  determines
              the  locale category used
              for number formatting.
       LC_TIME
              This variable  determines
              the  locale category used
              for data and time format‐
              ting.
       LINES  Used  by  the select com‐
              pound command  to  deter‐
              mine  the  column  length
              for  printing   selection
              lists.  Automatically set
              if    the    checkwinsize
              option  is  enabled or in
              an interactive shell upon
              receipt of a SIGWINCH.
       MAIL   If  this parameter is set
              to a  file  or  directory
              name   and  the  MAILPATH
              variable is not set, bash
              informs  the  user of the
              arrival of  mail  in  the
              specified     file     or
              Maildir-format directory.
       MAILCHECK
              Specifies how  often  (in
              seconds)  bash checks for
              mail.  The default is  60
              seconds.  When it is time
              to check  for  mail,  the
              shell does so before dis‐
              playing    the    primary
              prompt.  If this variable
              is unset,  or  set  to  a
              value  that is not a num‐
              ber greater than or equal
              to  zero,  the shell dis‐
              ables mail checking.
       MAILPATH
              A colon-separated list of
              filenames  to  be checked
              for mail.  The message to
              be   printed   when  mail
              arrives in  a  particular
              file  may be specified by
              separating  the  filename
              from  the  message with a
              `?'.  When  used  in  the
              text  of  the message, $_
              expands to  the  name  of
              the   current   mailfile.
              Example:
              MAIL‐
              PATH='/var/mail/bfox?"You
              have
              mail":~/shell-mail?"$_
              has mail!"'
              Bash can be configured to
              supply  a  default  value
              for this variable  (there
              is  no value by default),
              but the location  of  the
              user  mail  files that it
              uses is system  dependent
              (e.g., /var/mail/$USER).
       OPTERR If  set  to  the value 1,
              bash displays error  mes‐
              sages  generated  by  the
              getopts  builtin  command
              (see  SHELL  BUILTIN COM‐
              MANDS below).  OPTERR  is
              initialized   to  1  each
              time the shell is invoked
              or a shell script is exe‐
              cuted.
       PATH   The search path for  com‐
              mands.   It  is  a colon-
              separated list of  direc‐
              tories in which the shell
              looks for  commands  (see
              COMMAND EXECUTION below).
              A   zero-length    (null)
              directory   name  in  the
              value of  PATH  indicates
              the current directory.  A
              null directory  name  may
              appear  as  two  adjacent
              colons, or as an  initial
              or  trailing  colon.  The
              default path  is  system-
              dependent,  and is set by
              the   administrator   who
              installs  bash.  A common
              value is
              ``/usr/local/bin:
              /usr/local/sbin:/usr/bin:
              /usr/sbin:/bin:/sbin''.
       POSIXLY_CORRECT
              If  this  variable  is in
              the environment when bash
              starts,  the shell enters
              posix mode before reading
              the  startup files, as if
              the  --posix   invocation
              option had been supplied.
              If it is  set  while  the
              shell  is  running,  bash
              enables posix mode, as if
              the  command set -o posix
              had been executed.
       PROMPT_COMMAND
              If set, the value is exe‐
              cuted  as a command prior
              to issuing  each  primary
              prompt.
       PROMPT_DIRTRIM
              If   set   to   a  number
              greater  than  zero,  the
              value is used as the num‐
              ber of trailing directory
              components to retain when
              expanding the \w  and  \W
              prompt   string   escapes
              (see  PROMPTING   below).
              Characters   removed  are
              replaced with  an  ellip‐
              sis.
       PS0    The value of this parame‐
              ter  is   expanded   (see
              PROMPTING below) and dis‐
              played   by   interactive
              shells  after  reading  a
              command  and  before  the
              command is executed.
       PS1    The value of this parame‐
              ter  is   expanded   (see
              PROMPTING below) and used
              as  the  primary   prompt
              string.     The   default
              value is ``\s-\v\$ ''.
       PS2    The value of this parame‐
              ter  is  expanded as with
              PS1 and used as the  sec‐
              ondary   prompt   string.
              The default is ``> ''.
       PS3    The value of this parame‐
              ter is used as the prompt
              for  the  select  command
              (see     SHELL    GRAMMAR
              above).
       PS4    The value of this parame‐
              ter  is  expanded as with
              PS1  and  the  value   is
              printed  before each com‐
              mand bash displays during
              an  execution trace.  The
              first character of PS4 is
              replicated       multiple
              times, as  necessary,  to
              indicate  multiple levels
              of   indirection.     The
              default is ``+ ''.
       SHELL  The  full pathname to the
              shell  is  kept  in  this
              environment variable.  If
              it is not  set  when  the
              shell     starts,    bash
              assigns to  it  the  full
              pathname  of  the current
              user's login shell.
       TIMEFORMAT
              The value of this parame‐
              ter  is  used as a format
              string specifying how the
              timing   information  for
              pipelines  prefixed  with
              the  time  reserved  word
              should be displayed.  The
              % character introduces an
              escape sequence  that  is
              expanded  to a time value
              or   other   information.
              The  escape sequences and
              their  meanings  are   as
              follows;    the    braces
              denote optional portions.
              %%        A literal %.
              %[p][l]R  The     elapsed
                        time   in  sec‐
                        onds.
              %[p][l]U  The  number  of
                        CPU     seconds
                        spent  in  user
                        mode.
              %[p][l]S  The  number  of
                        CPU     seconds
                        spent in system
                        mode.
              %P        The  CPU   per‐
                        centage,   com‐
                        puted as (%U  +
                        %S) / %R.

              The optional p is a digit
              specifying the precision,
              the  number of fractional
              digits  after  a  decimal
              point.    A  value  of  0
              causes no  decimal  point
              or fraction to be output.
              At  most   three   places
              after  the  decimal point
              may be specified;  values
              of  p  greater than 3 are
              changed to 3.   If  p  is
              not  specified, the value
              3 is used.

              The optional l  specifies
              a  longer format, includ‐
              ing minutes, of the  form
              MMmSS.FFs.   The value of
              p determines  whether  or
              not   the   fraction   is
              included.

              If this variable  is  not
              set,  bash  acts as if it
              had       the       value
              $'\nreal\t%3lR\nuser\t%3lU\nsys\t%3lS'.
              If the value is null,  no
              timing   information   is
              displayed.   A   trailing
              newline is added when the
              format  string  is   dis‐
              played.
       TMOUT  If set to a value greater
              than   zero,   TMOUT   is
              treated  as  the  default
              timeout  for   the   read
              builtin.  The select com‐
              mand terminates if  input
              does   not  arrive  after
              TMOUT seconds when  input
              is  coming  from a termi‐
              nal.  In  an  interactive
              shell,   the   value   is
              interpreted as the number
              of  seconds to wait for a
              line of input after issu‐
              ing  the  primary prompt.
              Bash   terminates   after
              waiting  for  that number
              of seconds if a  complete
              line  of  input  does not
              arrive.
       TMPDIR If  set,  bash  uses  its
              value  as  the  name of a
              directory in  which  bash
              creates  temporary  files
              for the shell's use.
       auto_resume
              This  variable   controls
              how  the  shell interacts
              with  the  user  and  job
              control.   If  this vari‐
              able is set, single  word
              simple  commands  without
              redirections are  treated
              as candidates for resump‐
              tion   of   an   existing
              stopped job.  There is no
              ambiguity   allowed;   if
              there  is  more  than one
              job  beginning  with  the
              string   typed,  the  job
              most recently accessed is
              selected.   The name of a
              stopped job, in this con‐
              text, is the command line
              used to start it.  If set
              to  the  value exact, the
              string   supplied    must
              match   the   name  of  a
              stopped job  exactly;  if
              set   to  substring,  the
              string supplied needs  to
              match  a substring of the
              name of  a  stopped  job.
              The  substring value pro‐
              vides functionality anal‐
              ogous   to  the  %?   job
              identifier (see JOB  CON‐
              TROL  below).   If set to
              any other value, the sup‐
              plied  string  must  be a
              prefix of a stopped job's
              name; this provides func‐
              tionality  analogous   to
              the  %string  job identi‐
              fier.
       histchars
              The two or three  charac‐
              ters  which  control his‐
              tory expansion  and  tok‐
              enization   (see  HISTORY
              EXPANSION  below).    The
              first  character  is  the
              history expansion charac‐
              ter,  the character which
              signals the  start  of  a
              history  expansion,  nor‐
              mally  `!'.   The  second
              character  is  the  quick
              substitution   character,
              which  is  used as short‐
              hand for  re-running  the
              previous command entered,
              substituting  one  string
              for  another  in the com‐
              mand.   The  default   is
              `^'.   The optional third
              character is the  charac‐
              ter  which indicates that
              the remainder of the line
              is  a  comment when found
              as the first character of
              a   word,  normally  `#'.
              The history comment char‐
              acter causes history sub‐
              stitution to  be  skipped
              for  the  remaining words
              on the line.  It does not
              necessarily   cause   the
              shell parser to treat the
              rest  of  the  line  as a
              comment.

   Arrays
       Bash  provides   one-dimensional
       indexed  and  associative  array
       variables.  Any variable may  be
       used  as  an  indexed array; the
       declare builtin will  explicitly
       declare  an  array.  There is no
       maximum limit on the size of  an
       array,  nor any requirement that
       members be indexed  or  assigned
       contiguously.    Indexed  arrays
       are  referenced  using  integers
       (including   arithmetic  expres‐
       sions) and are zero-based; asso‐
       ciative  arrays  are  referenced
       using arbitrary strings.  Unless
       otherwise  noted,  indexed array
       indices  must  be   non-negative
       integers.

       An   indexed  array  is  created
       automatically if any variable is
       assigned  to  using  the  syntax
       name[subscript]=value.  The sub‐
       script  is  treated as an arith‐
       metic expression that must eval‐
       uate to a number.  To explicitly
       declare an  indexed  array,  use
       declare   -a   name  (see  SHELL
       BUILTIN     COMMANDS     below).
       declare  -a  name[subscript]  is
       also accepted; the subscript  is
       ignored.

       Associative  arrays  are created
       using declare -A name.

       Attributes may be specified  for
       an   array  variable  using  the
       declare and  readonly  builtins.
       Each  attribute  applies  to all
       members of an array.

       Arrays  are  assigned  to  using
       compound assignments of the form
       name=(value1 ... valuen),  where
       each  value is of the form [sub‐
       script]=string.   Indexed  array
       assignments  do not require any‐
       thing but string.  When  assign‐
       ing  to  indexed  arrays, if the
       optional brackets and  subscript
       are   supplied,  that  index  is
       assigned to; otherwise the index
       of  the  element assigned is the
       last index assigned  to  by  the
       statement  plus  one.   Indexing
       starts at zero.

       When assigning to an associative
       array,    the    subscript    is
       required.

       This syntax is also accepted  by
       the declare builtin.  Individual
       array elements may  be  assigned
       to     using    the    name[sub‐
       script]=value syntax  introduced
       above.   When  assigning  to  an
       indexed array, if name  is  sub‐
       scripted  by  a negative number,
       that number  is  interpreted  as
       relative to one greater than the
       maximum index of name, so  nega‐
       tive indices count back from the
       end of the array, and  an  index
       of  -1  references the last ele‐
       ment.

       Any element of an array  may  be
       referenced   using   ${name[sub‐
       script]}.    The   braces    are
       required to avoid conflicts with
       pathname  expansion.   If   sub‐
       script  is  @  or  *,  the  word
       expands to all members of  name.
       These   subscripts  differ  only
       when  the  word  appears  within
       double  quotes.   If the word is
       double-quoted,        ${name[*]}
       expands  to  a  single word with
       the value of each  array  member
       separated by the first character
       of the IFS special variable, and
       ${name[@]}  expands each element
       of  name  to  a  separate  word.
       When there are no array members,
       ${name[@]} expands  to  nothing.
       If  the  double-quoted expansion
       occurs within a word, the expan‐
       sion  of  the first parameter is
       joined with the  beginning  part
       of  the  original  word, and the
       expansion of the last  parameter
       is  joined with the last part of
       the  original  word.   This   is
       analogous  to  the  expansion of
       the special parameters *  and  @
       (see  Special Parameters above).
       ${#name[subscript]}  expands  to
       the    length   of   ${name[sub‐
       script]}.  If subscript is *  or
       @,  the  expansion is the number
       of elements in  the  array.   If
       the  subscript used to reference
       an element of an  indexed  array
       evaluates  to a number less than
       zero, it is interpreted as rela‐
       tive  to  one  greater  than the
       maximum index of the  array,  so
       negative indices count back from
       the end of  the  array,  and  an
       index  of -1 references the last
       element.

       Referencing  an  array  variable
       without  a  subscript is equiva‐
       lent to  referencing  the  array
       with a subscript of 0.  Any ref‐
       erence to  a  variable  using  a
       valid  subscript  is  legal, and
       bash will  create  an  array  if
       necessary.

       An  array variable is considered
       set  if  a  subscript  has  been
       assigned   a  value.   The  null
       string is a valid value.

       It is  possible  to  obtain  the
       keys  (indices)  of  an array as
       well as the values.  ${!name[@]}
       and  ${!name[*]}  expand  to the
       indices assigned in array  vari‐
       able  name.   The treatment when
       in double quotes is  similar  to
       the  expansion  of  the  special
       parameters @ and * within double
       quotes.

       The  unset  builtin  is  used to
       destroy arrays.  unset name[sub‐
       script]  destroys the array ele‐
       ment at index subscript.   Nega‐
       tive   subscripts   to   indexed
       arrays   are   interpreted    as
       described  above.   Care must be
       taken  to  avoid  unwanted  side
       effects   caused   by   pathname
       expansion.   unset  name,  where
       name   is  an  array,  or  unset
       name[subscript], where subscript
       is  *  or  @, removes the entire
       array.

       The declare, local, and readonly
       builtins each accept a -a option
       to specify an indexed array  and
       a  -A option to specify an asso‐
       ciative array.  If both  options
       are  supplied,  -A  takes prece‐
       dence.  The read builtin accepts
       a  -a option to assign a list of
       words  read  from  the  standard
       input  to an array.  The set and
       declare builtins  display  array
       values in a way that allows them
       to be reused as assignments.

EXPANSION
       Expansion is  performed  on  the
       command  line  after it has been
       split  into  words.   There  are
       seven  kinds  of  expansion per‐
       formed: brace  expansion,  tilde
       expansion,  parameter  and vari‐
       able expansion, command  substi‐
       tution,   arithmetic  expansion,
       word  splitting,  and   pathname
       expansion.

       The   order  of  expansions  is:
       brace  expansion;  tilde  expan‐
       sion,   parameter  and  variable
       expansion, arithmetic expansion,
       and  command  substitution (done
       in  a  left-to-right   fashion);
       word   splitting;  and  pathname
       expansion.

       On systems that can support  it,
       there is an additional expansion
       available: process substitution.
       This  is  performed  at the same
       time as tilde, parameter,  vari‐
       able,  and  arithmetic expansion
       and command substitution.

       After these expansions are  per‐
       formed, quote characters present
       in the original word are removed
       unless  they  have  been  quoted
       themselves (quote removal).

       Only   brace   expansion,   word
       splitting,  and  pathname expan‐
       sion can change  the  number  of
       words  of  the  expansion; other
       expansions expand a single  word
       to  a  single  word.   The  only
       exceptions  to  this   are   the
       expansions     of    "$@"    and
       "${name[@]}" as explained  above
       (see PARAMETERS).

   Brace Expansion
       Brace  expansion  is a mechanism
       by which arbitrary  strings  may
       be generated.  This mechanism is
       similar to  pathname  expansion,
       but the filenames generated need
       not exist.  Patterns to be brace
       expanded  take  the  form  of an
       optional preamble,  followed  by
       either  a  series of comma-sepa‐
       rated  strings  or  a   sequence
       expression  between  a  pair  of
       braces, followed by an  optional
       postscript.    The  preamble  is
       prefixed  to  each  string  con‐
       tained  within  the  braces, and
       the postscript is then  appended
       to    each   resulting   string,
       expanding left to right.

       Brace expansions may be  nested.
       The  results  of  each  expanded
       string are not sorted;  left  to
       right  order  is preserved.  For
       example, a{d,c,b}e expands  into
       `ade ace abe'.

       A  sequence expression takes the
       form {x..y[..incr]}, where x and
       y  are either integers or single
       characters,   and    incr,    an
       optional  increment, is an inte‐
       ger.   When  integers  are  sup‐
       plied, the expression expands to
       each number  between  x  and  y,
       inclusive.    Supplied  integers
       may be prefixed with 0 to  force
       each   term  to  have  the  same
       width.   When  either  x  or   y
       begins  with  a  zero, the shell
       attempts to force all  generated
       terms to contain the same number
       of  digits,  zero-padding  where
       necessary.   When characters are
       supplied, the expression expands
       to  each character lexicographi‐
       cally between x  and  y,  inclu‐
       sive,   using   the   default  C
       locale.  Note that both x and  y
       must  be of the same type.  When
       the increment is supplied, it is
       used  as  the difference between
       each term.  The  default  incre‐
       ment is 1 or -1 as appropriate.

       Brace   expansion  is  performed
       before any other expansions, and
       any  characters special to other
       expansions are preserved in  the
       result.  It is strictly textual.
       Bash does not apply any  syntac‐
       tic  interpretation  to the con‐
       text of  the  expansion  or  the
       text between the braces.

       A  correctly-formed brace expan‐
       sion must contain unquoted open‐
       ing  and  closing braces, and at
       least one unquoted  comma  or  a
       valid  sequence expression.  Any
       incorrectly formed brace  expan‐
       sion  is left unchanged.  A { or
       , may be quoted with a backslash
       to  prevent its being considered
       part of a brace expression.   To
       avoid  conflicts  with parameter
       expansion, the string ${ is  not
       considered  eligible  for  brace
       expansion.

       This construct is typically used
       as  shorthand  when  the  common
       prefix of the strings to be gen‐
       erated  is  longer  than  in the
       above example:

              mkdir
              /usr/local/src/bash/{old,new,dist,bugs}
       or
              chown                root
              /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}

       Brace  expansion  introduces   a
       slight incompatibility with his‐
       torical versions of sh.  sh does
       not  treat  opening  or  closing
       braces   specially   when   they
       appear  as  part  of a word, and
       preserves them  in  the  output.
       Bash  removes  braces from words
       as a consequence of brace expan‐
       sion.    For   example,  a  word
       entered  to  sh   as   file{1,2}
       appears  identically in the out‐
       put.  The same word is output as
       file1  file2  after expansion by
       bash.  If  strict  compatibility
       with  sh  is desired, start bash
       with the +B  option  or  disable
       brace   expansion  with  the  +B
       option to the set  command  (see
       SHELL BUILTIN COMMANDS below).

   Tilde Expansion
       If   a   word   begins  with  an
       unquoted tilde character  (`~'),
       all  of the characters preceding
       the first unquoted slash (or all
       characters,   if   there  is  no
       unquoted slash) are considered a
       tilde-prefix.   If  none  of the
       characters in  the  tilde-prefix
       are  quoted,  the  characters in
       the tilde-prefix  following  the
       tilde  are treated as a possible
       login name.  If this login  name
       is the null string, the tilde is
       replaced with the value  of  the
       shell  parameter  HOME.  If HOME
       is unset, the home directory  of
       the  user executing the shell is
       substituted instead.  Otherwise,
       the   tilde-prefix  is  replaced
       with the home directory  associ‐
       ated  with  the  specified login
       name.

       If the tilde-prefix is  a  `~+',
       the  value of the shell variable
       PWD replaces  the  tilde-prefix.
       If  the  tilde-prefix is a `~-',
       the value of the shell  variable
       OLDPWD, if it is set, is substi‐
       tuted.  If the  characters  fol‐
       lowing  the  tilde in the tilde-
       prefix consist of  a  number  N,
       optionally  prefixed by a `+' or
       a  `-',  the   tilde-prefix   is
       replaced  with the corresponding
       element   from   the   directory
       stack,  as it would be displayed
       by the dirs builtin invoked with
       the tilde-prefix as an argument.
       If the characters following  the
       tilde  in  the tilde-prefix con‐
       sist of a number without a lead‐
       ing `+' or `-', `+' is assumed.

       If the login name is invalid, or
       the tilde expansion  fails,  the
       word is unchanged.

       Each   variable   assignment  is
       checked for unquoted  tilde-pre‐
       fixes  immediately following a :
       or the first =.  In these cases,
       tilde  expansion  is  also  per‐
       formed.  Consequently,  one  may
       use  filenames  with  tildes  in
       assignments to  PATH,  MAILPATH,
       and   CDPATH,   and   the  shell
       assigns the expanded value.

   Parameter Expansion
       The  `$'  character   introduces
       parameter   expansion,   command
       substitution,   or    arithmetic
       expansion.   The  parameter name
       or symbol to be expanded may  be
       enclosed  in  braces,  which are
       optional but  serve  to  protect
       the variable to be expanded from
       characters immediately following
       it which could be interpreted as
       part of the name.

       When braces are used, the match‐
       ing  ending  brace  is the first
       `}' not escaped by  a  backslash
       or  within  a quoted string, and
       not within  an  embedded  arith‐
       metic expansion, command substi‐
       tution, or parameter expansion.

       ${parameter}
              The value of parameter is
              substituted.   The braces
              are required when parame‐
              ter   is   a   positional
              parameter with more  than
              one digit, or when param‐
              eter  is  followed  by  a
              character which is not to
              be interpreted as part of
              its  name.  The parameter
              is a shell  parameter  as
              described  above  PARAME‐
              TERS) or an array  refer‐
              ence (Arrays).

       If the first character of param‐
       eter  is  an  exclamation  point
       (!),  and  parameter  is  not  a
       nameref, it introduces  a  level
       of  variable  indirection.  Bash
       uses the value of  the  variable
       formed  from the rest of parame‐
       ter as the name of the variable;
       this  variable  is then expanded
       and that value is  used  in  the
       rest of the substitution, rather
       than  the  value  of   parameter
       itself.   This is known as indi‐
       rect expansion.  If parameter is
       a  nameref,  this expands to the
       name of the variable  referenced
       by parameter instead of perform‐
       ing the complete indirect expan‐
       sion.   The  exceptions  to this
       are the  expansions  of  ${!pre‐
       fix*}  and ${!name[@]} described
       below.   The  exclamation  point
       must immediately follow the left
       brace  in  order  to   introduce
       indirection.

       In each of the cases below, word
       is subject to  tilde  expansion,
       parameter   expansion,   command
       substitution,   and   arithmetic
       expansion.

       When  not  performing  substring
       expansion, using the forms docu‐
       mented  below  (e.g.,  :-), bash
       tests for a  parameter  that  is
       unset  or  null.   Omitting  the
       colon results in a test only for
       a parameter that is unset.

       ${parameter:-word}
              Use  Default  Values.  If
              parameter  is  unset   or
              null,  the  expansion  of
              word   is    substituted.
              Otherwise,  the  value of
              parameter is substituted.
       ${parameter:=word}
              Assign  Default   Values.
              If  parameter is unset or
              null,  the  expansion  of
              word   is   assigned   to
              parameter.  The value  of
              parameter is then substi‐
              tuted.  Positional param‐
              eters and special parame‐
              ters may not be  assigned
              to in this way.
       ${parameter:?word}
              Display  Error if Null or
              Unset.  If  parameter  is
              null or unset, the expan‐
              sion of word (or  a  mes‐
              sage  to  that  effect if
              word is not  present)  is
              written  to  the standard
              error and the  shell,  if
              it  is  not  interactive,
              exits.   Otherwise,   the
              value   of  parameter  is
              substituted.
       ${parameter:+word}
              Use Alternate Value.   If
              parameter   is   null  or
              unset, nothing is substi‐
              tuted,    otherwise   the
              expansion of word is sub‐
              stituted.
       ${parameter:offset}
       ${parameter:offset:length}
              Substring      Expansion.
              Expands to up  to  length
              characters  of  the value
              of parameter starting  at
              the  character  specified
              by offset.  If  parameter
              is  @,  an  indexed array
              subscripted by @ or *, or
              an    associative   array
              name, the results  differ
              as  described  below.  If
              length    is     omitted,
              expands  to the substring
              of the value of parameter
              starting at the character
              specified by  offset  and
              extending  to  the end of
              the  value.   length  and
              offset   are   arithmetic
              expressions  (see  ARITH‐
              METIC EVALUATION below).

              If  offset evaluates to a
              number  less  than  zero,
              the  value  is used as an
              offset in characters from
              the  end  of the value of
              parameter.    If   length
              evaluates   to  a  number
              less  than  zero,  it  is
              interpreted  as an offset
              in  characters  from  the
              end   of   the  value  of
              parameter rather  than  a
              number of characters, and
              the  expansion   is   the
              characters between offset
              and  that  result.   Note
              that  a  negative  offset
              must  be  separated  from
              the colon by at least one
              space to avoid being con‐
              fused  with the :- expan‐
              sion.

              If parameter  is  @,  the
              result  is  length  posi‐
              tional parameters  begin‐
              ning  at offset.  A nega‐
              tive offset is taken rel‐
              ative to one greater than
              the  greatest  positional
              parameter,  so  an offset
              of -1  evaluates  to  the
              last  positional  parame‐
              ter.  It is an  expansion
              error if length evaluates
              to  a  number  less  than
              zero.

              If    parameter   is   an
              indexed array  name  sub‐
              scripted  by  @ or *, the
              result is the length mem‐
              bers  of the array begin‐
              ning    with    ${parame‐
              ter[offset]}.  A negative
              offset is taken  relative
              to  one  greater than the
              maximum  index   of   the
              specified  array.   It is
              an  expansion  error   if
              length   evaluates  to  a
              number less than zero.

              Substring       expansion
              applied to an associative
              array produces  undefined
              results.

              Substring   indexing   is
              zero-based   unless   the
              positional parameters are
              used, in which  case  the
              indexing  starts  at 1 by
              default.  If offset is 0,
              and the positional param‐
              eters  are  used,  $0  is
              prefixed to the list.

       ${!prefix*}
       ${!prefix@}
              Names   matching  prefix.
              Expands to the  names  of
              variables   whose   names
              begin with prefix,  sepa‐
              rated  by the first char‐
              acter of the IFS  special
              variable.  When @ is used
              and the expansion appears
              within   double   quotes,
              each    variable     name
              expands   to  a  separate
              word.

       ${!name[@]}
       ${!name[*]}
              List of array  keys.   If
              name  is  an  array vari‐
              able, expands to the list
              of  array  indices (keys)
              assigned  in  name.    If
              name  is  not  an  array,
              expands to 0 if  name  is
              set  and  null otherwise.
              When @ is  used  and  the
              expansion  appears within
              double quotes,  each  key
              expands   to  a  separate
              word.

       ${#parameter}
              Parameter  length.    The
              length  in  characters of
              the value of parameter is
              substituted.   If parame‐
              ter is * or @, the  value
              substituted is the number
              of positional parameters.
              If  parameter is an array
              name subscripted by *  or
              @,  the value substituted
              is the number of elements
              in the array.  If parame‐
              ter is an  indexed  array
              name   subscripted  by  a
              negative   number,   that
              number  is interpreted as
              relative to  one  greater
              than the maximum index of
              parameter,  so   negative
              indices  count  back from
              the end of the array, and
              an index of -1 references
              the last element.

       ${parameter#word}
       ${parameter##word}
              Remove  matching   prefix
              pattern.    The  word  is
              expanded  to  produce   a
              pattern  just as in path‐
              name expansion.   If  the
              pattern    matches    the
              beginning of the value of
              parameter,    then    the
              result of  the  expansion
              is  the expanded value of
              parameter with the short‐
              est matching pattern (the
              ``#'' case) or the  long‐
              est matching pattern (the
              ``##'' case) deleted.  If
              parameter  is @ or *, the
              pattern removal operation
              is  applied to each posi‐
              tional parameter in turn,
              and  the expansion is the
              resultant    list.     If
              parameter   is  an  array
              variable subscripted with
              @   or   *,  the  pattern
              removal   operation    is
              applied to each member of
              the array  in  turn,  and
              the   expansion   is  the
              resultant list.

       ${parameter%word}
       ${parameter%%word}
              Remove  matching   suffix
              pattern.    The  word  is
              expanded  to  produce   a
              pattern  just as in path‐
              name expansion.   If  the
              pattern  matches a trail‐
              ing   portion   of    the
              expanded value of parame‐
              ter, then the  result  of
              the   expansion   is  the
              expanded value of parame‐
              ter   with  the  shortest
              matching   pattern   (the
              ``%''  case) or the long‐
              est matching pattern (the
              ``%%'' case) deleted.  If
              parameter is @ or *,  the
              pattern removal operation
              is applied to each  posi‐
              tional parameter in turn,
              and the expansion is  the
              resultant    list.     If
              parameter  is  an   array
              variable subscripted with
              @  or  *,   the   pattern
              removal    operation   is
              applied to each member of
              the  array  in  turn, and
              the  expansion   is   the
              resultant list.

       ${parameter/pattern/string}
              Pattern     substitution.
              The pattern  is  expanded
              to produce a pattern just
              as in pathname expansion.
              Parameter is expanded and
              the longest match of pat‐
              tern against its value is
              replaced with string.  If
              pattern  begins  with  /,
              all  matches  of  pattern
              are replaced with string.
              Normally only  the  first
              match  is  replaced.   If
              pattern begins with #, it
              must  match at the begin‐
              ning  of   the   expanded
              value  of  parameter.  If
              pattern begins with %, it
              must  match at the end of
              the  expanded  value   of
              parameter.   If string is
              null, matches of  pattern
              are  deleted  and  the  /
              following pattern may  be
              omitted.   If the nocase‐
              match  shell  option   is
              enabled,   the  match  is
              performed without  regard
              to the case of alphabetic
              characters.  If parameter
              is  @ or *, the substitu‐
              tion operation is applied
              to each positional param‐
              eter  in  turn,  and  the
              expansion  is  the resul‐
              tant list.  If  parameter
              is an array variable sub‐
              scripted with @ or *, the
              substitution operation is
              applied to each member of
              the  array  in  turn, and
              the  expansion   is   the
              resultant list.

       ${parameter^pattern}
       ${parameter^^pattern}
       ${parameter,pattern}
       ${parameter,,pattern}
              Case  modification.  This
              expansion  modifies   the
              case  of alphabetic char‐
              acters in parameter.  The
              pattern  is  expanded  to
              produce a pattern just as
              in   pathname  expansion.
              Each  character  in   the
              expanded value of parame‐
              ter  is  tested   against
              pattern,   and,   if   it
              matches the pattern,  its
              case  is  converted.  The
              pattern    should     not
              attempt   to  match  more
              than one character.   The
              ^  operator converts low‐
              ercase  letters  matching
              pattern to uppercase; the
              ,    operator    converts
              matching  uppercase  let‐
              ters to  lowercase.   The
              ^^ and ,, expansions con‐
              vert each matched charac‐
              ter   in   the   expanded
              value; the ^ and , expan‐
              sions  match  and convert
              only the first  character
              in  the  expanded  value.
              If pattern is omitted, it
              is   treated  like  a  ?,
              which matches every char‐
              acter.  If parameter is @
              or *, the case  modifica‐
              tion operation is applied
              to each positional param‐
              eter  in  turn,  and  the
              expansion is  the  resul‐
              tant  list.  If parameter
              is an array variable sub‐
              scripted with @ or *, the
              case modification  opera‐
              tion  is  applied to each
              member of  the  array  in
              turn,  and  the expansion
              is the resultant list.

       ${parameter@operator}
              Parameter transformation.
              The expansion is either a
              transformation   of   the
              value   of  parameter  or
              information about parame‐
              ter  itself, depending on
              the  value  of  operator.
              Each operator is a single
              letter:

              Q      The expansion is a
                     string that is the
                     value of parameter
                     quoted in a format
                     that can be reused
                     as input.
              E      The expansion is a
                     string that is the
                     value of parameter
                     with     backslash
                     escape   sequences
                     expanded  as  with
                     the $'...' quoting
                     mechansim.
              P      The expansion is a
                     string that is the
                     result of  expand‐
                     ing  the  value of
                     parameter as if it
                     were    a   prompt
                     string        (see
                     PROMPTING below).
              A      The expansion is a
                     string in the form
                     of  an  assignment
                     statement       or
                     declare    command
                     that,  if   evalu‐
                     ated,  will recre‐
                     ate parameter with
                     its attributes and
                     value.
              a      The expansion is a
                     string  consisting
                     of   flag   values
                     representing
                     parameter's
                     attributes.

              If  parameter  is @ or *,
              the operation is  applied
              to each positional param‐
              eter  in  turn,  and  the
              expansion  is  the resul‐
              tant list.  If  parameter
              is an array variable sub‐
              scripted with @ or *, the
              case  modification opera‐
              tion is applied  to  each
              member  of  the  array in
              turn, and  the  expansion
              is the resultant list.

              The  result of the expan‐
              sion is subject  to  word
              splitting   and  pathname
              expansion  as   described
              below.

   Command Substitution
       Command  substitution allows the
       output of a command  to  replace
       the command name.  There are two
       forms:

              $(command)
       or
              `command`

       Bash performs the  expansion  by
       executing  command in a subshell
       environment  and  replacing  the
       command  substitution  with  the
       standard output of the  command,
       with   any   trailing   newlines
       deleted.  Embedded newlines  are
       not  deleted,  but  they  may be
       removed during  word  splitting.
       The  command  substitution $(cat
       file) can  be  replaced  by  the
       equivalent but faster $(< file).

       When   the  old-style  backquote
       form of  substitution  is  used,
       backslash  retains  its  literal
       meaning except when followed  by
       $, `, or \.  The first backquote
       not preceded by a backslash ter‐
       minates  the  command  substitu‐
       tion.  When using the $(command)
       form, all characters between the
       parentheses make up the command;
       none are treated specially.

       Command   substitutions  may  be
       nested.  To nest when using  the
       backquoted   form,   escape  the
       inner  backquotes   with   back‐
       slashes.

       If   the   substitution  appears
       within   double   quotes,   word
       splitting and pathname expansion
       are   not   performed   on   the
       results.

   Arithmetic Expansion
       Arithmetic  expansion allows the
       evaluation  of   an   arithmetic
       expression  and the substitution
       of the result.  The  format  for
       arithmetic expansion is:

              $((expression))

       The  old format $[expression] is
       deprecated and will  be  removed
       in upcoming versions of bash.

       The  expression is treated as if
       it were  within  double  quotes,
       but  a  double  quote inside the
       parentheses is not treated  spe‐
       cially.    All   tokens  in  the
       expression undergo parameter and
       variable expansion, command sub‐
       stitution,  and  quote  removal.
       The  result  is  treated  as the
       arithmetic  expression   to   be
       evaluated.    Arithmetic  expan‐
       sions may be nested.

       The  evaluation   is   performed
       according  to  the  rules listed
       below under  ARITHMETIC  EVALUA‐
       TION.  If expression is invalid,
       bash prints a message indicating
       failure   and   no  substitution
       occurs.

   Process Substitution
       Process  substitution  allows  a
       process's  input or output to be
       referred to  using  a  filename.
       It  takes the form of <(list) or
       >(list).  The  process  list  is
       run   asynchronously,   and  its
       input or  output  appears  as  a
       filename.    This   filename  is
       passed as  an  argument  to  the
       current command as the result of
       the expansion.  If  the  >(list)
       form  is  used,  writing  to the
       file  will  provide  input   for
       list.   If  the  <(list) form is
       used,  the  file  passed  as  an
       argument   should   be  read  to
       obtain  the  output   of   list.
       Process   substitution  is  sup‐
       ported on systems  that  support
       named   pipes   (FIFOs)  or  the
       /dev/fd method  of  naming  open
       files.

       When  available, process substi‐
       tution is  performed  simultane‐
       ously  with  parameter and vari‐
       able expansion, command  substi‐
       tution,  and  arithmetic  expan‐
       sion.

   Word Splitting
       The shell scans the  results  of
       parameter   expansion,   command
       substitution,   and   arithmetic
       expansion  that  did  not  occur
       within double  quotes  for  word
       splitting.

       The  shell treats each character
       of  IFS  as  a  delimiter,   and
       splits  the results of the other
       expansions  into   words   using
       these characters as field termi‐
       nators.  If IFS is unset, or its
       value         is         exactly
       <space><tab><newline>,       the
       default,   then   sequences   of
       <space>, <tab>, and <newline> at
       the  beginning  and  end  of the
       results of the  previous  expan‐
       sions   are   ignored,  and  any
       sequence of IFS  characters  not
       at  the  beginning or end serves
       to delimit words.  If IFS has  a
       value  other  than  the default,
       then sequences of the whitespace
       characters  space, tab, and new‐
       line are ignored at  the  begin‐
       ning  and  end  of  the word, as
       long as the whitespace character
       is  in  the value of IFS (an IFS
       whitespace   character).     Any
       character in IFS that is not IFS
       whitespace, along with any adja‐
       cent  IFS whitespace characters,
       delimits a field.  A sequence of
       IFS   whitespace  characters  is
       also treated as a delimiter.  If
       the  value  of  IFS  is null, no
       word splitting occurs.

       Explicit null arguments  (""  or
       '')  are  retained and passed to
       commands   as   empty   strings.
       Unquoted   implicit  null  argu‐
       ments, resulting from the expan‐
       sion  of parameters that have no
       values,  are  removed.    If   a
       parameter   with   no  value  is
       expanded within double quotes, a
       null  argument  results  and  is
       retained and passed to a command
       as  an  empty  string.   When  a
       quoted null argument appears  as
       part  of  a word whose expansion
       is non-null, the  null  argument
       is  removed.   That is, the word
       -d''  becomes  -d   after   word
       splitting   and   null  argument
       removal.

       Note  that   if   no   expansion
       occurs,  no  splitting  is  per‐
       formed.

   Pathname Expansion
       After word splitting, unless the
       -f  option  has  been  set, bash
       scans each word for the  charac‐
       ters  *,  ?,  and  [.  If one of
       these characters  appears,  then
       the  word  is regarded as a pat‐
       tern,  and  replaced   with   an
       alphabetically  sorted  list  of
       filenames matching  the  pattern
       (see  Pattern  Matching  below).
       If  no  matching  filenames  are
       found,   and  the  shell  option
       nullglob  is  not  enabled,  the
       word  is left unchanged.  If the
       nullglob option is set,  and  no
       matches  are  found, the word is
       removed.  If the failglob  shell
       option  is  set,  and no matches
       are found, an error  message  is
       printed  and  the command is not
       executed.  If the  shell  option
       nocaseglob is enabled, the match
       is performed without  regard  to
       the  case  of alphabetic charac‐
       ters.   Note  that  when   using
       range   expressions  like  [a-z]
       (see  below),  letters  of   the
       other   case  may  be  included,
       depending  on  the  setting   of
       LC_COLLATE.   When  a pattern is
       used for pathname expansion, the
       character ``.''  at the start of
       a name or immediately  following
       a  slash must be matched explic‐
       itly, unless  the  shell  option
       dotglob is set.  When matching a
       pathname,  the  slash  character
       must  always  be matched explic‐
       itly.  In other cases, the ``.''
       character  is  not  treated spe‐
       cially.  See the description  of
       shopt  below under SHELL BUILTIN
       COMMANDS for  a  description  of
       the  nocaseglob, nullglob, fail‐
       glob, and dotglob shell options.

       The  GLOBIGNORE  shell  variable
       may  be used to restrict the set
       of filenames matching a pattern.
       If   GLOBIGNORE   is  set,  each
       matching  filename   that   also
       matches  one  of the patterns in
       GLOBIGNORE is removed  from  the
       list of matches.  If the nocase‐
       glob option is set, the matching
       against  the patterns in GLOBIG‐
       NORE is performed without regard
       to  case.   The  filenames ``.''
       and ``..''  are  always  ignored
       when  GLOBIGNORE  is set and not
       null.  However, setting  GLOBIG‐
       NORE to a non-null value has the
       effect of enabling  the  dotglob
       shell option, so all other file‐
       names  beginning  with  a  ``.''
       will  match.   To  get  the  old
       behavior of  ignoring  filenames
       beginning  with  a  ``.'',  make
       ``.*''  one of the  patterns  in
       GLOBIGNORE.   The dotglob option
       is disabled when  GLOBIGNORE  is
       unset.    The  pattern  matching
       honors the setting of  the  ext‐
       glob shell option.

       Pattern Matching

       Any  character that appears in a
       pattern, other than the  special
       pattern   characters   described
       below, matches itself.  The  NUL
       character  may  not  occur  in a
       pattern.   A  backslash  escapes
       the   following  character;  the
       escaping backslash is  discarded
       when matching.  The special pat‐
       tern characters must  be  quoted
       if they are to be matched liter‐
       ally.

       The special  pattern  characters
       have the following meanings:

              *      Matches        any
                     string,  including
                     the  null  string.
                     When the  globstar
                     shell   option  is
                     enabled, and *  is
                     used in a pathname
                     expansion context,
                     two   adjacent  *s
                     used as  a  single
                     pattern will match
                     all files and zero
                     or  more  directo‐
                     ries and subdirec‐
                     tories.   If  fol‐
                     lowed by a /,  two
                     adjacent  *s  will
                     match only  direc‐
                     tories  and subdi‐
                     rectories.
              ?      Matches any single
                     character.
              [...]  Matches any one of
                     the enclosed char‐
                     acters.  A pair of
                     characters   sepa‐
                     rated  by a hyphen
                     denotes  a   range
                     expression;    any
                     character     that
                     falls      between
                     those two  charac‐
                     ters,   inclusive,
                     using the  current
                     locale's collating
                     sequence and char‐
                     acter    set,   is
                     matched.   If  the
                     first    character
                     following the [ is
                     a  !   or a ^ then
                     any character  not
                     enclosed        is
                     matched.       The
                     sorting  order  of
                     characters      in
                     range  expressions
                     is  determined  by
                     the current locale
                     and the values  of
                     the  LC_COLLATE or
                     LC_ALL shell vari‐
                     ables, if set.  To
                     obtain the  tradi‐
                     tional interpreta‐
                     tion   of    range
                     expressions, where
                     [a-d]  is  equiva‐
                     lent   to  [abcd],
                     set value  of  the
                     LC_ALL shell vari‐
                     able  to   C,   or
                     enable         the
                     globasciiranges
                     shell option.  A -
                     may be matched  by
                     including   it  as
                     the first or  last
                     character  in  the
                     set.  A ]  may  be
                     matched by includ‐
                     ing  it   as   the
                     first character in
                     the set.

                     Within  [  and  ],
                     character  classes
                     can  be  specified
                     using  the  syntax
                     [:class:],   where
                     class  is  one  of
                     the      following
                     classes defined in
                     the  POSIX   stan‐
                     dard:
                     alnum  alpha ascii
                     blank cntrl  digit
                     graph  lower print
                     punct space  upper
                     word xdigit
                     A  character class
                     matches any  char‐
                     acter belonging to
                     that  class.   The
                     word     character
                     class matches let‐
                     ters,  digits, and
                     the character _.

                     Within [ and ], an
                     equivalence  class
                     can  be  specified
                     using  the  syntax
                     [=c=],       which
                     matches  all char‐
                     acters  with   the
                     same     collation
                     weight (as defined
                     by   the   current
                     locale)   as   the
                     character c.

                     Within  [  and  ],
                     the syntax  [.sym‐
                     bol.]  matches the
                     collating   symbol
                     symbol.

       If  the  extglob shell option is
       enabled using the shopt builtin,
       several  extended pattern match‐
       ing  operators  are  recognized.
       In  the following description, a
       pattern-list is a list of one or
       more  patterns separated by a |.
       Composite patterns may be formed
       using one or more of the follow‐
       ing sub-patterns:

              ?(pattern-list)
                     Matches  zero   or
                     one  occurrence of
                     the given patterns
              *(pattern-list)
                     Matches  zero   or
                     more   occurrences
                     of the given  pat‐
                     terns
              +(pattern-list)
                     Matches   one   or
                     more   occurrences
                     of  the given pat‐
                     terns
              @(pattern-list)
                     Matches one of the
                     given patterns
              !(pattern-list)
                     Matches   anything
                     except one of  the
                     given patterns

   Quote Removal
       After  the preceding expansions,
       all unquoted occurrences of  the
       characters  \, ', and " that did
       not result from one of the above
       expansions are removed.

REDIRECTION
       Before  a  command  is executed,
       its  input  and  output  may  be
       redirected using a special nota‐
       tion interpreted by  the  shell.
       Redirection   allows   commands'
       file handles to  be  duplicated,
       opened, closed, made to refer to
       different files, and can  change
       the files the command reads from
       and writes to.  Redirection  may
       also be used to modify file han‐
       dles in the current shell execu‐
       tion environment.  The following
       redirection operators  may  pre‐
       cede or appear anywhere within a
       simple command or may  follow  a
       command.   Redirections are pro‐
       cessed in the order they appear,
       from left to right.

       Each  redirection  that  may  be
       preceded by  a  file  descriptor
       number  may  instead be preceded
       by a word of the form {varname}.
       In this case, for each redirect‐
       ion operator except >&- and <&-,
       the  shell  will allocate a file
       descriptor greater than or equal
       to  10 and assign it to varname.
       If >&- or  <&-  is  preceded  by
       {varname},  the value of varname
       defines the file  descriptor  to
       close.

       In  the  following descriptions,
       if the file descriptor number is
       omitted, and the first character
       of the redirection  operator  is
       <, the redirection refers to the
       standard input (file  descriptor
       0).   If  the first character of
       the redirection operator  is  >,
       the  redirection  refers  to the
       standard output (file descriptor
       1).

       The word following the redirect‐
       ion operator  in  the  following
       descriptions,  unless  otherwise
       noted,  is  subjected  to  brace
       expansion,    tilde   expansion,
       parameter  and  variable  expan‐
       sion,    command   substitution,
       arithmetic   expansion,    quote
       removal, pathname expansion, and
       word splitting.  If  it  expands
       to  more  than  one  word,  bash
       reports an error.

       Note that the order of  redirec‐
       tions is significant.  For exam‐
       ple, the command

              ls > dirlist 2>&1

       directs both standard output and
       standard   error   to  the  file
       dirlist, while the command

              ls 2>&1 > dirlist

       directs only the standard output
       to  file  dirlist,  because  the
       standard  error  was  duplicated
       from  the standard output before
       the standard  output  was  redi‐
       rected to dirlist.

       Bash  handles  several filenames
       specially when they are used  in
       redirections,  as  described  in
       the  following  table.   If  the
       operating  system  on which bash
       is running provides  these  spe‐
       cial  files, bash will use them;
       otherwise it will  emulate  them
       internally   with  the  behavior
       described below.

              /dev/fd/fd
                     If fd is  a  valid
                     integer,      file
                     descriptor  fd  is
                     duplicated.
              /dev/stdin
                     File  descriptor 0
                     is duplicated.
              /dev/stdout
                     File descriptor  1
                     is duplicated.
              /dev/stderr
                     File  descriptor 2
                     is duplicated.
              /dev/tcp/host/port
                     If host is a valid
                     hostname or Inter‐
                     net  address,  and
                     port is an integer
                     port   number   or
                     service name, bash
                     attempts  to  open
                     the  corresponding
                     TCP socket.
              /dev/udp/host/port
                     If host is a valid
                     hostname or Inter‐
                     net  address,  and
                     port is an integer
                     port   number   or
                     service name, bash
                     attempts  to  open
                     the  corresponding
                     UDP socket.

       A failure to open  or  create  a
       file  causes  the redirection to
       fail.

       Redirections using file descrip‐
       tors  greater  than  9 should be
       used with care, as they may con‐
       flict  with file descriptors the
       shell uses internally.

       Note that the exec builtin  com‐
       mand  can make redirections take
       effect in the current shell.

   Redirecting Input
       Redirection of input causes  the
       file whose name results from the
       expansion of word to  be  opened
       for  reading  on file descriptor
       n, or the standard  input  (file
       descriptor 0) if n is not speci‐
       fied.

       The general format for redirect‐
       ing input is:

              [n]<word

   Redirecting Output
       Redirection of output causes the
       file whose name results from the
       expansion  of  word to be opened
       for writing on  file  descriptor
       n,  or the standard output (file
       descriptor 1) if n is not speci‐
       fied.   If  the  file  does  not
       exist it is created; if it  does
       exist  it  is  truncated to zero
       size.

       The general format for redirect‐
       ing output is:

              [n]>word

       If  the  redirection operator is
       >, and the noclobber  option  to
       the   set   builtin   has   been
       enabled,  the  redirection  will
       fail  if  the  file  whose  name
       results from  the  expansion  of
       word  exists  and  is  a regular
       file.  If the redirection opera‐
       tor  is  >|,  or the redirection
       operator is > and the  noclobber
       option  to  the set builtin com‐
       mand is not enabled,  the  redi‐
       rection is attempted even if the
       file named by word exists.

   Appending Redirected Output
       Redirection of  output  in  this
       fashion  causes  the  file whose
       name results from the  expansion
       of word to be opened for append‐
       ing on file descriptor n, or the
       standard output (file descriptor
       1) if n is  not  specified.   If
       the  file  does  not exist it is
       created.

       The general format for appending
       output is:

              [n]>>word

   Redirecting   Standard   Output  and
       Standard Error
       This construct allows  both  the
       standard output (file descriptor
       1) and the standard error output
       (file  descriptor 2) to be redi‐
       rected to the file whose name is
       the expansion of word.

       There  are two formats for redi‐
       recting  standard   output   and
       standard error:

              &>word
       and
              >&word

       Of  the  two forms, the first is
       preferred.  This is semantically
       equivalent to

              >word 2>&1

       When using the second form, word
       may not expand to a number or -.
       If  it  does,  other redirection
       operators apply (see Duplicating
       File Descriptors below) for com‐
       patibility reasons.

   Appending Standard Output and  Stan‐
       dard Error
       This  construct  allows both the
       standard output (file descriptor
       1) and the standard error output
       (file  descriptor   2)   to   be
       appended  to the file whose name
       is the expansion of word.

       The format for  appending  stan‐
       dard  output  and standard error
       is:

              &>>word

       This is semantically  equivalent
       to

              >>word 2>&1

       (see  Duplicating  File Descrip‐
       tors below).

   Here Documents
       This   type    of    redirection
       instructs   the  shell  to  read
       input from  the  current  source
       until  a  line  containing  only
       delimiter  (with   no   trailing
       blanks)  is  seen.   All  of the
       lines read up to that point  are
       then  used as the standard input
       (or file descriptor n  if  n  is
       specified) for a command.

       The format of here-documents is:

              [n]<<[-]word
                      here-document
              delimiter

       No parameter and variable expan‐
       sion,   command    substitution,
       arithmetic  expansion,  or path‐
       name expansion is  performed  on
       word.   If  any  part of word is
       quoted,  the  delimiter  is  the
       result of quote removal on word,
       and the lines in the  here-docu‐
       ment  are not expanded.  If word
       is unquoted, all  lines  of  the
       here-document  are  subjected to
       parameter   expansion,   command
       substitution,   and   arithmetic
       expansion,     the     character
       sequence  \<newline> is ignored,
       and \ must be used to quote  the
       characters \, $, and `.

       If  the  redirection operator is
       <<-, then all leading tab  char‐
       acters  are  stripped from input
       lines and  the  line  containing
       delimiter.   This  allows  here-
       documents within  shell  scripts
       to  be  indented  in  a  natural
       fashion.

   Here Strings
       A variant of here documents, the
       format is:

              [n]<<<word

       The  word undergoes brace expan‐
       sion, tilde expansion, parameter
       and  variable expansion, command
       substitution, arithmetic  expan‐
       sion,  and quote removal.  Path‐
       name expansion and  word  split‐
       ting  are  not  performed.   The
       result is supplied as  a  single
       string, with a newline appended,
       to the command on  its  standard
       input (or file descriptor n if n
       is specified).

   Duplicating File Descriptors
       The redirection operator

              [n]<&word

       is used to duplicate input  file
       descriptors.  If word expands to
       one or  more  digits,  the  file
       descriptor  denoted by n is made
       to  be  a  copy  of  that   file
       descriptor.   If  the  digits in
       word  do  not  specify  a   file
       descriptor open for input, a re‐
       direction error occurs.  If word
       evaluates  to -, file descriptor
       n is closed.  If n is not speci‐
       fied,  the  standard input (file
       descriptor 0) is used.

       The operator

              [n]>&word

       is used similarly  to  duplicate
       output  file  descriptors.  If n
       is not specified,  the  standard
       output  (file  descriptor  1) is
       used.  If the digits in word  do
       not  specify  a  file descriptor
       open for output,  a  redirection
       error occurs.  If word evaluates
       to  -,  file  descriptor  n   is
       closed.  As a special case, if n
       is omitted, and  word  does  not
       expand  to one or more digits or
       -, the standard output and stan‐
       dard  error  are  redirected  as
       described previously.

   Moving File Descriptors
       The redirection operator

              [n]<&digit-

       moves the file descriptor  digit
       to  file  descriptor  n,  or the
       standard input (file  descriptor
       0) if n is not specified.  digit
       is closed after being duplicated
       to n.

       Similarly, the redirection oper‐
       ator

              [n]>&digit-

       moves the file descriptor  digit
       to  file  descriptor  n,  or the
       standard output (file descriptor
       1) if n is not specified.

   Opening File Descriptors for Reading
       and Writing
       The redirection operator

              [n]<>word

       causes the file  whose  name  is
       the  expansion  of  word  to  be
       opened  for  both  reading   and
       writing on file descriptor n, or
       on file descriptor 0 if n is not
       specified.  If the file does not
       exist, it is created.

ALIASES
       Aliases allow  a  string  to  be
       substituted  for  a word when it
       is used as the first word  of  a
       simple command.  The shell main‐
       tains a list of aliases that may
       be  set and unset with the alias
       and  unalias  builtin   commands
       (see   SHELL   BUILTIN  COMMANDS
       below).  The first word of  each
       simple  command, if unquoted, is
       checked to  see  if  it  has  an
       alias.   If  so,  that  word  is
       replaced  by  the  text  of  the
       alias.   The characters /, $, `,
       and  =  and  any  of  the  shell
       metacharacters  or quoting char‐
       acters  listed  above  may   not
       appear  in  an  alias name.  The
       replacement text may contain any
       valid   shell  input,  including
       shell metacharacters.  The first
       word  of the replacement text is
       tested for aliases, but  a  word
       that  is  identical  to an alias
       being expanded is not expanded a
       second  time.   This  means that
       one may alias ls to ls  -F,  for
       instance,  and bash does not try
       to   recursively   expand    the
       replacement  text.   If the last
       character of the alias value  is
       a  blank,  then the next command
       word following the alias is also
       checked for alias expansion.

       Aliases  are  created and listed
       with  the  alias  command,   and
       removed  with  the  unalias com‐
       mand.

       There is no mechanism for  using
       arguments   in  the  replacement
       text.  If arguments are  needed,
       a  shell function should be used
       (see FUNCTIONS below).

       Aliases are  not  expanded  when
       the  shell  is  not interactive,
       unless the expand_aliases  shell
       option  is  set using shopt (see
       the description of  shopt  under
       SHELL BUILTIN COMMANDS below).

       The rules concerning the defini‐
       tion  and  use  of  aliases  are
       somewhat confusing.  Bash always
       reads at least one complete line
       of input before executing any of
       the  commands  on   that   line.
       Aliases are expanded when a com‐
       mand is read,  not  when  it  is
       executed.   Therefore,  an alias
       definition appearing on the same
       line as another command does not
       take effect until the next  line
       of  input is read.  The commands
       following the  alias  definition
       on that line are not affected by
       the new alias.  This behavior is
       also an issue when functions are
       executed.  Aliases are  expanded
       when  a  function  definition is
       read, not when the  function  is
       executed,   because  a  function
       definition is itself a  command.
       As    a   consequence,   aliases
       defined in a  function  are  not
       available until after that func‐
       tion is executed.  To  be  safe,
       always  put alias definitions on
       a separate line, and do not  use
       alias in compound commands.

       For    almost   every   purpose,
       aliases are superseded by  shell
       functions.

FUNCTIONS
       A  shell  function,  defined  as
       described  above   under   SHELL
       GRAMMAR, stores a series of com‐
       mands for later execution.  When
       the  name of a shell function is
       used as a simple  command  name,
       the  list of commands associated
       with that function name is  exe‐
       cuted.   Functions  are executed
       in the context  of  the  current
       shell; no new process is created
       to interpret them (contrast this
       with  the  execution  of a shell
       script).   When  a  function  is
       executed,  the  arguments to the
       function become  the  positional
       parameters during its execution.
       The  special  parameter   #   is
       updated  to  reflect the change.
       Special    parameter    0     is
       unchanged.  The first element of
       the FUNCNAME variable is set  to
       the  name  of the function while
       the function is executing.

       All other aspects of  the  shell
       execution  environment are iden‐
       tical between a function and its
       caller  with  these  exceptions:
       the DEBUG and RETURN traps  (see
       the   description  of  the  trap
       builtin under SHELL BUILTIN COM‐
       MANDS  below)  are not inherited
       unless  the  function  has  been
       given  the  trace attribute (see
       the description of  the  declare
       builtin  below)  or the -o func‐
       trace  shell  option  has   been
       enabled with the set builtin (in
       which case all functions inherit
       the DEBUG and RETURN traps), and
       the ERR trap  is  not  inherited
       unless  the  -o  errtrace  shell
       option has been enabled.

       Variables local to the  function
       may  be  declared with the local
       builtin  command.    Ordinarily,
       variables  and  their values are
       shared between the function  and
       its caller.

       The FUNCNEST variable, if set to
       a numeric value greater than  0,
       defines a maximum function nest‐
       ing level.  Function invocations
       that  exceed the limit cause the
       entire command to abort.

       If the builtin command return is
       executed   in  a  function,  the
       function completes and execution
       resumes  with  the  next command
       after the  function  call.   Any
       command   associated   with  the
       RETURN trap is  executed  before
       execution resumes.  When a func‐
       tion completes,  the  values  of
       the  positional  parameters  and
       the  special  parameter  #   are
       restored  to the values they had
       prior to the  function's  execu‐
       tion.

       Function  names  and definitions
       may be listed with the -f option
       to   the   declare   or  typeset
       builtin commands.  The -F option
       to  declare or typeset will list
       the  function  names  only  (and
       optionally  the  source file and
       line  number,  if  the  extdebug
       shell option is enabled).  Func‐
       tions may be  exported  so  that
       subshells   automatically   have
       them defined with the -f  option
       to  the export builtin.  A func‐
       tion definition may  be  deleted
       using the -f option to the unset
       builtin.  Note that shell  func‐
       tions  and  variables  with  the
       same name may result in multiple
       identically-named entries in the
       environment   passed   to    the
       shell's  children.   Care should
       be taken in cases where this may
       cause a problem.

       Functions may be recursive.  The
       FUNCNEST variable may be used to
       limit  the depth of the function
       call stack and restrict the num‐
       ber of function invocations.  By
       default, no limit is imposed  on
       the number of recursive calls.

ARITHMETIC EVALUATION
       The   shell   allows  arithmetic
       expressions  to  be   evaluated,
       under certain circumstances (see
       the let and declare builtin com‐
       mands,  the (( compound command,
       and    Arithmetic    Expansion).
       Evaluation  is  done  in  fixed-
       width integers with no check for
       overflow,  though  division by 0
       is trapped  and  flagged  as  an
       error.   The operators and their
       precedence,  associativity,  and
       values  are the same as in the C
       language.  The following list of
       operators is grouped into levels
       of  equal-precedence  operators.
       The  levels  are listed in order
       of decreasing precedence.

       id++ id--
              variable   post-increment
              and post-decrement
       ++id --id
              variable    pre-increment
              and pre-decrement
       - +    unary minus and plus
       ! ~    logical and bitwise nega‐
              tion
       **     exponentiation
       * / %  multiplication, division,
              remainder
       + -    addition, subtraction
       << >>  left  and  right  bitwise
              shifts
       <= >= < >
              comparison
       == !=  equality and inequality
       &      bitwise AND
       ^      bitwise exclusive OR
       |      bitwise OR
       &&     logical AND
       ||     logical OR
       expr?expr:expr
              conditional operator
       =  *=  /= %= += -= <<= >>= &= ^=
       |=
              assignment
       expr1 , expr2
              comma

       Shell variables are  allowed  as
       operands; parameter expansion is
       performed before the  expression
       is evaluated.  Within an expres‐
       sion, shell variables  may  also
       be  referenced  by  name without
       using  the  parameter  expansion
       syntax.   A  shell variable that
       is null or unset evaluates to  0
       when  referenced by name without
       using  the  parameter  expansion
       syntax.  The value of a variable
       is evaluated  as  an  arithmetic
       expression  when  it  is  refer‐
       enced, or when a variable  which
       has   been   given  the  integer
       attribute using  declare  -i  is
       assigned  a value.  A null value
       evaluates to 0.  A  shell  vari‐
       able  need  not have its integer
       attribute turned on to  be  used
       in an expression.

       Constants  with  a leading 0 are
       interpreted as octal numbers.  A
       leading  0x  or 0X denotes hexa‐
       decimal.    Otherwise,   numbers
       take  the  form  [base#]n, where
       the optional base is  a  decimal
       number  between  2 and 64 repre‐
       senting the arithmetic base, and
       n  is a number in that base.  If
       base# is omitted, then  base  10
       is used.  When specifying n, the
       digits greater than 9 are repre‐
       sented by the lowercase letters,
       the uppercase letters, @, and _,
       in  that order.  If base is less
       than or equal to  36,  lowercase
       and  uppercase  letters  may  be
       used interchangeably  to  repre‐
       sent numbers between 10 and 35.

       Operators are evaluated in order
       of precedence.   Sub-expressions
       in   parentheses  are  evaluated
       first  and  may   override   the
       precedence rules above.

CONDITIONAL EXPRESSIONS
       Conditional expressions are used
       by the [[ compound  command  and
       the  test and [ builtin commands
       to test file attributes and per‐
       form  string and arithmetic com‐
       parisons.     Expressions    are
       formed  from the following unary
       or binary primaries.  Bash  han‐
       dles several filenames specially
       when they are  used  in  expres‐
       sions.   If the operating system
       on which bash  is  running  pro‐
       vides  these special files, bash
       will use them; otherwise it will
       emulate   them  internally  with
       this behavior: If any file argu‐
       ment  to one of the primaries is
       of the form /dev/fd/n, then file
       descriptor n is checked.  If the
       file argument to one of the pri‐
       maries  is  one  of  /dev/stdin,
       /dev/stdout,   or   /dev/stderr,
       file  descriptor  0,  1,  or  2,
       respectively, is checked.

       Unless otherwise specified, pri‐
       maries  that  operate  on  files
       follow symbolic links and  oper‐
       ate  on  the target of the link,
       rather than the link itself.

       When used with [[, the <  and  >
       operators sort lexicographically
       using the current  locale.   The
       test  command  sorts using ASCII
       ordering.

       -a file
              True if file exists.
       -b file
              True if file  exists  and
              is a block special file.
       -c file
              True  if  file exists and
              is  a  character  special
              file.
       -d file
              True  if  file exists and
              is a directory.
       -e file
              True if file exists.
       -f file
              True if file  exists  and
              is a regular file.
       -g file
              True  if  file exists and
              is set-group-id.
       -h file
              True if file  exists  and
              is a symbolic link.
       -k file
              True  if  file exists and
              its  ``sticky''  bit   is
              set.
       -p file
              True  if  file exists and
              is a named pipe (FIFO).
       -r file
              True if file  exists  and
              is readable.
       -s file
              True  if  file exists and
              has a size  greater  than
              zero.
       -t fd  True  if  file descriptor
              fd is open and refers  to
              a terminal.
       -u file
              True  if  file exists and
              its  set-user-id  bit  is
              set.
       -w file
              True  if  file exists and
              is writable.
       -x file
              True if file  exists  and
              is executable.
       -G file
              True  if  file exists and
              is owned by the effective
              group id.
       -L file
              True  if  file exists and
              is a symbolic link.
       -N file
              True if file  exists  and
              has  been  modified since
              it was last read.
       -O file
              True if file  exists  and
              is owned by the effective
              user id.
       -S file
              True if file  exists  and
              is a socket.
       file1 -ef file2
              True  if  file1 and file2
              refer to the same  device
              and inode numbers.
       file1 -nt file2
              True  if  file1  is newer
              (according  to  modifica‐
              tion date) than file2, or
              if file1 exists and file2
              does not.
       file1 -ot file2
              True  if  file1  is older
              than file2, or  if  file2
              exists   and  file1  does
              not.
       -o optname
              True if the shell  option
              optname  is enabled.  See
              the list of options under
              the description of the -o
              option to the set builtin
              below.
       -v varname
              True  if  the shell vari‐
              able varname is set  (has
              been assigned a value).
       -R varname
              True  if  the shell vari‐
              able varname is  set  and
              is a name reference.
       -z string
              True  if  the  length  of
              string is zero.
       string
       -n string
              True  if  the  length  of
              string is non-zero.

       string1 == string2
       string1 = string2
              True  if  the strings are
              equal.  = should be  used
              with the test command for
              POSIX conformance.   When
              used with the [[ command,
              this   performs   pattern
              matching   as   described
              above   (Compound    Com‐
              mands).

       string1 != string2
              True  if  the strings are
              not equal.

       string1 < string2
              True  if  string1   sorts
              before   string2  lexico‐
              graphically.

       string1 > string2
              True  if  string1   sorts
              after   string2   lexico‐
              graphically.

       arg1 OP arg2
              OP is one  of  -eq,  -ne,
              -lt,  -le,  -gt,  or -ge.
              These  arithmetic  binary
              operators  return true if
              arg1  is  equal  to,  not
              equal to, less than, less
              than or equal to, greater
              than,  or greater than or
              equal  to  arg2,  respec‐
              tively.   Arg1  and  arg2
              may be positive or  nega‐
              tive integers.

SIMPLE COMMAND EXPANSION
       When  a  simple  command is exe‐
       cuted, the  shell  performs  the
       following   expansions,  assign‐
       ments,  and  redirections,  from
       left to right.

       1.     The words that the parser
              has  marked  as  variable
              assignments  (those  pre‐
              ceding the command  name)
              and    redirections   are
              saved for later  process‐
              ing.

       2.     The  words  that  are not
              variable  assignments  or
              redirections          are
              expanded.  If  any  words
              remain  after  expansion,
              the first word  is  taken
              to  be  the  name  of the
              command and the remaining
              words are the arguments.

       3.     Redirections   are   per‐
              formed as described above
              under REDIRECTION.

       4.     The  text  after the = in
              each variable  assignment
              undergoes   tilde  expan‐
              sion,  parameter   expan‐
              sion,  command  substitu‐
              tion,  arithmetic  expan‐
              sion,  and  quote removal
              before being assigned  to
              the variable.

       If  no command name results, the
       variable assignments affect  the
       current shell environment.  Oth‐
       erwise, the variables are  added
       to  the  environment of the exe‐
       cuted command and do not  affect
       the  current  shell environment.
       If  any   of   the   assignments
       attempts  to assign a value to a
       readonly  variable,   an   error
       occurs,  and  the  command exits
       with a non-zero status.

       If  no  command  name   results,
       redirections  are performed, but
       do not affect the current  shell
       environment.     A   redirection
       error causes the command to exit
       with a non-zero status.

       If  there is a command name left
       after expansion, execution  pro‐
       ceeds  as described below.  Oth‐
       erwise, the command  exits.   If
       one  of the expansions contained
       a command substitution, the exit
       status  of  the  command  is the
       exit status of the last  command
       substitution    performed.    If
       there were no command  substitu‐
       tions,  the command exits with a
       status of zero.

COMMAND EXECUTION
       After a command has  been  split
       into  words,  if it results in a
       simple command and  an  optional
       list of arguments, the following
       actions are taken.

       If the command name contains  no
       slashes,  the  shell attempts to
       locate it.  If  there  exists  a
       shell  function  by  that  name,
       that  function  is  invoked   as
       described  above  in  FUNCTIONS.
       If the name  does  not  match  a
       function, the shell searches for
       it  in   the   list   of   shell
       builtins.   If a match is found,
       that builtin is invoked.

       If the name is neither  a  shell
       function nor a builtin, and con‐
       tains no slashes, bash  searches
       each  element  of the PATH for a
       directory  containing  an   exe‐
       cutable file by that name.  Bash
       uses a hash  table  to  remember
       the full pathnames of executable
       files  (see  hash  under   SHELL
       BUILTIN COMMANDS below).  A full
       search  of  the  directories  in
       PATH  is  performed  only if the
       command is not found in the hash
       table.   If the search is unsuc‐
       cessful, the shell searches  for
       a  defined  shell function named
       command_not_found_handle.     If
       that   function  exists,  it  is
       invoked with the  original  com‐
       mand  and the original command's
       arguments as its arguments,  and
       the   function's   exit   status
       becomes the exit status  of  the
       shell.   If that function is not
       defined,  the  shell  prints  an
       error  message  and  returns  an
       exit status of 127.

       If the search is successful,  or
       if the command name contains one
       or more slashes, the shell  exe‐
       cutes  the  named  program  in a
       separate execution  environment.
       Argument  0  is  set to the name
       given, and the  remaining  argu‐
       ments  to the command are set to
       the arguments given, if any.

       If this execution fails  because
       the  file  is  not in executable
       format, and the file  is  not  a
       directory, it is assumed to be a
       shell script, a file  containing
       shell  commands.   A subshell is
       spawned  to  execute  it.   This
       subshell  reinitializes  itself,
       so that the effect is  as  if  a
       new  shell  had  been invoked to
       handle  the  script,  with   the
       exception  that the locations of
       commands remembered by the  par‐
       ent  (see hash below under SHELL
       BUILTIN COMMANDS)  are  retained
       by the child.

       If  the program is a file begin‐
       ning with #!, the  remainder  of
       the   first  line  specifies  an
       interpreter  for  the   program.
       The shell executes the specified
       interpreter on operating systems
       that  do  not  handle  this exe‐
       cutable format themselves.   The
       arguments   to  the  interpreter
       consist  of  a  single  optional
       argument  following  the  inter‐
       preter name on the first line of
       the  program,  followed  by  the
       name of the program, followed by
       the command arguments, if any.

COMMAND EXECUTION ENVIRONMENT
       The shell has an execution envi‐
       ronment, which consists  of  the
       following:

       ·      open  files  inherited by
              the shell at  invocation,
              as  modified  by redirec‐
              tions  supplied  to   the
              exec builtin

       ·      the    current    working
              directory as set  by  cd,
              pushd, or popd, or inher‐
              ited  by  the  shell   at
              invocation

       ·      the  file  creation  mode
              mask as set by  umask  or
              inherited     from    the
              shell's parent

       ·      current traps set by trap

       ·      shell parameters that are
              set  by  variable assign‐
              ment  or  with   set   or
              inherited     from    the
              shell's  parent  in   the
              environment

       ·      shell  functions  defined
              during    execution    or
              inherited     from    the
              shell's  parent  in   the
              environment

       ·      options  enabled at invo‐
              cation (either by default
              or    with   command-line
              arguments) or by set

       ·      options enabled by shopt

       ·      shell   aliases   defined
              with alias

       ·      various    process   IDs,
              including those of  back‐
              ground jobs, the value of
              $$, and the value of PPID

       When a simple command other than
       a  builtin  or shell function is
       to be executed, it is invoked in
       a separate execution environment
       that consists of the  following.
       Unless otherwise noted, the val‐
       ues  are  inherited   from   the
       shell.

       ·      the  shell's  open files,
              plus  any   modifications
              and  additions  specified
              by  redirections  to  the
              command

       ·      the    current    working
              directory

       ·      the  file  creation  mode
              mask

       ·      shell variables and func‐
              tions marked for  export,
              along    with   variables
              exported for the command,
              passed in the environment

       ·      traps caught by the shell
              are reset to  the  values
              inherited     from    the
              shell's parent, and traps
              ignored  by the shell are
              ignored

       A command invoked in this  sepa‐
       rate  environment  cannot affect
       the shell's  execution  environ‐
       ment.

       Command  substitution,  commands
       grouped  with  parentheses,  and
       asynchronous     commands    are
       invoked in a  subshell  environ‐
       ment  that is a duplicate of the
       shell environment,  except  that
       traps  caught  by  the shell are
       reset to  the  values  that  the
       shell  inherited from its parent
       at invocation.  Builtin commands
       that  are  invoked  as part of a
       pipeline are also executed in  a
       subshell  environment.   Changes
       made to the subshell environment
       cannot affect the shell's execu‐
       tion environment.

       Subshells  spawned  to   execute
       command   substitutions  inherit
       the value of the -e option  from
       the  parent  shell.  When not in
       posix mode, bash clears  the  -e
       option in such subshells.

       If  a command is followed by a &
       and job control is  not  active,
       the  default  standard input for
       the command is  the  empty  file
       /dev/null.     Otherwise,    the
       invoked  command  inherits   the
       file  descriptors of the calling
       shell as  modified  by  redirec‐
       tions.

ENVIRONMENT
       When  a program is invoked it is
       given an array of strings called
       the environment.  This is a list
       of name-value pairs, of the form
       name=value.

       The  shell provides several ways
       to manipulate  the  environment.
       On  invocation,  the shell scans
       its own environment and  creates
       a parameter for each name found,
       automatically  marking  it   for
       export to child processes.  Exe‐
       cuted commands inherit the envi‐
       ronment.  The export and declare
       -x commands allow parameters and
       functions  to  be  added  to and
       deleted  from  the  environment.
       If  the  value of a parameter in
       the environment is modified, the
       new  value  becomes  part of the
       environment, replacing the  old.
       The environment inherited by any
       executed command consists of the
       shell's   initial   environment,
       whose values may be modified  in
       the   shell,   less   any  pairs
       removed by  the  unset  command,
       plus   any   additions  via  the
       export and declare -x commands.

       The environment for  any  simple
       command  or function may be aug‐
       mented temporarily by  prefixing
       it  with  parameter assignments,
       as described  above  in  PARAME‐
       TERS.   These  assignment state‐
       ments affect only  the  environ‐
       ment seen by that command.

       If the -k option is set (see the
       set builtin command below), then
       all  parameter  assignments  are
       placed in the environment for  a
       command,  not  just  those  that
       precede the command name.

       When bash  invokes  an  external
       command,  the  variable _ is set
       to the full filename of the com‐
       mand  and passed to that command
       in its environment.

EXIT STATUS
       The exit status of  an  executed
       command is the value returned by
       the  waitpid  system   call   or
       equivalent  function.  Exit sta‐
       tuses fall between  0  and  255,
       though,  as explained below, the
       shell may use values  above  125
       specially.   Exit  statuses from
       shell builtins and compound com‐
       mands  are  also limited to this
       range.   Under  certain  circum‐
       stances, the shell will use spe‐
       cial values to indicate specific
       failure modes.

       For the shell's purposes, a com‐
       mand which  exits  with  a  zero
       exit  status  has succeeded.  An
       exit status  of  zero  indicates
       success.  A non-zero exit status
       indicates failure.  When a  com‐
       mand  terminates on a fatal sig‐
       nal N, bash uses  the  value  of
       128+N as the exit status.

       If  a  command is not found, the
       child process created to execute
       it  returns a status of 127.  If
       a command is found  but  is  not
       executable, the return status is
       126.

       If a command fails because of an
       error  during expansion or redi‐
       rection,  the  exit  status   is
       greater than zero.

       Shell  builtin commands return a
       status of 0 (true)  if  success‐
       ful,  and non-zero (false) if an
       error occurs while they execute.
       All builtins return an exit sta‐
       tus of 2 to  indicate  incorrect
       usage, generally invalid options
       or missing arguments.

       Bash  itself  returns  the  exit
       status  of the last command exe‐
       cuted,  unless  a  syntax  error
       occurs,  in  which case it exits
       with a non-zero value.  See also
       the exit builtin command below.

SIGNALS
       When bash is interactive, in the
       absence of any traps, it ignores
       SIGTERM (so that kill 0 does not
       kill an interactive shell),  and
       SIGINT is caught and handled (so
       that the wait builtin is  inter‐
       ruptible).   In  all cases, bash
       ignores SIGQUIT.  If job control
       is in effect, bash ignores SIGT‐
       TIN, SIGTTOU, and SIGTSTP.

       Non-builtin commands run by bash
       have  signal handlers set to the
       values inherited  by  the  shell
       from  its parent.  When job con‐
       trol is not in effect, asynchro‐
       nous  commands ignore SIGINT and
       SIGQUIT  in  addition  to  these
       inherited   handlers.   Commands
       run as a result of command  sub‐
       stitution  ignore  the keyboard-
       generated  job  control  signals
       SIGTTIN, SIGTTOU, and SIGTSTP.

       The  shell exits by default upon
       receipt  of  a  SIGHUP.   Before
       exiting,  an  interactive  shell
       resends the SIGHUP to all  jobs,
       running   or  stopped.   Stopped
       jobs are sent SIGCONT to  ensure
       that  they  receive  the SIGHUP.
       To prevent the shell from  send‐
       ing  the  signal to a particular
       job, it should be  removed  from
       the  jobs  table with the disown
       builtin (see SHELL BUILTIN  COM‐
       MANDS  below)  or  marked to not
       receive SIGHUP using disown -h.

       If the  huponexit  shell  option
       has  been  set  with shopt, bash
       sends a SIGHUP to all jobs  when
       an   interactive   login   shell
       exits.

       If bash is waiting for a command
       to  complete and receives a sig‐
       nal for which a  trap  has  been
       set,  the  trap will not be exe‐
       cuted  until  the  command  com‐
       pletes.   When  bash  is waiting
       for an asynchronous command  via
       the  wait builtin, the reception
       of a signal for which a trap has
       been  set  will  cause  the wait
       builtin  to  return  immediately
       with an exit status greater than
       128, immediately after which the
       trap is executed.

JOB CONTROL
       Job  control refers to the abil‐
       ity to  selectively  stop  (sus‐
       pend) the execution of processes
       and continue (resume) their exe‐
       cution at a later point.  A user
       typically employs this  facility
       via   an  interactive  interface
       supplied jointly by the  operat‐
       ing   system  kernel's  terminal
       driver and bash.

       The shell associates a job  with
       each pipeline.  It keeps a table
       of  currently  executing   jobs,
       which  may  be  listed  with the
       jobs command.  When bash  starts
       a  job  asynchronously  (in  the
       background), it  prints  a  line
       that looks like:

              [1] 25647

       indicating  that this job is job
       number 1 and that the process ID
       of the last process in the pipe‐
       line associated with this job is
       25647.   All of the processes in
       a single pipeline are members of
       the same job.  Bash uses the job
       abstraction as the basis for job
       control.

       To facilitate the implementation
       of the  user  interface  to  job
       control,  the  operating  system
       maintains the notion of  a  cur‐
       rent  terminal process group ID.
       Members of  this  process  group
       (processes  whose  process group
       ID is equal to the current  ter‐
       minal  process group ID) receive
       keyboard-generated signals  such
       as  SIGINT.  These processes are
       said to be  in  the  foreground.
       Background  processes  are those
       whose process group  ID  differs
       from  the  terminal's; such pro‐
       cesses are immune  to  keyboard-
       generated  signals.   Only fore‐
       ground processes are allowed  to
       read  from  or,  if  the user so
       specifies  with   stty   tostop,
       write  to  the  terminal.  Back‐
       ground processes  which  attempt
       to read from (write to when stty
       tostop is in effect) the  termi‐
       nal are sent a SIGTTIN (SIGTTOU)
       signal by the kernel's  terminal
       driver,  which,  unless  caught,
       suspends the process.

       If the operating system on which
       bash  is  running  supports  job
       control, bash  contains  facili‐
       ties to use it.  Typing the sus‐
       pend  character  (typically  ^Z,
       Control-Z)  while  a  process is
       running causes that  process  to
       be  stopped  and returns control
       to  bash.   Typing  the  delayed
       suspend character (typically ^Y,
       Control-Y) causes the process to
       be  stopped  when it attempts to
       read input  from  the  terminal,
       and  control  to  be returned to
       bash.  The user may then manipu‐
       late  the  state  of  this  job,
       using the bg command to continue
       it  in  the  background,  the fg
       command to continue  it  in  the
       foreground,  or the kill command
       to kill it.  A ^Z  takes  effect
       immediately,  and  has the addi‐
       tional side  effect  of  causing
       pending  output and typeahead to
       be discarded.

       There are a number  of  ways  to
       refer  to  a  job  in the shell.
       The character % introduces a job
       specification   (jobspec).   Job
       number n may be referred  to  as
       %n.   A job may also be referred
       to using a prefix  of  the  name
       used  to  start  it,  or using a
       substring that  appears  in  its
       command  line.  For example, %ce
       refers to a stopped ce job.   If
       a  prefix  matches more than one
       job,  bash  reports  an   error.
       Using  %?ce,  on the other hand,
       refers to any job containing the
       string  ce  in its command line.
       If the  substring  matches  more
       than  one  job,  bash reports an
       error.  The symbols  %%  and  %+
       refer  to  the shell's notion of
       the current job,  which  is  the
       last job stopped while it was in
       the foreground or started in the
       background.   The  previous  job
       may be referenced using %-.   If
       there  is  only a single job, %+
       and %- can both be used to refer
       to that job.  In output pertain‐
       ing to jobs (e.g., the output of
       the  jobs  command), the current
       job is always flagged with a  +,
       and  the  previous job with a -.
       A single % (with no accompanying
       job  specification)  also refers
       to the current job.

       Simply naming a job can be  used
       to bring it into the foreground:
       %1 is a synonym for  ``fg  %1'',
       bringing  job  1  from the back‐
       ground  into   the   foreground.
       Similarly,  ``%1 &'' resumes job
       1 in the background,  equivalent
       to ``bg %1''.

       The   shell  learns  immediately
       whenever a  job  changes  state.
       Normally, bash waits until it is
       about to print a  prompt  before
       reporting  changes  in  a  job's
       status so as  to  not  interrupt
       any  other  output.   If  the -b
       option to the set  builtin  com‐
       mand  is  enabled,  bash reports
       such changes  immediately.   Any
       trap  on SIGCHLD is executed for
       each child that exits.

       If an attempt to  exit  bash  is
       made while jobs are stopped (or,
       if the  checkjobs  shell  option
       has been enabled using the shopt
       builtin,  running),  the   shell
       prints  a  warning message, and,
       if  the  checkjobs   option   is
       enabled,   lists  the  jobs  and
       their statuses.  The  jobs  com‐
       mand may then be used to inspect
       their  status.   If   a   second
       attempt  to exit is made without
       an  intervening   command,   the
       shell  does  not  print  another
       warning, and  any  stopped  jobs
       are terminated.

PROMPTING
       When   executing  interactively,
       bash displays the primary prompt
       PS1  when  it is ready to read a
       command,   and   the   secondary
       prompt  PS2  when  it needs more
       input  to  complete  a  command.
       Bash displays PS0 after it reads
       a command but  before  executing
       it.   Bash  allows  these prompt
       strings  to  be  customized   by
       inserting a number of backslash-
       escaped special characters  that
       are decoded as follows:
              \a     an    ASCII   bell
                     character (07)
              \d     the date in "Week‐
                     day   Month  Date"
                     format (e.g., "Tue
                     May 26")
              \D{format}
                     the    format   is
                     passed  to   strf‐
                     time(3)   and  the
                     result is inserted
                     into   the  prompt
                     string;  an  empty
                     format  results in
                     a  locale-specific
                     time   representa‐
                     tion.  The  braces
                     are required
              \e     an   ASCII  escape
                     character (033)
              \h     the hostname up to
                     the first `.'
              \H     the hostname
              \j     the number of jobs
                     currently  managed
                     by the shell
              \l     the   basename  of
                     the shell's termi‐
                     nal device name
              \n     newline
              \r     carriage return
              \s     the  name  of  the
                     shell,  the  base‐
                     name  of  $0  (the
                     portion  following
                     the final slash)
              \t     the  current  time
                     in         24-hour
                     HH:MM:SS format
              \T     the  current  time
                     in         12-hour
                     HH:MM:SS format
              \@     the  current  time
                     in  12-hour  am/pm
                     format
              \A     the  current  time
                     in  24-hour  HH:MM
                     format
              \u     the   username  of
                     the current user
              \v     the   version   of
                     bash (e.g., 2.00)
              \V     the   release   of
                     bash,  version   +
                     patch level (e.g.,
                     2.00.0)
              \w     the current  work‐
                     ing     directory,
                     with $HOME  abbre‐
                     viated    with   a
                     tilde  (uses   the
                     value    of    the
                     PROMPT_DIRTRIM
                     variable)
              \W     the   basename  of
                     the current  work‐
                     ing     directory,
                     with $HOME  abbre‐
                     viated    with   a
                     tilde
              \!     the history number
                     of this command
              \#     the command number
                     of this command
              \$     if  the  effective
                     UID  is  0,  a  #,
                     otherwise a $
              \nnn   the character cor‐
                     responding  to the
                     octal number nnn
              \\     a backslash
              \[     begin  a  sequence
                     of    non-printing
                     characters,  which
                     could  be  used to
                     embed  a  terminal
                     control   sequence
                     into the prompt
              \]     end a sequence  of
                     non-printing char‐
                     acters

       The command number and the  his‐
       tory  number are usually differ‐
       ent: the  history  number  of  a
       command  is  its position in the
       history list, which may  include
       commands  restored from the his‐
       tory file (see  HISTORY  below),
       while  the command number is the
       position in the sequence of com‐
       mands  executed  during the cur‐
       rent shell session.   After  the
       string   is   decoded,   it   is
       expanded  via  parameter  expan‐
       sion,    command   substitution,
       arithmetic expansion, and  quote
       removal, subject to the value of
       the promptvars shell option (see
       the  description  of  the  shopt
       command under SHELL BUILTIN COM‐
       MANDS below).

READLINE
       This is the library that handles
       reading  input  when  using   an
       interactive  shell,  unless  the
       --noediting option is  given  at
       shell  invocation.  Line editing
       is also used when using  the  -e
       option  to the read builtin.  By
       default, the line  editing  com‐
       mands  are  similar  to those of
       Emacs.  A vi-style line  editing
       interface   is  also  available.
       Line editing can be  enabled  at
       any  time  using the -o emacs or
       -o vi options to the set builtin
       (see   SHELL   BUILTIN  COMMANDS
       below).  To turn off line  edit‐
       ing  after the shell is running,
       use  the  +o  emacs  or  +o   vi
       options to the set builtin.

   Readline Notation
       In this section, the Emacs-style
       notation is used to denote  key‐
       strokes.    Control   keys   are
       denoted  by  C-key,  e.g.,   C-n
       means   Control-N.    Similarly,
       meta keys are denoted by  M-key,
       so  M-x  means Meta-X.  (On key‐
       boards without a meta  key,  M-x
       means  ESC  x,  i.e.,  press the
       Escape key then the x key.  This
       makes  ESC the meta prefix.  The
       combination M-C-x means ESC-Con‐
       trol-x,  or press the Escape key
       then hold the Control key  while
       pressing the x key.)

       Readline  commands  may be given
       numeric  arguments,  which  nor‐
       mally  act  as  a  repeat count.
       Sometimes, however,  it  is  the
       sign  of  the  argument  that is
       significant.  Passing a negative
       argument  to a command that acts
       in the forward direction  (e.g.,
       kill-line)  causes  that command
       to act in a backward  direction.
       Commands   whose  behavior  with
       arguments deviates from this are
       noted below.

       When  a  command is described as
       killing text, the  text  deleted
       is  saved  for  possible  future
       retrieval (yanking).  The killed
       text  is  saved  in a kill ring.
       Consecutive kills cause the text
       to be accumulated into one unit,
       which can be yanked all at once.
       Commands  which do not kill text
       separate the chunks of  text  on
       the kill ring.

   Readline Initialization
       Readline    is   customized   by
       putting commands in an  initial‐
       ization file (the inputrc file).
       The name of this file  is  taken
       from  the  value  of the INPUTRC
       variable.  If that  variable  is
       unset,  the  default is ~/.inpu‐
       trc.  When a program which  uses
       the  readline library starts up,
       the initialization file is read,
       and  the  key bindings and vari‐
       ables are set.  There are only a
       few  basic constructs allowed in
       the   readline    initialization
       file.   Blank lines are ignored.
       Lines beginning  with  a  #  are
       comments.   Lines beginning with
       a $  indicate  conditional  con‐
       structs.  Other lines denote key
       bindings and variable settings.

       The default key-bindings may  be
       changed  with  an  inputrc file.
       Other  programs  that  use  this
       library  may  add their own com‐
       mands and bindings.

       For example, placing

              M-Control-u:      univer‐
              sal-argument
       or
              C-Meta-u: universal-argu‐
              ment
       into  the  inputrc  would   make
       M-C-u  execute the readline com‐
       mand universal-argument.

       The following symbolic character
       names  are  recognized:  RUBOUT,
       DEL,  ESC,  LFD,  NEWLINE,  RET,
       RETURN, SPC, SPACE, and TAB.

       In  addition  to  command names,
       readline allows keys to be bound
       to  a  string  that  is inserted
       when  the  key  is  pressed   (a
       macro).

   Readline Key Bindings
       The  syntax  for controlling key
       bindings in the inputrc file  is
       simple.  All that is required is
       the name of the command  or  the
       text   of  a  macro  and  a  key
       sequence to which it  should  be
       bound.   The  name may be speci‐
       fied in one of two  ways:  as  a
       symbolic key name, possibly with
       Meta- or Control-  prefixes,  or
       as a key sequence.

       When   using   the   form   key‐
       name:function-name   or   macro,
       keyname  is  the  name  of a key
       spelled  out  in  English.   For
       example:

              Control-u:        univer‐
              sal-argument
              Meta-Rubout:    backward-
              kill-word
              Control-o: "> output"

       In  the  above  example,  C-u is
       bound to  the  function  univer‐
       sal-argument,  M-DEL is bound to
       the function backward-kill-word,
       and  C-o  is  bound  to  run the
       macro  expressed  on  the  right
       hand  side  (that  is, to insert
       the text ``> output''  into  the
       line).

       In   the   second   form,  "key‐
       seq":function-name   or   macro,
       keyseq   differs   from  keyname
       above in that  strings  denoting
       an  entire  key  sequence may be
       specified   by    placing    the
       sequence  within  double quotes.
       Some GNU Emacs style key escapes
       can be used, as in the following
       example, but the symbolic  char‐
       acter names are not recognized.

              "\C-u":   universal-argu‐
              ment
              "\C-x\C-r":
              re-read-init-file
              "\e[11~":  "Function  Key
              1"

       In this example,  C-u  is  again
       bound  to  the  function univer‐
       sal-argument.  C-x C-r is  bound
       to          the         function
       re-read-init-file, and ESC [ 1 1
       ~  is  bound  to insert the text
       ``Function Key 1''.

       The full set of GNU Emacs  style
       escape sequences is
              \C-    control prefix
              \M-    meta prefix
              \e     an  escape charac‐
                     ter
              \\     backslash
              \"     literal "
              \'     literal '

       In addition  to  the  GNU  Emacs
       style escape sequences, a second
       set  of  backslash  escapes   is
       available:
              \a     alert (bell)
              \b     backspace
              \d     delete
              \f     form feed
              \n     newline
              \r     carriage return
              \t     horizontal tab
              \v     vertical tab
              \nnn   the      eight-bit
                     character    whose
                     value is the octal
                     value nnn (one  to
                     three digits)
              \xHH   the      eight-bit
                     character    whose
                     value is the hexa‐
                     decimal  value  HH
                     (one  or  two  hex
                     digits)

       When  entering  the  text  of  a
       macro,  single  or double quotes
       must be used to indicate a macro
       definition.   Unquoted  text  is
       assumed to be a  function  name.
       In the macro body, the backslash
       escapes  described   above   are
       expanded.   Backslash will quote
       any other character in the macro
       text, including " and '.

       Bash allows the current readline
       key bindings to be displayed  or
       modified  with  the bind builtin
       command.  The editing  mode  may
       be  switched  during interactive
       use by using the  -o  option  to
       the  set  builtin  command  (see
       SHELL BUILTIN COMMANDS below).

   Readline Variables
       Readline has variables that  can
       be used to further customize its
       behavior.  A variable may be set
       in   the  inputrc  file  with  a
       statement of the form

              set variable-name value

       Except  where  noted,   readline
       variables can take the values On
       or Off (without regard to case).
       Unrecognized  variable names are
       ignored.  When a variable  value
       is  read,  empty or null values,
       "on" (case-insensitive), and "1"
       are equivalent to On.  All other
       values are  equivalent  to  Off.
       The  variables and their default
       values are:

       bell-style (audible)
              Controls   what   happens
              when  readline  wants  to
              ring the  terminal  bell.
              If  set to none, readline
              never rings the bell.  If
              set  to visible, readline
              uses a  visible  bell  if
              one is available.  If set
              to   audible,    readline
              attempts to ring the ter‐
              minal's bell.
       bind-tty-special-chars (On)
              If set  to  On,  readline
              attempts to bind the con‐
              trol  characters  treated
              specially by the kernel's
              terminal driver to  their
              readline equivalents.
       blink-matching-paren (Off)
              If  set  to  On, readline
              attempts to briefly  move
              the  cursor to an opening
              parenthesis when a  clos‐
              ing     parenthesis    is
              inserted.
       colored-completion-prefix (Off)
              If set to On, when  list‐
              ing completions, readline
              displays the common  pre‐
              fix  of the set of possi‐
              ble completions  using  a
              different   color.    The
              color   definitions   are
              taken  from  the value of
              the LS_COLORS environment
              variable.
       colored-stats (Off)
              If  set  to  On, readline
              displays possible comple‐
              tions   using   different
              colors to indicate  their
              file   type.   The  color
              definitions   are   taken
              from  the  value  of  the
              LS_COLORS     environment
              variable.
       comment-begin (``#'')
              The    string   that   is
              inserted when  the  read‐
              line  insert-comment com‐
              mand is  executed.   This
              command  is  bound to M-#
              in emacs mode and to # in
              vi command mode.
       completion-display-width (-1)
              The number of screen col‐
              umns used to display pos‐
              sible  matches  when per‐
              forming completion.   The
              value is ignored if it is
              less than  0  or  greater
              than  the terminal screen
              width.  A value of 0 will
              cause  matches to be dis‐
              played one per line.  The
              default value is -1.
       completion-ignore-case (Off)
              If  set  to  On, readline
              performs filename  match‐
              ing  and  completion in a
              case-insensitive fashion.
       completion-map-case (Off)
              If set to On, and comple‐
              tion-ignore-case       is
              enabled, readline  treats
              hyphens  (-)  and  under‐
              scores (_) as  equivalent
              when           performing
              case-insensitive filename
              matching and completion.
       completion-prefix-display-length
       (0)
              The length in  characters
              of the common prefix of a
              list of possible  comple‐
              tions  that  is displayed
              without     modification.
              When   set   to  a  value
              greater than zero, common
              prefixes longer than this
              value are  replaced  with
              an ellipsis when display‐
              ing possible completions.
       completion-query-items (100)
              This determines when  the
              user   is  queried  about
              viewing  the  number   of
              possible completions gen‐
              erated  by   the   possi‐
              ble-completions  command.
              It  may  be  set  to  any
              integer   value   greater
              than or  equal  to  zero.
              If the number of possible
              completions  is   greater
              than   or  equal  to  the
              value of  this  variable,
              the user is asked whether
              or not he wishes to  view
              them;  otherwise they are
              simply listed on the ter‐
              minal.
       convert-meta (On)
              If  set  to  On, readline
              will  convert  characters
              with  the  eighth bit set
              to an ASCII key  sequence
              by  stripping  the eighth
              bit  and   prefixing   an
              escape    character   (in
              effect, using  escape  as
              the  meta  prefix).   The
              default is On, but  read‐
              line  will  set it to Off
              if  the  locale  contains
              eight-bit characters.
       disable-completion (Off)
              If  set  to  On, readline
              will inhibit word comple‐
              tion.  Completion charac‐
              ters  will  be   inserted
              into  the line as if they
              had been mapped to  self-
              insert.
       echo-control-characters (On)
              When  set to On, on oper‐
              ating systems that  indi‐
              cate   they  support  it,
              readline echoes a charac‐
              ter  corresponding  to  a
              signal generated from the
              keyboard.
       editing-mode (emacs)
              Controls whether readline
              begins with a set of  key
              bindings similar to Emacs
              or vi.  editing-mode  can
              be set to either emacs or
              vi.
       enable-bracketed-paste (Off)
              When set to On,  readline
              will configure the termi‐
              nal in a  way  that  will
              enable  it to insert each
              paste  into  the  editing
              buffer as a single string
              of characters, instead of
              treating  each  character
              as if it  had  been  read
              from  the keyboard.  This
              can prevent pasted  char‐
              acters  from being inter‐
              preted  as  editing  com‐
              mands.
       enable-keypad (Off)
              When  set to On, readline
              will try  to  enable  the
              application  keypad  when
              it is called.  Some  sys‐
              tems  need this to enable
              the arrow keys.
       enable-meta-key (On)
              When set to On,  readline
              will  try  to  enable any
              meta  modifier  key   the
              terminal  claims  to sup‐
              port when it  is  called.
              On  many  terminals,  the
              meta key is used to  send
              eight-bit characters.
       expand-tilde (Off)
              If   set   to  On,  tilde
              expansion  is   performed
              when   readline  attempts
              word completion.
       history-preserve-point (Off)
              If set to On, the history
              code  attempts  to  place
              point at the  same  loca‐
              tion on each history line
              retrieved with  previous-
              history or next-history.
       history-size (unset)
              Set the maximum number of
              history entries saved  in
              the history list.  If set
              to  zero,  any   existing
              history    entries    are
              deleted   and   no    new
              entries  are  saved.   If
              set to a value less  than
              zero,  the number of his‐
              tory entries is not  lim‐
              ited.   By  default,  the
              number of history entries
              is  set  to  the value of
              the HISTSIZE shell  vari‐
              able.   If  an attempt is
              made to set  history-size
              to  a  non-numeric value,
              the  maximum  number   of
              history  entries  will be
              set to 500.
       horizontal-scroll-mode (Off)
              When  set  to  On,  makes
              readline   use  a  single
              line     for     display,
              scrolling the input hori‐
              zontally  on   a   single
              screen   line   when   it
              becomes longer  than  the
              screen  width rather than
              wrapping to a new line.
       input-meta (Off)
              If set  to  On,  readline
              will   enable   eight-bit
              input (that is,  it  will
              not  strip the eighth bit
              from  the  characters  it
              reads),   regardless   of
              what the terminal  claims
              it can support.  The name
              meta-flag  is  a  synonym
              for  this  variable.  The
              default is Off, but read‐
              line will set it to On if
              the    locale    contains
              eight-bit characters.
       isearch-terminators (``C-[C-J'')
              The  string of characters
              that should terminate  an
              incremental  search with‐
              out subsequently  execut‐
              ing  the  character  as a
              command.  If  this  vari‐
              able has not been given a
              value, the characters ESC
              and C-J will terminate an
              incremental search.
       keymap (emacs)
              Set the current  readline
              keymap.  The set of valid
              keymap  names  is  emacs,
              emacs-standard,
              emacs-meta,   emacs-ctlx,
              vi,    vi-command,    and
              vi-insert.  vi is equiva‐
              lent to vi-command; emacs
              is     equivalent      to
              emacs-standard.       The
              default value  is  emacs;
              the value of editing-mode
              also affects the  default
              keymap.
       emacs-mode-string (@)
              This  string is displayed
              immediately  before   the
              last  line of the primary
              prompt when emacs editing
              mode   is   active.   The
              value is expanded like  a
              key binding, so the stan‐
              dard  set  of  meta-  and
              control    prefixes   and
              backslash          escape
              sequences  is  available.
              Use the \1 and \2 escapes
              to    begin    and    end
              sequences of non-printing
              characters,  which can be
              used to embed a  terminal
              control sequence into the
              mode string.
       keyseq-timeout (500)
              Specifies  the   duration
              readline  will wait for a
              character when reading an
              ambiguous   key  sequence
              (one that can form a com‐
              plete  key sequence using
              the input read so far, or
              can take additional input
              to complete a longer  key
              sequence).   If  no input
              is  received  within  the
              timeout,   readline  will
              use the shorter but  com‐
              plete  key sequence.  The
              value  is  specified   in
              milliseconds,  so a value
              of 1000 means that  read‐
              line will wait one second
              for additional input.  If
              this variable is set to a
              value less than or  equal
              to  zero,  or  to  a non-
              numeric  value,  readline
              will  wait  until another
              key is pressed to  decide
              which   key  sequence  to
              complete.
       mark-directories (On)
              If set to  On,  completed
              directory  names  have  a
              slash appended.
       mark-modified-lines (Off)
              If  set  to  On,  history
              lines that have been mod‐
              ified are displayed  with
              a preceding asterisk (*).
       mark-symlinked-directories (Off)
              If  set  to On, completed
              names which are  symbolic
              links to directories have
              a slash appended (subject
              to     the    value    of
              mark-directories).
       match-hidden-files (On)
              This variable,  when  set
              to On, causes readline to
              match files  whose  names
              begin  with a `.' (hidden
              files)  when   performing
              filename  completion.  If
              set to Off,  the  leading
              `.'  must  be supplied by
              the user in the  filename
              to be completed.
       menu-complete-display-prefix
       (Off)
              If set to On,  menu  com‐
              pletion displays the com‐
              mon prefix of the list of
              possible      completions
              (which  may   be   empty)
              before   cycling  through
              the list.
       output-meta (Off)
              If set  to  On,  readline
              will  display  characters
              with the eighth  bit  set
              directly rather than as a
              meta-prefixed      escape
              sequence.  The default is
              Off,  but  readline  will
              set   it  to  On  if  the
              locale contains eight-bit
              characters.
       page-completions (On)
              If  set  to  On, readline
              uses  an  internal  more-
              like  pager  to display a
              screenful   of   possible
              completions at a time.
       print-completions-horizontally
       (Off)
              If set  to  On,  readline
              will  display completions
              with matches sorted hori‐
              zontally  in alphabetical
              order, rather  than  down
              the screen.
       revert-all-at-newline (Off)
              If  set  to  On, readline
              will undo all changes  to
              history    lines   before
              returning            when
              accept-line  is executed.
              By default, history lines
              may   be   modified   and
              retain  individual   undo
              lists   across  calls  to
              readline.
       show-all-if-ambiguous (Off)
              This alters  the  default
              behavior  of  the comple‐
              tion functions.   If  set
              to  On,  words which have
              more  than  one  possible
              completion    cause   the
              matches  to   be   listed
              immediately   instead  of
              ringing the bell.
       show-all-if-unmodified (Off)
              This alters  the  default
              behavior  of  the comple‐
              tion functions in a fash‐
              ion       similar      to
              show-all-if-ambiguous.
              If set to On, words which
              have more than one possi‐
              ble   completion  without
              any possible partial com‐
              pletion   (the   possible
              completions don't share a
              common  prefix) cause the
              matches  to   be   listed
              immediately   instead  of
              ringing the bell.
       show-mode-in-prompt (Off)
              If set to On, add a char‐
              acter to the beginning of
              the prompt indicating the
              editing  mode: emacs (@),
              vi  command  (:)  or   vi
              insertion (+).
       skip-completed-text (Off)
              If set to On, this alters
              the  default   completion
              behavior when inserting a
              single  match  into   the
              line.   It's  only active
              when  performing  comple‐
              tion  in  the middle of a
              word.  If enabled,  read‐
              line   does   not  insert
              characters from the  com‐
              pletion  that match char‐
              acters after point in the
              word  being completed, so
              portions of the word fol‐
              lowing the cursor are not
              duplicated.
       vi-cmd-mode-string ((cmd))
              This string is  displayed
              immediately   before  the
              last line of the  primary
              prompt  when  vi  editing
              mode  is  active  and  in
              command  mode.  The value
              is expanded  like  a  key
              binding,  so the standard
              set of meta- and  control
              prefixes   and  backslash
              escape    sequences    is
              available.   Use  the  \1
              and \2 escapes  to  begin
              and end sequences of non-
              printing      characters,
              which   can  be  used  to
              embed a terminal  control
              sequence  into  the  mode
              string.
       vi-ins-mode-string ((ins))
              This string is  displayed
              immediately   before  the
              last line of the  primary
              prompt  when  vi  editing
              mode  is  active  and  in
              insertion    mode.    The
              value is expanded like  a
              key binding, so the stan‐
              dard  set  of  meta-  and
              control    prefixes   and
              backslash          escape
              sequences  is  available.
              Use the \1 and \2 escapes
              to    begin    and    end
              sequences of non-printing
              characters,  which can be
              used to embed a  terminal
              control sequence into the
              mode string.
       visible-stats (Off)
              If set to On, a character
              denoting a file's type as
              reported  by  stat(2)  is
              appended  to the filename
              when   listing   possible
              completions.

   Readline Conditional Constructs
       Readline  implements  a facility
       similar in spirit to the  condi‐
       tional  compilation  features of
       the C preprocessor which  allows
       key  bindings  and variable set‐
       tings to  be  performed  as  the
       result of tests.  There are four
       parser directives used.

       $if    The $if construct  allows
              bindings to be made based
              on the editing mode,  the
              terminal  being  used, or
              the   application   using
              readline.   The  text  of
              the test extends  to  the
              end of the line; no char‐
              acters  are  required  to
              isolate it.

              mode   The  mode= form of
                     the $if  directive
                     is  used  to  test
                     whether   readline
                     is  in emacs or vi
                     mode.  This may be
                     used  in  conjunc‐
                     tion with the  set
                     keymap    command,
                     for  instance,  to
                     set   bindings  in
                     the emacs-standard
                     and     emacs-ctlx
                     keymaps  only   if
                     readline is start‐
                     ing out  in  emacs
                     mode.

              term   The term= form may
                     be used to include
                     terminal-specific
                     key bindings, per‐
                     haps  to  bind the
                     key sequences out‐
                     put  by the termi‐
                     nal's     function
                     keys.  The word on
                     the right side  of
                     the  =  is  tested
                     against  both  the
                     full  name  of the
                     terminal  and  the
                     portion   of   the
                     terminal      name
                     before  the  first
                     -.   This   allows
                     sun  to match both
                     sun  and  sun-cmd,
                     for instance.

              application
                     The    application
                     construct is  used
                     to  include appli‐
                     cation-specific
                     settings.     Each
                     program using  the
                     readline   library
                     sets the  applica‐
                     tion  name, and an
                     initialization
                     file  can test for
                     a       particular
                     value.  This could
                     be  used  to  bind
                     key  sequences  to
                     functions   useful
                     for   a   specific
                     program.       For
                     instance, the fol‐
                     lowing     command
                     adds     a     key
                     sequence      that
                     quotes the current
                     or  previous  word
                     in bash:

                     $if Bash
                     # Quote the current or previous word
                     "\C-xq": "\eb\"\ef\""
                     $endif

       $endif This  command, as seen in
              the   previous   example,
              terminates  an  $if  com‐
              mand.

       $else  Commands in  this  branch
              of  the $if directive are
              executed  if   the   test
              fails.

       $include
              This  directive  takes  a
              single  filename  as   an
              argument  and  reads com‐
              mands and  bindings  from
              that  file.  For example,
              the  following  directive
              would read /etc/inputrc:

              $include  /etc/inputrc

   Searching
       Readline  provides  commands for
       searching  through  the  command
       history  (see HISTORY below) for
       lines  containing  a   specified
       string.   There  are  two search
       modes:  incremental   and   non-
       incremental.

       Incremental    searches    begin
       before  the  user  has  finished
       typing  the  search  string.  As
       each  character  of  the  search
       string  is  typed, readline dis‐
       plays the next  entry  from  the
       history   matching   the  string
       typed so  far.   An  incremental
       search  requires  only  as  many
       characters as needed to find the
       desired   history   entry.   The
       characters present in the  value
       of the isearch-terminators vari‐
       able are used  to  terminate  an
       incremental   search.   If  that
       variable has not been assigned a
       value  the  Escape and Control-J
       characters  will  terminate   an
       incremental  search.   Control-G
       will abort an incremental search
       and  restore  the original line.
       When the search  is  terminated,
       the history entry containing the
       search string becomes  the  cur‐
       rent line.

       To  find  other matching entries
       in the history list,  type  Con‐
       trol-S or Control-R as appropri‐
       ate.  This will search  backward
       or  forward  in  the history for
       the  next  entry  matching   the
       search string typed so far.  Any
       other key sequence  bound  to  a
       readline  command will terminate
       the search and execute that com‐
       mand.   For  instance, a newline
       will terminate  the  search  and
       accept the line, thereby execut‐
       ing the command from the history
       list.

       Readline   remembers   the  last
       incremental search  string.   If
       two Control-Rs are typed without
       any    intervening    characters
       defining  a  new  search string,
       any remembered search string  is
       used.

       Non-incremental   searches  read
       the entire search string  before
       starting  to search for matching
       history   lines.    The   search
       string  may be typed by the user
       or be part of  the  contents  of
       the current line.

   Readline Command Names
       The  following  is a list of the
       names of the  commands  and  the
       default  key  sequences to which
       they are bound.   Command  names
       without   an   accompanying  key
       sequence are unbound by default.
       In  the  following descriptions,
       point refers to the current cur‐
       sor position, and mark refers to
       a cursor position saved  by  the
       set-mark   command.    The  text
       between the point  and  mark  is
       referred to as the region.

   Commands for Moving
       beginning-of-line (C-a)
              Move  to the start of the
              current line.
       end-of-line (C-e)
              Move to the  end  of  the
              line.
       forward-char (C-f)
              Move forward a character.
       backward-char (C-b)
              Move back a character.
       forward-word (M-f)
              Move  forward  to the end
              of the next word.   Words
              are  composed of alphanu‐
              meric characters (letters
              and digits).
       backward-word (M-b)
              Move back to the start of
              the current  or  previous
              word.  Words are composed
              of  alphanumeric  charac‐
              ters  (letters  and  dig‐
              its).
       shell-forward-word
              Move forward to  the  end
              of  the next word.  Words
              are  delimited  by   non-
              quoted  shell metacharac‐
              ters.
       shell-backward-word
              Move back to the start of
              the  current  or previous
              word.  Words  are  delim‐
              ited  by non-quoted shell
              metacharacters.
       clear-screen (C-l)
              Clear the screen  leaving
              the  current  line at the
              top of the screen.   With
              an  argument, refresh the
              current   line    without
              clearing the screen.
       redraw-current-line
              Refresh the current line.

   Commands  for  Manipulating the His‐
       tory
       accept-line (Newline, Return)
              Accept the  line  regard‐
              less  of where the cursor
              is.  If this line is non-
              empty, add it to the his‐
              tory  list  according  to
              the state of the HISTCON‐
              TROL  variable.   If  the
              line  is  a modified his‐
              tory line,  then  restore
              the  history  line to its
              original state.
       previous-history (C-p)
              Fetch the  previous  com‐
              mand   from  the  history
              list, moving back in  the
              list.
       next-history (C-n)
              Fetch  the  next  command
              from  the  history  list,
              moving   forward  in  the
              list.
       beginning-of-history (M-<)
              Move to the first line in
              the history.
       end-of-history (M->)
              Move  to  the  end of the
              input history, i.e.,  the
              line    currently   being
              entered.
       reverse-search-history (C-r)
              Search backward  starting
              at  the  current line and
              moving `up'  through  the
              history   as   necessary.
              This  is  an  incremental
              search.
       forward-search-history (C-s)
              Search  forward  starting
              at the current  line  and
              moving `down' through the
              history   as   necessary.
              This  is  an  incremental
              search.
       non-incremen‐
       tal-reverse-search-history (M-p)
              Search  backward  through
              the history  starting  at
              the  current line using a
              non-incremental    search
              for  a string supplied by
              the user.
       non-incremental-for‐
       ward-search-history (M-n)
              Search   forward  through
              the history using a  non-
              incremental  search for a
              string  supplied  by  the
              user.
       history-search-forward
              Search   forward  through
              the   history   for   the
              string    of   characters
              between the start of  the
              current   line   and  the
              point.  This  is  a  non-
              incremental search.
       history-search-backward
              Search  backward  through
              the   history   for   the
              string    of   characters
              between the start of  the
              current   line   and  the
              point.  This  is  a  non-
              incremental search.
       yank-nth-arg (M-C-y)
              Insert the first argument
              to the  previous  command
              (usually  the second word
              on the previous line)  at
              point.   With an argument
              n, insert  the  nth  word
              from the previous command
              (the words in the  previ‐
              ous  command  begin  with
              word  0).    A   negative
              argument  inserts the nth
              word from the end of  the
              previous  command.   Once
              the argument  n  is  com‐
              puted,  the  argument  is
              extracted as if the  "!n"
              history   expansion   had
              been specified.
       yank-last-arg (M-., M-_)
              Insert the last  argument
              to  the  previous command
              (the  last  word  of  the
              previous  history entry).
              With a numeric  argument,
              behave    exactly    like
              yank-nth-arg.  Successive
              calls   to  yank-last-arg
              move  back  through   the
              history  list,  inserting
              the  last  word  (or  the
              word   specified  by  the
              argument  to  the   first
              call)  of  each  line  in
              turn.  Any numeric  argu‐
              ment  supplied  to  these
              successive  calls  deter‐
              mines  the  direction  to
              move through the history.
              A    negative    argument
              switches  the   direction
              through the history (back
              or forward).  The history
              expansion  facilities are
              used to extract the  last
              word, as if the "!$" his‐
              tory expansion  had  been
              specified.
       shell-expand-line (M-C-e)
              Expand  the  line  as the
              shell  does.   This  per‐
              forms  alias  and history
              expansion as well as  all
              of  the shell word expan‐
              sions.     See    HISTORY
              EXPANSION   below  for  a
              description  of   history
              expansion.
       history-expand-line (M-^)
              Perform history expansion
              on the current line.  See
              HISTORY  EXPANSION  below
              for a description of his‐
              tory expansion.
       magic-space
              Perform history expansion
              on the current  line  and
              insert a space.  See HIS‐
              TORY EXPANSION below  for
              a  description of history
              expansion.
       alias-expand-line
              Perform  alias  expansion
              on the current line.  See
              ALIASES   above   for   a
              description    of   alias
              expansion.
       history-and-alias-expand-line
              Perform history and alias
              expansion  on the current
              line.
       insert-last-argument (M-., M-_)
              A       synonym       for
              yank-last-arg.
       operate-and-get-next (C-o)
              Accept  the  current line
              for execution  and  fetch
              the next line relative to
              the current line from the
              history for editing.  Any
              argument is ignored.
       edit-and-execute-command
       (C-xC-e)
              Invoke  an  editor on the
              current command line, and
              execute   the  result  as
              shell   commands.    Bash
              attempts  to invoke $VIS‐
              UAL, $EDITOR,  and  emacs
              as  the  editor,  in that
              order.

   Commands for Changing Text
       end-of-file (usually C-d)
              The character  indicating
              end-of-file  as  set, for
              example, by ``stty''.  If
              this  character  is  read
              when there are no charac‐
              ters  on  the  line,  and
              point is at the beginning
              of   the  line,  Readline
              interprets it as the  end
              of input and returns EOF.
       delete-char (C-d)
              Delete  the  character at
              point.  If this  function
              is   bound  to  the  same
              character as the tty  EOF
              character,  as  C-d  com‐
              monly is, see  above  for
              the effects.
       backward-delete-char (Rubout)
              Delete    the   character
              behind the cursor.   When
              given a numeric argument,
              save the deleted text  on
              the kill ring.
       forward-backward-delete-char
              Delete    the   character
              under the cursor,  unless
              the  cursor is at the end
              of  the  line,  in  which
              case the character behind
              the cursor is deleted.
       quoted-insert (C-q, C-v)
              Add  the  next  character
              typed  to the line verba‐
              tim.   This  is  how   to
              insert   characters  like
              C-q, for example.
       tab-insert (C-v TAB)
              Insert a tab character.
       self-insert (a, b, A, 1, !, ...)
              Insert   the    character
              typed.
       transpose-chars (C-t)
              Drag the character before
              point  forward  over  the
              character  at point, mov‐
              ing  point   forward   as
              well.  If point is at the
              end  of  the  line,  then
              this  transposes  the two
              characters before  point.
              Negative  arguments  have
              no effect.
       transpose-words (M-t)
              Drag  the   word   before
              point past the word after
              point, moving point  over
              that  word  as  well.  If
              point is at  the  end  of
              the line, this transposes
              the last two words on the
              line.
       upcase-word (M-u)
              Uppercase the current (or
              following) word.  With  a
              negative argument, upper‐
              case the  previous  word,
              but do not move point.
       downcase-word (M-l)
              Lowercase the current (or
              following) word.  With  a
              negative argument, lower‐
              case the  previous  word,
              but do not move point.
       capitalize-word (M-c)
              Capitalize   the  current
              (or   following)    word.
              With a negative argument,
              capitalize  the  previous
              word,  but  do  not  move
              point.
       overwrite-mode
              Toggle  overwrite   mode.
              With an explicit positive
              numeric         argument,
              switches   to   overwrite
              mode.  With  an  explicit
              non-positive      numeric
              argument,   switches   to
              insert  mode.   This com‐
              mand affects  only  emacs
              mode;  vi mode does over‐
              write differently.   Each
              call to readline() starts
              in insert mode.  In over‐
              write   mode,  characters
              bound   to    self-insert
              replace the text at point
              rather than  pushing  the
              text to the right.  Char‐
              acters  bound  to   back‐
              ward-delete-char  replace
              the   character    before
              point  with  a space.  By
              default, this command  is
              unbound.

   Killing and Yanking
       kill-line (C-k)
              Kill  the text from point
              to the end of the line.
       backward-kill-line (C-x Rubout)
              Kill  backward   to   the
              beginning of the line.
       unix-line-discard (C-u)
              Kill  backward from point
              to the beginning  of  the
              line.  The killed text is
              saved on the kill-ring.
       kill-whole-line
              Kill  all  characters  on
              the current line, no mat‐
              ter where point is.
       kill-word (M-d)
              Kill from  point  to  the
              end  of the current word,
              or if between  words,  to
              the end of the next word.
              Word boundaries  are  the
              same  as  those  used  by
              forward-word.
       backward-kill-word (M-Rubout)
              Kill  the   word   behind
              point.   Word  boundaries
              are  the  same  as  those
              used by backward-word.
       shell-kill-word
              Kill  from  point  to the
              end of the current  word,
              or  if  between words, to
              the end of the next word.
              Word  boundaries  are the
              same  as  those  used  by
              shell-forward-word.
       shell-backward-kill-word
              Kill   the   word  behind
              point.   Word  boundaries
              are  the  same  as  those
              used    by    shell-back‐
              ward-word.
       unix-word-rubout (C-w)
              Kill   the   word  behind
              point, using white  space
              as  a word boundary.  The
              killed text is  saved  on
              the kill-ring.
       unix-filename-rubout
              Kill   the   word  behind
              point, using white  space
              and  the  slash character
              as the  word  boundaries.
              The  killed text is saved
              on the kill-ring.
       delete-horizontal-space (M-\)
              Delete  all  spaces   and
              tabs around point.
       kill-region
              Kill the text in the cur‐
              rent region.
       copy-region-as-kill
              Copy  the  text  in   the
              region  to  the kill buf‐
              fer.
       copy-backward-word
              Copy  the   word   before
              point to the kill buffer.
              The word  boundaries  are
              the    same    as   back‐
              ward-word.
       copy-forward-word
              Copy the  word  following
              point to the kill buffer.
              The word  boundaries  are
              the same as forward-word.
       yank (C-y)
              Yank  the top of the kill
              ring into the  buffer  at
              point.
       yank-pop (M-y)
              Rotate the kill ring, and
              yank the new  top.   Only
              works  following  yank or
              yank-pop.

   Numeric Arguments
       digit-argument (M-0,  M-1,  ...,
       M--)
              Add  this  digit  to  the
              argument already  accumu‐
              lating,  or  start  a new
              argument.  M--  starts  a
              negative argument.
       universal-argument
              This  is  another  way to
              specify an argument.   If
              this  command is followed
              by one  or  more  digits,
              optionally with a leading
              minus sign, those  digits
              define  the argument.  If
              the command  is  followed
              by digits, executing uni‐
              versal-argument     again
              ends  the  numeric  argu‐
              ment,  but  is  otherwise
              ignored.   As  a  special
              case, if this command  is
              immediately followed by a
              character that is neither
              a  digit  nor minus sign,
              the  argument  count  for
              the  next command is mul‐
              tiplied  by  four.    The
              argument  count  is  ini‐
              tially one, so  executing
              this  function  the first
              time makes  the  argument
              count four, a second time
              makes the argument  count
              sixteen, and so on.

   Completing
       complete (TAB)
              Attempt  to  perform com‐
              pletion   on   the   text
              before    point.     Bash
              attempts       completion
              treating  the  text  as a
              variable  (if  the   text
              begins  with $), username
              (if the text begins  with
              ~), hostname (if the text
              begins with @),  or  com‐
              mand  (including  aliases
              and functions)  in  turn.
              If none of these produces
              a match, filename comple‐
              tion is attempted.
       possible-completions (M-?)
              List the possible comple‐
              tions of the text  before
              point.
       insert-completions (M-*)
              Insert all completions of
              the  text  before   point
              that would have been gen‐
              erated  by  possible-com‐
              pletions.
       menu-complete
              Similar  to complete, but
              replaces the word  to  be
              completed  with  a single
              match from  the  list  of
              possible     completions.
              Repeated   execution   of
              menu-complete       steps
              through the list of  pos‐
              sible        completions,
              inserting each  match  in
              turn.   At the end of the
              list of completions,  the
              bell  is rung (subject to
              the      setting       of
              bell-style) and the orig‐
              inal  text  is  restored.
              An  argument of n moves n
              positions forward in  the
              list  of matches; a nega‐
              tive argument may be used
              to  move backward through
              the list.   This  command
              is  intended  to be bound
              to TAB, but is unbound by
              default.
       menu-complete-backward
              Identical   to  menu-com‐
              plete, but moves backward
              through  the list of pos‐
              sible completions, as  if
              menu-complete   had  been
              given  a  negative  argu‐
              ment.   This  command  is
              unbound by default.
       delete-char-or-list
              Deletes   the   character
              under  the  cursor if not
              at the beginning  or  end
              of    the    line   (like
              delete-char).  If at  the
              end  of the line, behaves
              identically   to   possi‐
              ble-completions.     This
              command  is  unbound   by
              default.
       complete-filename (M-/)
              Attempt  filename comple‐
              tion on the  text  before
              point.
       possible-filename-completions
       (C-x /)
              List the possible comple‐
              tions  of the text before
              point, treating it  as  a
              filename.
       complete-username (M-~)
              Attempt completion on the
              text before point, treat‐
              ing it as a username.
       possible-username-completions
       (C-x ~)
              List the possible comple‐
              tions  of the text before
              point, treating it  as  a
              username.
       complete-variable (M-$)
              Attempt completion on the
              text before point, treat‐
              ing  it  as a shell vari‐
              able.
       possible-variable-completions
       (C-x $)
              List the possible comple‐
              tions of the text  before
              point,  treating  it as a
              shell variable.
       complete-hostname (M-@)
              Attempt completion on the
              text before point, treat‐
              ing it as a hostname.
       possible-hostname-completions
       (C-x @)
              List the possible comple‐
              tions of the text  before
              point,  treating  it as a
              hostname.
       complete-command (M-!)
              Attempt completion on the
              text before point, treat‐
              ing it as a command name.
              Command        completion
              attempts  to  match   the
              text   against   aliases,
              reserved   words,   shell
              functions,          shell
              builtins,   and   finally
              executable  filenames, in
              that order.
       possible-command-completions
       (C-x !)
              List the possible comple‐
              tions of the text  before
              point,  treating  it as a
              command name.
       dynamic-complete-history (M-TAB)
              Attempt completion on the
              text  before  point, com‐
              paring the  text  against
              lines  from  the  history
              list for possible comple‐
              tion matches.
       dabbrev-expand
              Attempt  menu  completion
              on the text before point,
              comparing     the    text
              against  lines  from  the
              history list for possible
              completion matches.
       complete-into-braces (M-{)
              Perform filename  comple‐
              tion  and insert the list
              of  possible  completions
              enclosed within braces so
              the list is available  to
              the   shell   (see  Brace
              Expansion above).

   Keyboard Macros
       start-kbd-macro (C-x ()
              Begin saving the  charac‐
              ters  typed into the cur‐
              rent keyboard macro.
       end-kbd-macro (C-x ))
              Stop saving  the  charac‐
              ters  typed into the cur‐
              rent keyboard  macro  and
              store the definition.
       call-last-kbd-macro (C-x e)
              Re-execute  the last key‐
              board macro  defined,  by
              making  the characters in
              the macro  appear  as  if
              typed at the keyboard.
       print-last-kbd-macro ()
              Print  the  last keyboard
              macro defined in a format
              suitable  for the inputrc
              file.

   Miscellaneous
       re-read-init-file (C-x C-r)
              Read in the  contents  of
              the   inputrc  file,  and
              incorporate any  bindings
              or  variable  assignments
              found there.
       abort (C-g)
              Abort the current editing
              command and ring the ter‐
              minal's bell (subject  to
              the       setting      of
              bell-style).
       do-uppercase-version (M-a,  M-b,
       M-x, ...)
              If the metafied character
              x is lowercase,  run  the
              command  that is bound to
              the corresponding  upper‐
              case character.
       prefix-meta (ESC)
              Metafy the next character
              typed.  ESC f is  equiva‐
              lent to Meta-f.
       undo (C-_, C-x C-u)
              Incremental  undo,  sepa‐
              rately   remembered   for
              each line.
       revert-line (M-r)
              Undo  all changes made to
              this line.  This is  like
              executing  the  undo com‐
              mand  enough   times   to
              return  the  line  to its
              initial state.
       tilde-expand (M-&)
              Perform  tilde  expansion
              on the current word.
       set-mark (C-@, M-<space>)
              Set   the   mark  to  the
              point.   If   a   numeric
              argument is supplied, the
              mark is set to that posi‐
              tion.
       exchange-point-and-mark     (C-x
       C-x)
              Swap the point  with  the
              mark.  The current cursor
              position is  set  to  the
              saved  position,  and the
              old  cursor  position  is
              saved as the mark.
       character-search (C-])
              A  character  is read and
              point  is  moved  to  the
              next  occurrence  of that
              character.   A   negative
              count searches for previ‐
              ous occurrences.
       character-search-backward
       (M-C-])
              A  character  is read and
              point  is  moved  to  the
              previous   occurrence  of
              that character.  A  nega‐
              tive  count  searches for
              subsequent occurrences.
       skip-csi-sequence
              Read enough characters to
              consume    a    multi-key
              sequence  such  as  those
              defined   for  keys  like
              Home   and   End.    Such
              sequences  begin  with  a
              Control Sequence  Indica‐
              tor (CSI), usually ESC-[.
              If this sequence is bound
              to  "\[",  keys producing
              such sequences will  have
              no  effect unless explic‐
              itly bound to a  readline
              command,    instead    of
              inserting  stray  charac‐
              ters   into  the  editing
              buffer.  This is  unbound
              by  default,  but usually
              bound to ESC-[.
       insert-comment (M-#)
              Without a  numeric  argu‐
              ment,  the  value  of the
              readline    comment-begin
              variable  is  inserted at
              the beginning of the cur‐
              rent  line.  If a numeric
              argument   is   supplied,
              this  command  acts  as a
              toggle: if the characters
              at  the  beginning of the
              line  do  not  match  the
              value  of  comment-begin,
              the  value  is  inserted,
              otherwise  the characters
              in   comment-begin    are
              deleted  from  the begin‐
              ning  of  the  line.   In
              either  case, the line is
              accepted as if a  newline
              had   been   typed.   The
              default  value  of   com‐
              ment-begin   causes  this
              command to make the  cur‐
              rent  line  a  shell com‐
              ment.  If a numeric argu‐
              ment  causes  the comment
              character to be  removed,
              the line will be executed
              by the shell.
       glob-complete-word (M-g)
              The word before point  is
              treated  as a pattern for
              pathname expansion,  with
              an   asterisk  implicitly
              appended.   This  pattern
              is  used  to  generate  a
              list  of  matching  file‐
              names  for  possible com‐
              pletions.
       glob-expand-word (C-x *)
              The word before point  is
              treated  as a pattern for
              pathname  expansion,  and
              the   list   of  matching
              filenames  is   inserted,
              replacing the word.  If a
              numeric argument is  sup‐
              plied,   an  asterisk  is
              appended before  pathname
              expansion.
       glob-list-expansions (C-x g)
              The  list  of  expansions
              that would have been gen‐
              erated                 by
              glob-expand-word is  dis‐
              played,  and  the line is
              redrawn.   If  a  numeric
              argument  is supplied, an
              asterisk   is    appended
              before   pathname  expan‐
              sion.
       dump-functions
              Print all  of  the  func‐
              tions and their key bind‐
              ings to the readline out‐
              put stream.  If a numeric
              argument is supplied, the
              output  is  formatted  in
              such a way that it can be
              made  part  of an inputrc
              file.
       dump-variables
              Print all of the settable
              readline   variables  and
              their values to the read‐
              line output stream.  If a
              numeric argument is  sup‐
              plied, the output is for‐
              matted in such a way that
              it can be made part of an
              inputrc file.
       dump-macros
              Print all of the readline
              key  sequences  bound  to
              macros  and  the  strings
              they    output.    If   a
              numeric argument is  sup‐
              plied, the output is for‐
              matted in such a way that
              it can be made part of an
              inputrc file.
       display-shell-version (C-x C-v)
              Display version  informa‐
              tion  about  the  current
              instance of bash.

   Programmable Completion
       When    word    completion    is
       attempted  for  an argument to a
       command for which  a  completion
       specification  (a  compspec) has
       been defined using the  complete
       builtin  (see SHELL BUILTIN COM‐
       MANDS below),  the  programmable
       completion     facilities    are
       invoked.

       First, the command name is iden‐
       tified.   If the command word is
       the  empty  string   (completion
       attempted at the beginning of an
       empty   line),   any    compspec
       defined  with  the  -E option to
       complete is used.  If a compspec
       has  been  defined for that com‐
       mand, the compspec  is  used  to
       generate  the  list  of possible
       completions for  the  word.   If
       the command word is a full path‐
       name, a compspec  for  the  full
       pathname  is searched for first.
       If no compspec is found for  the
       full  pathname,  an  attempt  is
       made to find a compspec for  the
       portion   following   the  final
       slash.  If those searches do not
       result  in a compspec, any comp‐
       spec defined with the -D  option
       to   complete  is  used  as  the
       default.

       Once a compspec has been  found,
       it  is used to generate the list
       of matching words.  If  a  comp‐
       spec  is  not found, the default
       bash  completion  as   described
       above  under  Completing is per‐
       formed.

       First, the actions specified  by
       the  compspec  are  used.   Only
       matches which  are  prefixed  by
       the  word  being  completed  are
       returned.  When  the  -f  or  -d
       option  is  used for filename or
       directory name  completion,  the
       shell  variable  FIGNORE is used
       to filter the matches.

       Any completions specified  by  a
       pathname  expansion  pattern  to
       the  -G  option  are   generated
       next.   The  words  generated by
       the pattern need not  match  the
       word  being completed.  The GLO‐
       BIGNORE shell  variable  is  not
       used  to filter the matches, but
       the FIGNORE variable is used.

       Next, the  string  specified  as
       the argument to the -W option is
       considered.  The string is first
       split  using  the  characters in
       the  IFS  special  variable   as
       delimiters.   Shell  quoting  is
       honored.   Each  word  is   then
       expanded  using brace expansion,
       tilde expansion,  parameter  and
       variable expansion, command sub‐
       stitution, and arithmetic expan‐
       sion,  as  described above under
       EXPANSION.   The   results   are
       split  using the rules described
       above under Word Splitting.  The
       results  of  the  expansion  are
       prefix-matched against the  word
       being  completed, and the match‐
       ing words  become  the  possible
       completions.

       After  these  matches  have been
       generated, any shell function or
       command  specified  with  the -F
       and -C options is invoked.  When
       the   command   or  function  is
       invoked,     the      COMP_LINE,
       COMP_POINT,     COMP_KEY,    and
       COMP_TYPE variables are assigned
       values  as described above under
       Shell  Variables.   If  a  shell
       function  is  being invoked, the
       COMP_WORDS and COMP_CWORD  vari‐
       ables  are  also  set.  When the
       function or command is  invoked,
       the  first  argument ($1) is the
       name of the command whose  argu‐
       ments  are  being completed, the
       second argument ($2) is the word
       being  completed,  and the third
       argument ($3) is the  word  pre‐
       ceding  the word being completed
       on the current command line.  No
       filtering  of the generated com‐
       pletions against the word  being
       completed   is   performed;  the
       function or command has complete
       freedom    in   generating   the
       matches.

       Any function specified  with  -F
       is  invoked first.  The function
       may use any of the shell facili‐
       ties,   including   the  compgen
       builtin described below, to gen‐
       erate  the matches.  It must put
       the possible completions in  the
       COMPREPLY  array  variable,  one
       per array element.

       Next, any command specified with
       the  -C  option is invoked in an
       environment equivalent  to  com‐
       mand  substitution.   It  should
       print a list of completions, one
       per  line,  to the standard out‐
       put.  Backslash may be  used  to
       escape a newline, if necessary.

       After  all  of the possible com‐
       pletions are generated, any fil‐
       ter specified with the -X option
       is applied  to  the  list.   The
       filter  is a pattern as used for
       pathname expansion; a &  in  the
       pattern  is  replaced  with  the
       text  of  the  word  being  com‐
       pleted.   A  literal  &  may  be
       escaped with  a  backslash;  the
       backslash   is   removed  before
       attempting a match.  Any comple‐
       tion  that  matches  the pattern
       will be removed from  the  list.
       A leading ! negates the pattern;
       in this case any completion  not
       matching  the  pattern  will  be
       removed.   If  the   nocasematch
       shell  option  is  enabled,  the
       match   is   performed   without
       regard to the case of alphabetic
       characters.

       Finally, any prefix  and  suffix
       specified  with  the  -P  and -S
       options are added to each member
       of  the completion list, and the
       result is returned to the  read‐
       line completion code as the list
       of possible completions.

       If    the     previously-applied
       actions   do  not  generate  any
       matches,  and  the  -o  dirnames
       option  was supplied to complete
       when the compspec  was  defined,
       directory   name  completion  is
       attempted.

       If the -o  plusdirs  option  was
       supplied  to  complete  when the
       compspec was defined,  directory
       name completion is attempted and
       any matches  are  added  to  the
       results of the other actions.

       By  default,  if  a  compspec is
       found, whatever it generates  is
       returned  to the completion code
       as the full set of possible com‐
       pletions.  The default bash com‐
       pletions are not attempted,  and
       the readline default of filename
       completion is disabled.  If  the
       -o  bashdefault  option was sup‐
       plied to complete when the comp‐
       spec   was   defined,  the  bash
       default     completions      are
       attempted if the compspec gener‐
       ates  no  matches.   If  the  -o
       default  option  was supplied to
       complete when the  compspec  was
       defined, readline's default com‐
       pletion will be performed if the
       compspec (and, if attempted, the
       default bash completions) gener‐
       ate no matches.

       When  a  compspec indicates that
       directory  name  completion   is
       desired,  the  programmable com‐
       pletion functions force readline
       to  append  a slash to completed
       names which are  symbolic  links
       to  directories,  subject to the
       value  of  the  mark-directories
       readline variable, regardless of
       the  setting  of  the  mark-sym‐
       linked-directories      readline
       variable.

       There is some support for dynam‐
       ically   modifying  completions.
       This is most useful when used in
       combination  with a default com‐
       pletion specified with  complete
       -D.   It's  possible  for  shell
       functions executed as completion
       handlers  to  indicate that com‐
       pletion  should  be  retried  by
       returning an exit status of 124.
       If a shell function returns 124,
       and changes the compspec associ‐
       ated with the command  on  which
       completion  is  being  attempted
       (supplied as the first  argument
       when  the function is executed),
       programmable completion restarts
       from   the  beginning,  with  an
       attempt to find a  new  compspec
       for that command.  This allows a
       set of completions to  be  built
       dynamically   as  completion  is
       attempted,  rather  than   being
       loaded all at once.

       For   instance,   assuming  that
       there is a library of compspecs,
       each  kept in a file correspond‐
       ing to the name of the  command,
       the following default completion
       function would load  completions
       dynamically:

       _completion_loader()
       {
            .        "/etc/bash_comple‐
       tion.d/$1.sh" >/dev/null 2>&1 &&
       return 124
       }
       complete    -D    -F    _comple‐
       tion_loader  -o  bashdefault  -o
       default

HISTORY
       When  the  -o  history option to
       the set builtin is enabled,  the
       shell  provides  access  to  the
       command  history,  the  list  of
       commands  previously typed.  The
       value of the  HISTSIZE  variable
       is  used  as  the number of com‐
       mands to save in a history list.
       The  text  of  the last HISTSIZE
       commands (default 500) is saved.
       The shell stores each command in
       the history list prior to param‐
       eter and variable expansion (see
       EXPANSION above) but after  his‐
       tory   expansion  is  performed,
       subject to  the  values  of  the
       shell  variables  HISTIGNORE and
       HISTCONTROL.

       On startup, the history is  ini‐
       tialized  from the file named by
       the variable  HISTFILE  (default
       ~/.bash_history).     The   file
       named by the value  of  HISTFILE
       is  truncated,  if necessary, to
       contain no more than the  number
       of  lines specified by the value
       of HISTFILESIZE.   If  HISTFILE‐
       SIZE is unset, or set to null, a
       non-numeric value, or a  numeric
       value  less  than zero, the his‐
       tory  file  is  not   truncated.
       When  the  history file is read,
       lines beginning with the history
       comment character followed imme‐
       diately by a  digit  are  inter‐
       preted  as  timestamps  for  the
       preceding history  line.   These
       timestamps  are  optionally dis‐
       played depending on the value of
       the   HISTTIMEFORMAT   variable.
       When  a   shell   with   history
       enabled  exits,  the last $HIST‐
       SIZE lines are copied  from  the
       history  list  to $HISTFILE.  If
       the histappend shell  option  is
       enabled  (see the description of
       shopt under SHELL  BUILTIN  COM‐
       MANDS   below),  the  lines  are
       appended to  the  history  file,
       otherwise  the  history  file is
       overwritten.   If  HISTFILE   is
       unset, or if the history file is
       unwritable, the history  is  not
       saved.   If  the  HISTTIMEFORMAT
       variable is set, time stamps are
       written  to  the  history  file,
       marked with the history  comment
       character,  so  they may be pre‐
       served  across  shell  sessions.
       This  uses  the  history comment
       character to  distinguish  time‐
       stamps from other history lines.
       After saving  the  history,  the
       history  file  is  truncated  to
       contain no more  than  HISTFILE‐
       SIZE  lines.  If HISTFILESIZE is
       unset, or set to  null,  a  non-
       numeric   value,  or  a  numeric
       value less than zero,  the  his‐
       tory file is not truncated.

       The   builtin  command  fc  (see
       SHELL  BUILTIN  COMMANDS  below)
       may  be used to list or edit and
       re-execute a portion of the his‐
       tory  list.  The history builtin
       may be used to display or modify
       the  history list and manipulate
       the history  file.   When  using
       command-line   editing,   search
       commands are available  in  each
       editing mode that provide access
       to the history list.

       The shell  allows  control  over
       which  commands are saved on the
       history list.   The  HISTCONTROL
       and  HISTIGNORE variables may be
       set to cause the shell  to  save
       only  a  subset  of the commands
       entered.   The   cmdhist   shell
       option,  if  enabled, causes the
       shell to attempt  to  save  each
       line  of a multi-line command in
       the same history  entry,  adding
       semicolons  where  necessary  to
       preserve syntactic  correctness.
       The  lithist shell option causes
       the shell to  save  the  command
       with  embedded  newlines instead
       of semicolons.  See the descrip‐
       tion  of the shopt builtin below
       under SHELL BUILTIN COMMANDS for
       information   on   setting   and
       unsetting shell options.

HISTORY EXPANSION
       The  shell  supports  a  history
       expansion  feature that is simi‐
       lar to the history expansion  in
       csh.    This  section  describes
       what syntax features are  avail‐
       able.   This  feature is enabled
       by   default   for   interactive
       shells,   and  can  be  disabled
       using the +H option to  the  set
       builtin   command   (see   SHELL
       BUILTIN COMMANDS  below).   Non-
       interactive  shells  do not per‐
       form   history   expansion    by
       default.

       History   expansions   introduce
       words from the history list into
       the input stream, making it easy
       to repeat commands,  insert  the
       arguments  to a previous command
       into the current input line,  or
       fix  errors in previous commands
       quickly.

       History expansion  is  performed
       immediately   after  a  complete
       line is read, before  the  shell
       breaks  it into words.  It takes
       place in two parts.   The  first
       is  to determine which line from
       the history list to  use  during
       substitution.   The second is to
       select portions of that line for
       inclusion  into the current one.
       The line selected from the  his‐
       tory  is the event, and the por‐
       tions  of  that  line  that  are
       acted  upon  are words.  Various
       modifiers   are   available   to
       manipulate  the  selected words.
       The line is broken into words in
       the same fashion as when reading
       input, so that several metachar‐
       acter-separated words surrounded
       by  quotes  are  considered  one
       word.   History  expansions  are
       introduced by the appearance  of
       the history expansion character,
       which is  !  by  default.   Only
       backslash  (\) and single quotes
       can quote the history  expansion
       character,   but   the   history
       expansion  character   is   also
       treated  as quoted if it immedi‐
       ately precedes the closing  dou‐
       ble  quote  in  a  double-quoted
       string.

       Several characters inhibit  his‐
       tory  expansion if found immedi‐
       ately  following   the   history
       expansion  character, even if it
       is unquoted:  space,  tab,  new‐
       line,  carriage  return,  and =.
       If the extglob shell  option  is
       enabled,  (  will  also  inhibit
       expansion.

       Several shell  options  settable
       with  the  shopt  builtin may be
       used to tailor the  behavior  of
       history   expansion.    If   the
       histverify   shell   option   is
       enabled  (see the description of
       the shopt  builtin  below),  and
       readline  is being used, history
       substitutions  are  not  immedi‐
       ately   passed   to   the  shell
       parser.  Instead,  the  expanded
       line  is reloaded into the read‐
       line editing buffer for  further
       modification.   If  readline  is
       being used, and  the  histreedit
       shell   option   is  enabled,  a
       failed history substitution will
       be  reloaded  into  the readline
       editing buffer  for  correction.
       The  -p  option  to  the history
       builtin command may be  used  to
       see  what  a  history  expansion
       will do before using it.  The -s
       option  to  the  history builtin
       may be used to add  commands  to
       the  end  of  the  history  list
       without actually executing them,
       so  that  they are available for
       subsequent recall.

       The shell allows control of  the
       various  characters  used by the
       history expansion mechanism (see
       the   description  of  histchars
       above  under  Shell  Variables).
       The  shell uses the history com‐
       ment character to  mark  history
       timestamps when writing the his‐
       tory file.

   Event Designators
       An event designator is a  refer‐
       ence  to a command line entry in
       the history  list.   Unless  the
       reference  is  absolute,  events
       are  relative  to  the   current
       position in the history list.

       !      Start a history substitu‐
              tion,  except  when  fol‐
              lowed  by  a  blank, new‐
              line, carriage return,  =
              or  (  (when  the extglob
              shell option  is  enabled
              using the shopt builtin).
       !n     Refer to command line n.
       !-n    Refer to the current com‐
              mand minus n.
       !!     Refer  to  the   previous
              command.   This is a syn‐
              onym for `!-1'.
       !string
              Refer to the most  recent
              command   preceding   the
              current position  in  the
              history   list   starting
              with string.
       !?string[?]
              Refer to the most  recent
              command   preceding   the
              current position  in  the
              history  list  containing
              string.  The  trailing  ?
              may  be omitted if string
              is  followed  immediately
              by a newline.
       ^string1^string2^
              Quick       substitution.
              Repeat the previous  com‐
              mand,  replacing  string1
              with string2.  Equivalent
              to
              ``!!:s/string1/string2/''
              (see Modifiers below).
       !#     The  entire  command line
              typed so far.

   Word Designators
       Word  designators  are  used  to
       select  desired  words  from the
       event.  A : separates the  event
       specification from the word des‐
       ignator.  It may be  omitted  if
       the  word designator begins with
       a ^, $, *, -, or %.   Words  are
       numbered  from  the beginning of
       the line, with  the  first  word
       being   denoted   by  0  (zero).
       Words are inserted into the cur‐
       rent  line  separated  by single
       spaces.

       0 (zero)
              The zeroth word.  For the
              shell,  this  is the com‐
              mand word.
       n      The nth word.
       ^      The first argument.  That
              is, word 1.
       $      The  last  word.  This is
              usually  the  last  argu‐
              ment,  but will expand to
              the zeroth word if  there
              is  only  one word in the
              line.
       %      The word matched  by  the
              most   recent  `?string?'
              search.
       x-y    A range  of  words;  `-y'
              abbreviates `0-y'.
       *      All  of the words but the
              zeroth.  This is  a  syn‐
              onym  for  `1-$'.   It is
              not an error to use *  if
              there is just one word in
              the  event;   the   empty
              string   is  returned  in
              that case.
       x*     Abbreviates x-$.
       x-     Abbreviates x-$ like  x*,
              but omits the last word.

       If a word designator is supplied
       without an event  specification,
       the  previous command is used as
       the event.

   Modifiers
       After the optional word designa‐
       tor, there may appear a sequence
       of one or more of the  following
       modifiers,  each  preceded  by a
       `:'.

       h      Remove a  trailing  file‐
              name  component,  leaving
              only the head.
       t      Remove all leading  file‐
              name  components, leaving
              the tail.
       r      Remove a trailing  suffix
              of the form .xxx, leaving
              the basename.
       e      Remove all but the trail‐
              ing suffix.
       p      Print the new command but
              do not execute it.
       q      Quote   the   substituted
              words,  escaping  further
              substitutions.
       x      Quote   the   substituted
              words   as  with  q,  but
              break   into   words   at
              blanks and newlines.
       s/old/new/
              Substitute  new  for  the
              first occurrence  of  old
              in  the  event line.  Any
              delimiter can be used  in
              place  of  /.   The final
              delimiter is optional  if
              it  is the last character
              of the event  line.   The
              delimiter  may  be quoted
              in old  and  new  with  a
              single  backslash.   If &
              appears  in  new,  it  is
              replaced  by old.  A sin‐
              gle backslash will  quote
              the  &.   If old is null,
              it is set to the last old
              substituted,  or,  if  no
              previous history  substi‐
              tutions  took  place, the
              last    string    in    a
              !?string[?]  search.
       &      Repeat  the previous sub‐
              stitution.
       g      Cause   changes   to   be
              applied  over  the entire
              event line.  This is used
              in  conjunction with `:s'
              (e.g., `:gs/old/new/') or
              `:&'.  If used with `:s',
              any delimiter can be used
              in  place  of  /, and the
              final    delimiter     is
              optional  if  it  is  the
              last  character  of   the
              event  line.  An a may be
              used as a synonym for g.
       G      Apply the  following  `s'
              modifier   once  to  each
              word in the event line.

SHELL BUILTIN COMMANDS
       Unless  otherwise  noted,   each
       builtin  command  documented  in
       this   section   as    accepting
       options preceded by - accepts --
       to  signify  the  end   of   the
       options.   The  :,  true, false,
       and test builtins do not  accept
       options and do not treat -- spe‐
       cially.    The   exit,   logout,
       return,  break,  continue,  let,
       and shift  builtins  accept  and
       process arguments beginning with
       - without requiring  --.   Other
       builtins  that  accept arguments
       but are not specified as accept‐
       ing  options interpret arguments
       beginning  with  -  as   invalid
       options  and  require -- to pre‐
       vent this interpretation.
       : [arguments]
              No  effect;  the  command
              does    nothing    beyond
              expanding  arguments  and
              performing  any specified
              redirections.  The return
              status is zero.

        .  filename [arguments]
       source filename [arguments]
              Read and execute commands
              from filename in the cur‐
              rent   shell  environment
              and return the exit  sta‐
              tus  of  the last command
              executed  from  filename.
              If filename does not con‐
              tain a  slash,  filenames
              in  PATH are used to find
              the directory  containing
              filename.     The    file
              searched for in PATH need
              not  be executable.  When
              bash  is  not  in   posix
              mode,  the current direc‐
              tory is  searched  if  no
              file  is  found  in PATH.
              If the sourcepath  option
              to the shopt builtin com‐
              mand is turned  off,  the
              PATH is not searched.  If
              any  arguments  are  sup‐
              plied,  they  become  the
              positional     parameters
              when   filename  is  exe‐
              cuted.    Otherwise   the
              positional parameters are
              unchanged.   If  the   -T
              option is enabled, source
              inherits  any   trap   on
              DEBUG;  if it is not, any
              DEBUG  trap   string   is
              saved and restored around
              the call to  source,  and
              source  unsets  the DEBUG
              trap while  it  executes.
              If -T is not set, and the
              sourced file changes  the
              DEBUG trap, the new value
              is retained  when  source
              completes.    The  return
              status is the  status  of
              the  last  command exited
              within the script  (0  if
              no   commands   are  exe‐
              cuted),  and   false   if
              filename  is not found or
              cannot be read.

       alias [-p] [name[=value] ...]
              Alias with  no  arguments
              or  with  the  -p  option
              prints   the   list    of
              aliases in the form alias
              name=value  on   standard
              output.   When  arguments
              are supplied, an alias is
              defined   for  each  name
              whose value is given.   A
              trailing  space  in value
              causes the next  word  to
              be checked for alias sub‐
              stitution when the  alias
              is  expanded.   For  each
              name in the argument list
              for  which  no  value  is
              supplied,  the  name  and
              value  of  the  alias  is
              printed.   Alias  returns
              true  unless  a  name  is
              given for which no  alias
              has been defined.

       bg [jobspec ...]
              Resume each suspended job
              jobspec  in   the   back‐
              ground, as if it had been
              started with &.  If  job‐
              spec  is not present, the
              shell's  notion  of   the
              current  job is used.  bg
              jobspec returns 0  unless
              run  when  job control is
              disabled  or,  when   run
              with job control enabled,
              any specified jobspec was
              not  found or was started
              without job control.

       bind [-m keymap] [-lpsvPSVX]
       bind [-m keymap]  [-q  function]
       [-u function] [-r keyseq]
       bind [-m keymap] -f filename
       bind   [-m   keymap]   -x   key‐
       seq:shell-command
       bind  [-m  keymap]  keyseq:func‐
       tion-name
       bind  [-m  keymap]  keyseq:read‐
       line-command
              Display current  readline
              key  and  function  bind‐
              ings, bind a key sequence
              to a readline function or
              macro, or set a  readline
              variable.     Each   non-
              option argument is a com‐
              mand  as  it would appear
              in  .inputrc,  but   each
              binding  or  command must
              be passed as  a  separate
              argument;           e.g.,
              '"\C-x\C-r":
              re-read-init-file'.
              Options,   if   supplied,
              have  the following mean‐
              ings:
              -m keymap
                     Use keymap as  the
                     keymap    to    be
                     affected  by   the
                     subsequent   bind‐
                     ings.   Acceptable
                     keymap  names  are
                     emacs, emacs-stan‐
                     dard,  emacs-meta,
                     emacs-ctlx,    vi,
                     vi-move,   vi-com‐
                     mand,          and
                     vi-insert.   vi is
                     equivalent      to
                     vi-command
                     (vi-move is also a
                     synonym); emacs is
                     equivalent      to
                     emacs-standard.
              -l     List  the names of
                     all readline func‐
                     tions.
              -p     Display   readline
                     function names and
                     bindings in such a
                     way that they  can
                     be re-read.
              -P     List current read‐
                     line      function
                     names   and  bind‐
                     ings.
              -s     Display   readline
                     key      sequences
                     bound  to   macros
                     and   the  strings
                     they   output   in
                     such  a  way  that
                     they  can  be  re-
                     read.
              -S     Display   readline
                     key      sequences
                     bound   to  macros
                     and  the   strings
                     they output.
              -v     Display   readline
                     variable names and
                     values  in  such a
                     way that they  can
                     be re-read.
              -V     List current read‐
                     line      variable
                     names and values.
              -f filename
                     Read  key bindings
                     from filename.
              -q function
                     Query about  which
                     keys   invoke  the
                     named function.
              -u function
                     Unbind  all   keys
                     bound to the named
                     function.
              -r keyseq
                     Remove any current
                     binding  for  key‐
                     seq.
              -x keyseq:shell-command
                     Cause   shell-com‐
                     mand  to  be  exe‐
                     cuted     whenever
                     keyseq is entered.
                     When shell-command
                     is  executed,  the
                     shell   sets   the
                     READLINE_LINE
                     variable  to   the
                     contents   of  the
                     readline line buf‐
                     fer  and the READ‐
                     LINE_POINT   vari‐
                     able  to  the cur‐
                     rent  location  of
                     the      insertion
                     point.    If   the
                     executed   command
                     changes the  value
                     of   READLINE_LINE
                     or READLINE_POINT,
                     those  new  values
                     will be  reflected
                     in   the   editing
                     state.
              -X     List    all    key
                     sequences bound to
                     shell commands and
                     the     associated
                     commands in a for‐
                     mat  that  can  be
                     reused as input.

              The  return  value  is  0
              unless   an  unrecognized
              option  is  given  or  an
              error occurred.

       break [n]
              Exit  from  within a for,
              while, until,  or  select
              loop.  If n is specified,
              break n levels.   n  must
              be  ≥ 1.  If n is greater
              than   the   number    of
              enclosing    loops,   all
              enclosing    loops    are
              exited.  The return value
              is  0  unless  n  is  not
              greater  than or equal to
              1.

       builtin   shell-builtin   [argu‐
       ments]
              Execute   the   specified
              shell builtin, passing it
              arguments, and return its
              exit  status.   This   is
              useful  when  defining  a
              function  whose  name  is
              the   same   as  a  shell
              builtin,  retaining   the
              functionality    of   the
              builtin within the  func‐
              tion.   The cd builtin is
              commonly  redefined  this
              way.   The  return status
              is false if shell-builtin
              is  not  a  shell builtin
              command.

       caller [expr]
              Returns  the  context  of
              any   active   subroutine
              call (a shell function or
              a  script  executed  with
              the    .    or     source
              builtins).  Without expr,
              caller displays the  line
              number  and  source file‐
              name of the current  sub‐
              routine  call.  If a non-
              negative integer is  sup‐
              plied   as  expr,  caller
              displays the line number,
              subroutine    name,   and
              source file corresponding
              to  that  position in the
              current  execution   call
              stack.  This extra infor‐
              mation may be  used,  for
              example, to print a stack
              trace.  The current frame
              is  frame  0.  The return
              value  is  0  unless  the
              shell  is not executing a
              subroutine call  or  expr
              does  not correspond to a
              valid  position  in   the
              call stack.

       cd [-L|[-P [-e]] [-@]] [dir]
              Change the current direc‐
              tory to dir.  if  dir  is
              not  supplied,  the value
              of the HOME  shell  vari‐
              able is the default.  Any
              additional arguments fol‐
              lowing  dir  are ignored.
              The    variable    CDPATH
              defines  the  search path
              for  the  directory  con‐
              taining  dir: each direc‐
              tory name  in  CDPATH  is
              searched for dir.  Alter‐
              native directory names in
              CDPATH are separated by a
              colon (:).  A null direc‐
              tory  name  in  CDPATH is
              the same as  the  current
              directory,  i.e.,  ``.''.
              If  dir  begins  with   a
              slash (/), then CDPATH is
              not used.  The -P  option
              causes   cd  to  use  the
              physical directory struc‐
              ture  by  resolving  sym‐
              bolic     links     while
              traversing dir and before
              processing  instances  of
              ..  in  dir (see also the
              -P  option  to  the   set
              builtin  command); the -L
              option  forces   symbolic
              links  to  be followed by
              resolving the link  after
              processing  instances  of
              .. in dir.  If .. appears
              in  dir,  it is processed
              by removing  the  immedi‐
              ately  previous  pathname
              component from dir,  back
              to  a slash or the begin‐
              ning of dir.  If  the  -e
              option  is  supplied with
              -P, and the current work‐
              ing  directory  cannot be
              successfully   determined
              after a successful direc‐
              tory  change,   cd   will
              return   an  unsuccessful
              status.  On systems  that
              support it, the -@ option
              presents   the   extended
              attributes     associated
              with a file as  a  direc‐
              tory.   An  argument of -
              is converted  to  $OLDPWD
              before    the   directory
              change is attempted.   If
              a   non-empty   directory
              name from CDPATH is used,
              or  if  -  is  the  first
              argument, and the  direc‐
              tory  change  is success‐
              ful, the  absolute  path‐
              name  of  the new working
              directory is  written  to
              the standard output.  The
              return value is  true  if
              the  directory  was  suc‐
              cessfully changed;  false
              otherwise.

       command [-pVv] command [arg ...]
              Run   command  with  args
              suppressing  the   normal
              shell   function  lookup.
              Only builtin commands  or
              commands   found  in  the
              PATH  are  executed.   If
              the  -p  option is given,
              the search for command is
              performed using a default
              value for  PATH  that  is
              guaranteed to find all of
              the  standard  utilities.
              If  either  the  -V or -v
              option  is  supplied,   a
              description of command is
              printed.  The  -v  option
              causes   a   single  word
              indicating the command or
              filename  used  to invoke
              command to be  displayed;
              the  -V option produces a
              more verbose description.
              If the -V or -v option is
              supplied, the exit status
              is   0   if  command  was
              found, and 1 if not.   If
              neither  option  is  sup‐
              plied   and   an    error
              occurred  or command can‐
              not be  found,  the  exit
              status  is  127.   Other‐
              wise, the exit status  of
              the  command  builtin  is
              the exit status  of  com‐
              mand.

       compgen [option] [word]
              Generate possible comple‐
              tion  matches  for   word
              according to the options,
              which may be  any  option
              accepted  by the complete
              builtin with  the  excep‐
              tion  of  -p  and -r, and
              write the matches to  the
              standard   output.   When
              using  the   -F   or   -C
              options,    the   various
              shell  variables  set  by
              the  programmable comple‐
              tion  facilities,   while
              available,  will not have
              useful values.

              The matches will be  gen‐
              erated in the same way as
              if the programmable  com‐
              pletion  code  had gener‐
              ated them directly from a
              completion  specification
              with the same flags.   If
              word  is  specified, only
              those completions  match‐
              ing  word  will  be  dis‐
              played.

              The return value is  true
              unless  an invalid option
              is   supplied,   or    no
              matches were generated.

       complete   [-abcdefgjksuv]   [-o
       comp-option] [-DE]  [-A  action]
       [-G  globpat]  [-W wordlist] [-F
       function] [-C command]
              [-X filterpat]  [-P  pre‐
              fix]   [-S  suffix]  name
              [name ...]
       complete -pr [-DE] [name ...]
              Specify how arguments  to
              each  name should be com‐
              pleted.  If the -p option
              is  supplied,  or  if  no
              options   are   supplied,
              existing completion spec‐
              ifications are printed in
              a way that allows them to
              be reused as input.   The
              -r  option removes a com‐
              pletion specification for
              each   name,  or,  if  no
              names are  supplied,  all
              completion     specifica‐
              tions.   The  -D   option
              indicates     that    the
              remaining   options   and
              actions  should  apply to
              the  ``default''  command
              completion; that is, com‐
              pletion  attempted  on  a
              command for which no com‐
              pletion  has   previously
              been   defined.   The  -E
              option indicates that the
              remaining   options   and
              actions should  apply  to
              ``empty'' command comple‐
              tion; that is, completion
              attempted   on   a  blank
              line.

              The process  of  applying
              these completion specifi‐
              cations when word comple‐
              tion   is   attempted  is
              described   above   under
              Programmable Completion.

              Other  options, if speci‐
              fied, have the  following
              meanings.   The arguments
              to the  -G,  -W,  and  -X
              options  (and,  if neces‐
              sary,  the  -P   and   -S
              options) should be quoted
              to  protect   them   from
              expansion before the com‐
              plete builtin is invoked.
              -o comp-option
                      The   comp-option
                      controls  several
                      aspects  of   the
                      compspec's behav‐
                      ior  beyond   the
                      simple generation
                      of   completions.
                      comp-option   may
                      be one of:
                      bashdefault
                              Perform
                              the  rest
                              of    the
                              default
                              bash com‐
                              pletions
                              if    the
                              compspec
                              generates
                              no
                              matches.
                      default Use read‐
                              line's
                              default
                              filename
                              comple‐
                              tion   if
                              the comp‐
                              spec gen‐
                              erates no
                              matches.
                      dirnames
                              Perform
                              directory
                              name com‐
                              pletion
                              if    the
                              compspec
                              generates
                              no
                              matches.
                      filenames
                              Tell
                              readline
                              that  the
                              compspec
                              generates
                              file‐
                              names, so
                              it    can
                              perform
                              any file‐
                              name-spe‐
                              cific
                              process‐
                              ing (like
                              adding  a
                              slash  to
                              directory
                              names,
                              quoting
                              special
                              charac‐
                              ters,  or
                              suppress‐
                              ing
                              trailing
                              spaces).
                              Intended
                              to     be
                              used with
                              shell
                              func‐
                              tions.
                      noquote Tell
                              readline
                              not    to
                              quote the
                              completed
                              words  if
                              they  are
                              filenames
                              (quoting
                              filenames
                              is    the
                              default).
                      nosort  Tell
                              readline
                              not    to
                              sort  the
                              list   of
                              possible
                              comple‐
                              tions
                              alphabet‐
                              ically.
                      nospace Tell
                              readline
                              not    to
                              append  a
                              space
                              (the
                              default)
                              to  words
                              completed
                              at    the
                              end    of
                              the line.
                      plusdirs
                              After any
                              matches
                              defined
                              by    the
                              compspec
                              are  gen‐
                              erated,
                              directory
                              name com‐
                              pletion
                              is
                              attempted
                              and   any
                              matches
                              are added
                              to    the
                              results
                              of    the
                              other
                              actions.
              -A action
                      The action may be
                      one  of  the fol‐
                      lowing to  gener‐
                      ate   a  list  of
                      possible  comple‐
                      tions:
                      alias   Alias
                              names.
                              May  also
                              be speci‐
                              fied   as
                              -a.
                      arrayvar
                              Array
                              variable
                              names.
                      binding Readline
                              key bind‐
                              ing
                              names.
                      builtin Names  of
                              shell
                              builtin
                              commands.
                              May  also
                              be speci‐
                              fied   as
                              -b.
                      command Command
                              names.
                              May  also
                              be speci‐
                              fied   as
                              -c.
                      directory
                              Directory
                              names.
                              May  also
                              be speci‐
                              fied   as
                              -d.
                      disabled
                              Names  of
                              disabled
                              shell
                              builtins.
                      enabled Names  of
                              enabled
                              shell
                              builtins.
                      export  Names  of
                              exported
                              shell
                              vari‐
                              ables.
                              May  also
                              be speci‐
                              fied   as
                              -e.
                      file    File
                              names.
                              May  also
                              be speci‐
                              fied   as
                              -f.
                      function
                              Names  of
                              shell
                              func‐
                              tions.
                      group   Group
                              names.
                              May  also
                              be speci‐
                              fied   as
                              -g.
                      helptopic
                              Help top‐
                              ics    as
                              accepted
                              by    the
                              help
                              builtin.
                      hostname
                              Host‐
                              names, as
                              taken
                              from  the
                              file
                              specified
                              by    the
                              HOSTFILE
                              shell
                              variable.
                      job     Job
                              names, if
                              job  con‐
                              trol   is
                              active.
                              May  also
                              be speci‐
                              fied   as
                              -j.
                      keyword Shell
                              reserved
                              words.
                              May  also
                              be speci‐
                              fied   as
                              -k.
                      running Names  of
                              running
                              jobs,  if
                              job  con‐
                              trol   is
                              active.
                      service Service
                              names.
                              May  also
                              be speci‐
                              fied   as
                              -s.
                      setopt  Valid
                              arguments
                              for   the
                              -o option
                              to    the
                              set
                              builtin.
                      shopt   Shell
                              option
                              names  as
                              accepted
                              by    the
                              shopt
                              builtin.
                      signal  Signal
                              names.
                      stopped Names  of
                              stopped
                              jobs,  if
                              job  con‐
                              trol   is
                              active.
                      user    User
                              names.
                              May  also
                              be speci‐
                              fied   as
                              -u.
                      variable
                              Names  of
                              all shell
                              vari‐
                              ables.
                              May  also
                              be speci‐
                              fied   as
                              -v.
              -C command
                      command  is  exe‐
                      cuted in  a  sub‐
                      shell    environ‐
                      ment,   and   its
                      output is used as
                      the possible com‐
                      pletions.
              -F function
                      The  shell  func‐
                      tion function  is
                      executed  in  the
                      current     shell
                      environment.
                      When the function
                      is  executed, the
                      first    argument
                      ($1)  is the name
                      of  the   command
                      whose   arguments
                      are  being   com‐
                      pleted,  the sec‐
                      ond argument ($2)
                      is the word being
                      completed,    and
                      the  third  argu‐
                      ment ($3) is  the
                      word    preceding
                      the  word   being
                      completed  on the
                      current   command
                      line.    When  it
                      finishes,     the
                      possible  comple‐
                      tions         are
                      retrieved    from
                      the value of  the
                      COMPREPLY   array
                      variable.
              -G globpat
                      The      pathname
                      expansion pattern
                      globpat        is
                      expanded  to gen‐
                      erate the  possi‐
                      ble completions.
              -P prefix
                      prefix  is  added
                      at the  beginning
                      of  each possible
                      completion  after
                      all other options
                      have         been
                      applied.
              -S suffix
                      suffix         is
                      appended to  each
                      possible  comple‐
                      tion  after   all
                      other     options
                      have         been
                      applied.
              -W wordlist
                      The  wordlist  is
                      split  using  the
                      characters in the
                      IFS special vari‐
                      able   as  delim‐
                      iters,  and  each
                      resultant word is
                      expanded.     The
                      possible  comple‐
                      tions   are   the
                      members   of  the
                      resultant    list
                      which  match  the
                      word  being  com‐
                      pleted.
              -X filterpat
                      filterpat   is  a
                      pattern  as  used
                      for      pathname
                      expansion.  It is
                      applied   to  the
                      list of  possible
                      completions  gen‐
                      erated   by   the
                      preceding options
                      and    arguments,
                      and  each comple‐
                      tion     matching
                      filterpat      is
                      removed from  the
                      list.   A leading
                      !  in   filterpat
                      negates  the pat‐
                      tern;   in   this
                      case, any comple‐
                      tion not matching
                      filterpat      is
                      removed.

              The return value is  true
              unless  an invalid option
              is  supplied,  an  option
              other  than  -p  or -r is
              supplied without  a  name
              argument,  an  attempt is
              made to remove a  comple‐
              tion  specification for a
              name for which no  speci‐
              fication  exists,  or  an
              error  occurs  adding   a
              completion specification.

       compopt  [-o  option]  [-DE] [+o
       option] [name]
              Modify completion options
              for  each  name according
              to the  options,  or  for
              the   currently-executing
              completion  if  no  names
              are   supplied.    If  no
              options are  given,  dis‐
              play    the    completion
              options for each name  or
              the  current  completion.
              The  possible  values  of
              option  are  those  valid
              for the complete  builtin
              described  above.  The -D
              option indicates that the
              remaining  options should
              apply to the  ``default''
              command  completion; that
              is, completion  attempted
              on a command for which no
              completion has previously
              been   defined.   The  -E
              option indicates that the
              remaining  options should
              apply to  ``empty''  com‐
              mand completion; that is,
              completion attempted on a
              blank line.

              The  return value is true
              unless an invalid  option
              is  supplied,  an attempt
              is  made  to  modify  the
              options  for  a  name for
              which no completion spec‐
              ification  exists,  or an
              output error occurs.

       continue [n]
              Resume the next iteration
              of   the  enclosing  for,
              while, until,  or  select
              loop.  If n is specified,
              resume at the nth enclos‐
              ing loop.  n must be ≥ 1.
              If n is greater than  the
              number    of    enclosing
              loops, the last enclosing
              loop  (the  ``top-level''
              loop)  is  resumed.   The
              return  value is 0 unless
              n is not greater than  or
              equal to 1.

       declare   [-aAfFgilnrtux]   [-p]
       [name[=value] ...]
       typeset   [-aAfFgilnrtux]   [-p]
       [name[=value] ...]
              Declare  variables and/or
              give them attributes.  If
              no  names  are given then
              display  the  values   of
              variables.  The -p option
              will     display      the
              attributes  and values of
              each name.   When  -p  is
              used with name arguments,
              additional options, other
              than   -f   and  -F,  are
              ignored.  When -p is sup‐
              plied  without name argu‐
              ments,  it  will  display
              the attributes and values
              of all  variables  having
              the  attributes specified
              by     the     additional
              options.    If  no  other
              options are supplied with
              -p,  declare will display
              the attributes and values
              of  all  shell variables.
              The   -f   option    will
              restrict  the  display to
              shell functions.  The  -F
              option  inhibits the dis‐
              play of function  defini‐
              tions;  only the function
              name and  attributes  are
              printed.  If the extdebug
              shell option  is  enabled
              using  shopt,  the source
              file name and line number
              where    each   name   is
              defined are displayed  as
              well.    The   -F  option
              implies   -f.    The   -g
              option  forces  variables
              to be created or modified
              at the global scope, even
              when declare is  executed
              in  a shell function.  It
              is ignored in  all  other
              cases.    The   following
              options can  be  used  to
              restrict  output to vari‐
              ables with the  specified
              attribute   or   to  give
              variables attributes:
              -a     Each  name  is  an
                     indexed      array
                     variable      (see
                     Arrays above).
              -A     Each  name  is  an
                     associative  array
                     variable      (see
                     Arrays above).
              -f     Use function names
                     only.
              -i     The   variable  is
                     treated   as    an
                     integer;    arith‐
                     metic   evaluation
                     (see    ARITHMETIC
                     EVALUATION  above)
                     is  performed when
                     the  variable   is
                     assigned a value.
              -l     When  the variable
                     is   assigned    a
                     value,  all upper-
                     case    characters
                     are  converted  to
                     lower-case.    The
                     upper-case
                     attribute is  dis‐
                     abled.
              -n     Give each name the
                     nameref attribute,
                     making  it  a name
                     reference       to
                     another  variable.
                     That  other  vari‐
                     able is defined by
                     the value of name.
                     All    references,
                     assignments,   and
                     attribute  modifi‐
                     cations  to  name,
                     except those using
                     or changing the -n
                     attribute  itself,
                     are  performed  on
                     the  variable ref‐
                     erenced by  name's
                     value.         The
                     nameref  attribute
                     cannot  be applied
                     to   array   vari‐
                     ables.
              -r     Make  names  read‐
                     only.  These names
                     cannot   then   be
                     assigned values by
                     subsequent assign‐
                     ment statements or
                     unset.
              -t     Give each name the
                     trace   attribute.
                     Traced   functions
                     inherit the  DEBUG
                     and  RETURN  traps
                     from  the  calling
                     shell.   The trace
                     attribute  has  no
                     special    meaning
                     for variables.
              -u     When the  variable
                     is    assigned   a
                     value, all  lower-
                     case    characters
                     are  converted  to
                     upper-case.    The
                     lower-case
                     attribute  is dis‐
                     abled.
              -x     Mark   names   for
                     export  to  subse‐
                     quent commands via
                     the environment.

              Using  `+' instead of `-'
              turns off  the  attribute
              instead,  with the excep‐
              tions that +a may not  be
              used  to destroy an array
              variable and +r will  not
              remove    the    readonly
              attribute.  When used  in
              a  function,  declare and
              typeset  make  each  name
              local,  as with the local
              command,  unless  the  -g
              option is supplied.  If a
              variable name is followed
              by  =value,  the value of
              the variable  is  set  to
              value.   When using -a or
              -A   and   the   compound
              assignment syntax to cre‐
              ate   array    variables,
              additional  attributes do
              not  take  effect   until
              subsequent   assignments.
              The  return  value  is  0
              unless  an invalid option
              is    encountered,     an
              attempt is made to define
              a  function  using   ``-f
              foo=bar'',  an attempt is
              made to assign a value to
              a  readonly  variable, an
              attempt is made to assign
              a value to an array vari‐
              able  without  using  the
              compound  assignment syn‐
              tax (see  Arrays  above),
              one of the names is not a
              valid   shell    variable
              name,  an attempt is made
              to turn off readonly sta‐
              tus  for a readonly vari‐
              able, an attempt is  made
              to  turn off array status
              for an array variable, or
              an  attempt  is  made  to
              display  a   non-existent
              function with -f.

       dirs [-clpv] [+n] [-n]
              Without options, displays
              the  list  of   currently
              remembered   directories.
              The default display is on
              a single line with direc‐
              tory names  separated  by
              spaces.   Directories are
              added to  the  list  with
              the  pushd  command;  the
              popd   command    removes
              entries  from  the  list.
              The current directory  is
              always  the  first direc‐
              tory in the stack.
              -c     Clears the  direc‐
                     tory    stack   by
                     deleting  all   of
                     the entries.
              -l     Produces a listing
                     using  full  path‐
                     names; the default
                     listing     format
                     uses  a  tilde  to
                     denote  the   home
                     directory.
              -p     Print  the  direc‐
                     tory  stack   with
                     one    entry   per
                     line.
              -v     Print  the  direc‐
                     tory   stack  with
                     one   entry    per
                     line,    prefixing
                     each  entry   with
                     its  index  in the
                     stack.
              +n     Displays  the  nth
                     entry     counting
                     from the  left  of
                     the  list shown by
                     dirs when  invoked
                     without   options,
                     starting      with
                     zero.
              -n     Displays  the  nth
                     entry     counting
                     from  the right of
                     the list shown  by
                     dirs  when invoked
                     without   options,
                     starting      with
                     zero.

              The  return  value  is  0
              unless  an invalid option
              is supplied or n  indexes
              beyond  the  end  of  the
              directory stack.

       disown [-ar] [-h] [jobspec ... |
       pid ... ]
              Without  options,  remove
              each jobspec from the ta‐
              ble  of  active jobs.  If
              jobspec is  not  present,
              and  neither  the  -a nor
              the  -r  option  is  sup‐
              plied, the current job is
              used.  If the  -h  option
              is given, each jobspec is
              not removed from the  ta‐
              ble,  but  is  marked  so
              that SIGHUP is  not  sent
              to  the  job if the shell
              receives a SIGHUP.  If no
              jobspec  is supplied, the
              -a option means to remove
              or  mark all jobs; the -r
              option without a  jobspec
              argument restricts opera‐
              tion  to  running   jobs.
              The  return  value  is  0
              unless a jobspec does not
              specify a valid job.

       echo [-neE] [arg ...]
              Output  the  args,  sepa‐
              rated by spaces, followed
              by a newline.  The return
              status  is  0  unless   a
              write  error  occurs.  If
              -n  is   specified,   the
              trailing  newline is sup‐
              pressed.    If   the   -e
              option  is  given, inter‐
              pretation of the  follow‐
              ing     backslash-escaped
              characters  is   enabled.
              The  -E  option  disables
              the   interpretation   of
              these  escape characters,
              even  on  systems   where
              they  are  interpreted by
              default.   The   xpg_echo
              shell  option may be used
              to dynamically  determine
              whether   or   not   echo
              expands   these    escape
              characters   by  default.
              echo does  not  interpret
              --  to  mean  the  end of
              options.  echo interprets
              the    following   escape
              sequences:
              \a     alert (bell)
              \b     backspace
              \c     suppress   further
                     output
              \e
              \E     an  escape charac‐
                     ter
              \f     form feed
              \n     new line
              \r     carriage return
              \t     horizontal tab
              \v     vertical tab
              \\     backslash
              \0nnn  the      eight-bit
                     character    whose
                     value is the octal
                     value nnn (zero to
                     three  octal  dig‐
                     its)
              \xHH   the      eight-bit
                     character    whose
                     value is the hexa‐
                     decimal  value  HH
                     (one  or  two  hex
                     digits)
              \uHHHH the        Unicode
                     (ISO/IEC    10646)
                     character    whose
                     value is the hexa‐
                     decimal value HHHH
                     (one  to  four hex
                     digits)
              \UHHHHHHHH
                     the        Unicode
                     (ISO/IEC    10646)
                     character    whose
                     value is the hexa‐
                     decimal value HHH‐
                     HHHHH    (one   to
                     eight hex digits)

       enable [-a]  [-dnps]  [-f  file‐
       name] [name ...]
              Enable     and    disable
              builtin  shell  commands.
              Disabling    a    builtin
              allows  a  disk   command
              which  has  the same name
              as a shell builtin to  be
              executed without specify‐
              ing a full pathname, even
              though the shell normally
              searches   for   builtins
              before disk commands.  If
              -n is used, each name  is
              disabled;      otherwise,
              names are  enabled.   For
              example,  to use the test
              binary found via the PATH
              instead   of   the  shell
              builtin   version,    run
              ``enable  -n test''.  The
              -f option means  to  load
              the  new  builtin command
              name from  shared  object
              filename, on systems that
              support dynamic  loading.
              The -d option will delete
              a   builtin    previously
              loaded  with  -f.   If no
              name arguments are given,
              or  if  the  -p option is
              supplied, a list of shell
              builtins    is   printed.
              With  no   other   option
              arguments,  the list con‐
              sists  of   all   enabled
              shell builtins.  If -n is
              supplied,  only  disabled
              builtins are printed.  If
              -a is supplied, the  list
              printed    includes   all
              builtins, with an indica‐
              tion  of  whether  or not
              each is enabled.   If  -s
              is  supplied,  the output
              is  restricted   to   the
              POSIX  special  builtins.
              The  return  value  is  0
              unless  a  name  is not a
              shell builtin or there is
              an  error  loading  a new
              builtin  from  a   shared
              object.

       eval [arg ...]
              The  args  are  read  and
              concatenated     together
              into  a  single  command.
              This command is then read
              and   executed   by   the
              shell, and its exit  sta‐
              tus  is  returned  as the
              value of eval.  If  there
              are no args, or only null
              arguments,  eval  returns
              0.

       exec  [-cl]  [-a  name] [command
       [arguments]]
              If command is  specified,
              it  replaces  the  shell.
              No new  process  is  cre‐
              ated.     The   arguments
              become the  arguments  to
              command.    If   the   -l
              option is  supplied,  the
              shell  places  a  dash at
              the  beginning   of   the
              zeroth argument passed to
              command.   This  is  what
              login(1)  does.   The  -c
              option causes command  to
              be executed with an empty
              environment.   If  -a  is
              supplied,    the    shell
              passes name as the zeroth
              argument  to the executed
              command.  If command can‐
              not  be executed for some
              reason, a non-interactive
              shell  exits,  unless the
              execfail shell option  is
              enabled.   In  that case,
              it returns  failure.   An
              interactive shell returns
              failure if the file  can‐
              not be executed.  If com‐
              mand  is  not  specified,
              any   redirections   take
              effect  in  the   current
              shell,   and  the  return
              status is 0.  If there is
              a  redirection error, the
              return status is 1.

       exit [n]
              Cause the shell  to  exit
              with a status of n.  If n
              is omitted, the exit sta‐
              tus  is  that of the last
              command executed.  A trap
              on   EXIT   is   executed
              before the  shell  termi‐
              nates.

       export [-fn] [name[=word]] ...
       export -p
              The  supplied  names  are
              marked   for    automatic
              export to the environment
              of subsequently  executed
              commands.    If   the  -f
              option  is   given,   the
              names refer to functions.
              If no names are given, or
              if  the -p option is sup‐
              plied, a list of names of
              all exported variables is
              printed.  The  -n  option
              causes  the  export prop‐
              erty to be  removed  from
              each name.  If a variable
              name   is   followed   by
              =word,  the  value of the
              variable is set to  word.
              export  returns  an  exit
              status  of  0  unless  an
              invalid option is encoun‐
              tered, one of  the  names
              is   not  a  valid  shell
              variable name, or  -f  is
              supplied with a name that
              is not a function.

       fc  [-e  ename]  [-lnr]  [first]
       [last]
       fc -s [pat=rep] [cmd]
              The  first form selects a
              range  of  commands  from
              first  to  last  from the
              history list and displays
              or  edits and re-executes
              them.  First and last may
              be  specified as a string
              (to locate the last  com‐
              mand  beginning with that
              string) or  as  a  number
              (an  index  into the his‐
              tory list, where a  nega‐
              tive number is used as an
              offset from  the  current
              command number).  If last
              is not  specified  it  is
              set  to  the current com‐
              mand for listing (so that
              ``fc  -l -10'' prints the
              last 10 commands) and  to
              first    otherwise.    If
              first is not specified it
              is  set  to  the previous
              command for  editing  and
              -16 for listing.

              The  -n option suppresses
              the command numbers  when
              listing.   The  -r option
              reverses the order of the
              commands.    If   the  -l
              option is given, the com‐
              mands are listed on stan‐
              dard output.   Otherwise,
              the editor given by ename
              is invoked on a file con‐
              taining  those  commands.
              If ename  is  not  given,
              the  value  of the FCEDIT
              variable is used, and the
              value of EDITOR if FCEDIT
              is not set.   If  neither
              variable  is  set,  vi is
              used.   When  editing  is
              complete, the edited com‐
              mands are echoed and exe‐
              cuted.

              In  the second form, com‐
              mand is re-executed after
              each  instance  of pat is
              replaced by rep.  Command
              is intepreted the same as
              first  above.   A  useful
              alias to use with this is
              ``r="fc  -s"'',  so  that
              typing  ``r cc'' runs the
              last  command   beginning
              with  ``cc''  and  typing
              ``r''   re-executes   the
              last command.

              If   the  first  form  is
              used, the return value is
              0   unless   an   invalid
              option is encountered  or
              first   or  last  specify
              history  lines   out   of
              range.   If the -e option
              is supplied,  the  return
              value is the value of the
              last command executed  or
              failure   if   an   error
              occurs with the temporary
              file of commands.  If the
              second form is used,  the
              return  status is that of
              the command  re-executed,
              unless cmd does not spec‐
              ify a valid history line,
              in  which case fc returns
              failure.

       fg [jobspec]
              Resume  jobspec  in   the
              foreground,  and  make it
              the current job.  If job‐
              spec  is not present, the
              shell's  notion  of   the
              current job is used.  The
              return value is  that  of
              the  command  placed into
              the foreground, or  fail‐
              ure  if run when job con‐
              trol is disabled or, when
              run   with   job  control
              enabled, if jobspec  does
              not  specify  a valid job
              or  jobspec  specifies  a
              job   that   was  started
              without job control.

       getopts optstring name [args]
              getopts is used by  shell
              procedures to parse posi‐
              tional parameters.   opt‐
              string    contains    the
              option characters  to  be
              recognized;  if a charac‐
              ter  is  followed  by   a
              colon,   the   option  is
              expected to have an argu‐
              ment,   which  should  be
              separated  from   it   by
              white  space.   The colon
              and question mark charac‐
              ters  may  not be used as
              option characters.   Each
              time   it   is   invoked,
              getopts places  the  next
              option in the shell vari‐
              able  name,  initializing
              name   if   it  does  not
              exist, and the  index  of
              the  next  argument to be
              processed into the  vari‐
              able  OPTIND.   OPTIND is
              initialized  to  1   each
              time the shell or a shell
              script is invoked.   When
              an   option  requires  an
              argument, getopts  places
              that  argument  into  the
              variable   OPTARG.    The
              shell   does   not  reset
              OPTIND automatically;  it
              must  be  manually  reset
              between multiple calls to
              getopts  within  the same
              shell invocation if a new
              set  of  parameters is to
              be used.

              When the end  of  options
              is  encountered,  getopts
              exits with a return value
              greater     than    zero.
              OPTIND  is  set  to   the
              index  of  the first non-
              option argument, and name
              is set to ?.

              getopts  normally  parses
              the  positional   parame‐
              ters,  but  if more argu‐
              ments are given in  args,
              getopts    parses   those
              instead.

              getopts can report errors
              in   two  ways.   If  the
              first character  of  opt‐
              string is a colon, silent
              error reporting is  used.
              In    normal   operation,
              diagnostic  messages  are
              printed    when   invalid
              options or missing option
              arguments   are   encoun‐
              tered.  If  the  variable
              OPTERR  is  set  to 0, no
              error  messages  will  be
              displayed,  even  if  the
              first character  of  opt‐
              string is not a colon.

              If  an  invalid option is
              seen,  getopts  places  ?
              into  name  and,  if  not
              silent, prints  an  error
              message     and    unsets
              OPTARG.   If  getopts  is
              silent,  the option char‐
              acter found is placed  in
              OPTARG  and no diagnostic
              message is printed.

              If a required argument is
              not found, and getopts is
              not  silent,  a  question
              mark  (?)  is  placed  in
              name,  OPTARG  is  unset,
              and  a diagnostic message
              is printed.   If  getopts
              is  silent,  then a colon
              (:) is placed in name and
              OPTARG   is  set  to  the
              option character found.

              getopts returns  true  if
              an  option,  specified or
              unspecified,  is   found.
              It  returns  false if the
              end of options is encoun‐
              tered or an error occurs.

       hash  [-lr]  [-p filename] [-dt]
       [name]
              Each   time    hash    is
              invoked,  the  full path‐
              name of the command  name
              is  determined by search‐
              ing  the  directories  in
              $PATH   and   remembered.
              Any previously-remembered
              pathname   is  discarded.
              If the -p option is  sup‐
              plied,  no path search is
              performed,  and  filename
              is used as the full file‐
              name of the command.  The
              -r   option   causes  the
              shell   to   forget   all
              remembered     locations.
              The -d option causes  the
              shell   to   forget   the
              remembered  location   of
              each  name.   If  the  -t
              option is  supplied,  the
              full  pathname  to  which
              each name corresponds  is
              printed.    If   multiple
              name arguments  are  sup‐
              plied  with  -t, the name
              is  printed  before   the
              hashed   full   pathname.
              The -l option causes out‐
              put  to be displayed in a
              format that may be reused
              as  input.   If  no argu‐
              ments are  given,  or  if
              only   -l   is  supplied,
              information about  remem‐
              bered     commands     is
              printed.  The return sta‐
              tus is true unless a name
              is  not   found   or   an
              invalid  option  is  sup‐
              plied.

       help [-dms] [pattern]
              Display helpful  informa‐
              tion  about  builtin com‐
              mands.   If  pattern   is
              specified,   help   gives
              detailed help on all com‐
              mands  matching  pattern;
              otherwise  help  for  all
              the  builtins  and  shell
              control   structures   is
              printed.
              -d     Display   a  short
                     description     of
                     each pattern
              -m     Display        the
                     description     of
                     each  pattern in a
                     manpage-like  for‐
                     mat
              -s     Display   only   a
                     short usage synop‐
                     sis  for each pat‐
                     tern

              The return  status  is  0
              unless no command matches
              pattern.

       history [n]
       history -c
       history -d offset
       history -anrw [filename]
       history -p arg [arg ...]
       history -s arg [arg ...]
              With no options,  display
              the  command history list
              with line numbers.  Lines
              listed with a * have been
              modified.  An argument of
              n  lists  only the last n
              lines.   If   the   shell
              variable   HISTTIMEFORMAT
              is set and not  null,  it
              is   used   as  a  format
              string for strftime(3) to
              display  the  time  stamp
              associated with each dis‐
              played history entry.  No
              intervening   blank    is
              printed  between the for‐
              matted time stamp and the
              history  line.   If file‐
              name is supplied,  it  is
              used  as  the name of the
              history file; if not, the
              value   of   HISTFILE  is
              used.  Options,  if  sup‐
              plied, have the following
              meanings:
              -c     Clear the  history
                     list  by  deleting
                     all the entries.
              -d offset
                     Delete the history
                     entry  at position
                     offset.
              -a     Append the ``new''
                     history  lines  to
                     the history  file.
                     These  are history
                     lines      entered
                     since  the  begin‐
                     ning of  the  cur‐
                     rent bash session,
                     but  not   already
                     appended   to  the
                     history file.
              -n     Read  the  history
                     lines  not already
                     read from the his‐
                     tory file into the
                     current    history
                     list.   These  are
                     lines appended  to
                     the  history  file
                     since  the  begin‐
                     ning  of  the cur‐
                     rent bash session.
              -r     Read the  contents
                     of   the   history
                     file  and   append
                     them  to  the cur‐
                     rent history list.
              -w     Write the  current
                     history   list  to
                     the history  file,
                     overwriting    the
                     history     file's
                     contents.
              -p     Perform    history
                     substitution    on
                     the following args
                     and  display   the
                     result    on   the
                     standard   output.
                     Does not store the
                     results   in   the
                     history      list.
                     Each arg  must  be
                     quoted  to disable
                     normal     history
                     expansion.
              -s     Store  the args in
                     the  history  list
                     as a single entry.
                     The  last  command
                     in   the   history
                     list  is   removed
                     before   the  args
                     are added.

              If   the   HISTTIMEFORMAT
              variable is set, the time
              stamp information associ‐
              ated  with  each  history
              entry is written  to  the
              history file, marked with
              the history comment char‐
              acter.   When the history
              file   is   read,   lines
              beginning  with  the his‐
              tory  comment   character
              followed immediately by a
              digit are interpreted  as
              timestamps  for  the fol‐
              lowing   history   entry.
              The  return  value  is  0
              unless an invalid  option
              is  encountered, an error
              occurs while  reading  or
              writing the history file,
              an invalid offset is sup‐
              plied  as  an argument to
              -d, or the history expan‐
              sion supplied as an argu‐
              ment to -p fails.

       jobs [-lnprs] [ jobspec ... ]
       jobs -x command [ args ... ]
              The first form lists  the
              active jobs.  The options
              have the following  mean‐
              ings:
              -l     List  process  IDs
                     in addition to the
                     normal    informa‐
                     tion.
              -n     Display   informa‐
                     tion   only  about
                     jobs   that   have
                     changed     status
                     since the user was
                     last  notified  of
                     their status.
              -p     List   only    the
                     process  ID of the
                     job's      process
                     group leader.
              -r     Display  only run‐
                     ning jobs.
              -s     Display       only
                     stopped jobs.

              If jobspec is given, out‐
              put  is   restricted   to
              information   about  that
              job.  The  return  status
              is  0  unless  an invalid
              option is encountered  or
              an   invalid  jobspec  is
              supplied.

              If the -x option is  sup‐
              plied,  jobs replaces any
              jobspec found in  command
              or  args  with the corre‐
              sponding  process   group
              ID,  and executes command
              passing it args,  return‐
              ing its exit status.

       kill  [-s  sigspec | -n signum |
       -sigspec] [pid | jobspec] ...
       kill -l|-L [sigspec |  exit_sta‐
       tus]
              Send  the signal named by
              sigspec or signum to  the
              processes named by pid or
              jobspec.    sigspec    is
              either a case-insensitive
              signal   name   such   as
              SIGKILL  (with or without
              the SIG prefix) or a sig‐
              nal  number;  signum is a
              signal    number.      If
              sigspec  is  not present,
              then SIGTERM is  assumed.
              An  argument  of -l lists
              the signal names.  If any
              arguments   are  supplied
              when  -l  is  given,  the
              names of the signals cor‐
              responding to  the  argu‐
              ments are listed, and the
              return status is 0.   The
              exit_status  argument  to
              -l is a number specifying
              either a signal number or
              the  exit  status  of   a
              process  terminated  by a
              signal.  The -L option is
              equivalent  to  -l.  kill
              returns true if at  least
              one  signal  was success‐
              fully sent, or  false  if
              an  error  occurs  or  an
              invalid option is encoun‐
              tered.

       let arg [arg ...]
              Each arg is an arithmetic
              expression to  be  evalu‐
              ated    (see   ARITHMETIC
              EVALUATION  above).    If
              the last arg evaluates to
              0, let returns  1;  0  is
              returned otherwise.

       local [option] [name[=value] ...
       | - ]
              For  each   argument,   a
              local variable named name
              is created, and  assigned
              value.  The option can be
              any   of   the    options
              accepted    by   declare.
              When local is used within
              a function, it causes the
              variable name to  have  a
              visible  scope restricted
              to that function and  its
              children.   If name is -,
              the set of shell  options
              is   made  local  to  the
              function in  which  local
              is invoked: shell options
              changed  using  the   set
              builtin  inside the func‐
              tion  are   restored   to
              their   original   values
              when     the     function
              returns.   With  no oper‐
              ands, local writes a list
              of local variables to the
              standard output.   It  is
              an  error  to  use  local
              when not within  a  func‐
              tion.   The return status
              is 0 unless local is used
              outside  a  function,  an
              invalid name is supplied,
              or  name  is  a  readonly
              variable.

       logout Exit a login shell.

       mapfile [-d  delim]  [-n  count]
       [-O  origin] [-s count] [-t] [-u
       fd] [-C callback]  [-c  quantum]
       [array]
       readarray  [-d delim] [-n count]
       [-O origin] [-s count] [-t]  [-u
       fd]  [-C  callback] [-c quantum]
       [array]
              Read lines from the stan‐
              dard   input   into   the
              indexed  array   variable
              array,   or   from   file
              descriptor fd if  the  -u
              option  is supplied.  The
              variable MAPFILE  is  the
              default  array.  Options,
              if  supplied,  have   the
              following meanings:
              -d     The  first charac‐
                     ter  of  delim  is
                     used  to terminate
                     each  input  line,
                     rather  than  new‐
                     line.
              -n     Copy at most count
                     lines.   If  count
                     is  0,  all  lines
                     are copied.
              -O     Begin assigning to
                     array   at   index
                     origin.        The
                     default  index  is
                     0.
              -s     Discard  the first
                     count lines read.
              -t     Remove a  trailing
                     delim     (default
                     newline) from each
                     line read.
              -u     Read   lines  from
                     file descriptor fd
                     instead   of   the
                     standard input.
              -C     Evaluate  callback
                     each  time quantum
                     lines  are   read.
                     The    -c   option
                     specifies quantum.
              -c     Specify the number
                     of    lines   read
                     between each  call
                     to callback.

              If  -C is specified with‐
              out -c, the default quan‐
              tum  is 5000.  When call‐
              back is evaluated, it  is
              supplied the index of the
              next array element to  be
              assigned  and the line to
              be assigned to that  ele‐
              ment  as additional argu‐
              ments.  callback is eval‐
              uated  after  the line is
              read but before the array
              element is assigned.

              If  not  supplied with an
              explicit origin,  mapfile
              will  clear  array before
              assigning to it.

              mapfile returns  success‐
              fully  unless  an invalid
              option or option argument
              is   supplied,  array  is
              invalid or  unassignable,
              or  if  array  is  not an
              indexed array.

       popd [-n] [+n] [-n]
              Removes entries from  the
              directory stack.  With no
              arguments,  removes   the
              top  directory  from  the
              stack, and performs a  cd
              to the new top directory.
              Arguments,  if  supplied,
              have  the following mean‐
              ings:
              -n     Suppresses     the
                     normal  change  of
                     directory     when
                     removing  directo‐
                     ries   from    the
                     stack,   so   that
                     only the stack  is
                     manipulated.
              +n     Removes   the  nth
                     entry     counting
                     from  the  left of
                     the list shown  by
                     dirs,     starting
                     with  zero.    For
                     example:    ``popd
                     +0''  removes  the
                     first   directory,
                     ``popd  +1''   the
                     second.
              -n     Removes   the  nth
                     entry     counting
                     from  the right of
                     the list shown  by
                     dirs,     starting
                     with  zero.    For
                     example:    ``popd
                     -0''  removes  the
                     last    directory,
                     ``popd  -1''   the
                     next to last.

              If  the  popd  command is
              successful,  a  dirs   is
              performed  as  well,  and
              the return status  is  0.
              popd  returns false if an
              invalid option is encoun‐
              tered,    the   directory
              stack is  empty,  a  non-
              existent  directory stack
              entry  is  specified,  or
              the    directory   change
              fails.

       printf [-v  var]  format  [argu‐
       ments]
              Write the formatted argu‐
              ments  to  the   standard
              output  under the control
              of the  format.   The  -v
              option  causes the output
              to  be  assigned  to  the
              variable  var rather than
              being  printed   to   the
              standard output.

              The format is a character
              string   which   contains
              three  types  of objects:
              plain  characters,  which
              are   simply   copied  to
              standard output,  charac‐
              ter   escape   sequences,
              which are  converted  and
              copied  to  the  standard
              output, and format speci‐
              fications,  each of which
              causes  printing  of  the
              next successive argument.
              In addition to the  stan‐
              dard   printf(1)   format
              specifications,    printf
              interprets  the following
              extensions:
              %b     causes  printf  to
                     expand   backslash
                     escape   sequences
                     in the correspond‐
                     ing  argument   in
                     the  same  way  as
                     echo -e.
              %q     causes  printf  to
                     output  the corre‐
                     sponding  argument
                     in  a  format that
                     can be  reused  as
                     shell input.
              %(datefmt)T
                     causes  printf  to
                     output  the  date-
                     time        string
                     resulting     from
                     using datefmt as a
                     format string  for
                     strftime(3).   The
                     corresponding
                     argument   is   an
                     integer represent‐
                     ing  the number of
                     seconds since  the
                     epoch.   Two  spe‐
                     cial argument val‐
                     ues  may  be used:
                     -1 represents  the
                     current  time, and
                     -2 represents  the
                     time the shell was
                     invoked.   If   no
                     argument is speci‐
                     fied,   conversion
                     behaves  as  if -1
                     had  been   given.
                     This  is an excep‐
                     tion to the  usual
                     printf behavior.

              Arguments  to  non-string
              format   specifiers   are
              treated  as  C constants,
              except  that  a   leading
              plus  or  minus  sign  is
              allowed, and if the lead‐
              ing character is a single
              or  double   quote,   the
              value  is the ASCII value
              of the following  charac‐
              ter.

              The  format  is reused as
              necessary to consume  all
              of the arguments.  If the
              format   requires    more
              arguments  than  are sup‐
              plied, the  extra  format
              specifications  behave as
              if a zero value  or  null
              string,  as  appropriate,
              had been  supplied.   The
              return  value  is zero on
              success,   non-zero    on
              failure.

       pushd [-n] [+n] [-n]
       pushd [-n] [dir]
              Adds  a  directory to the
              top  of   the   directory
              stack,   or  rotates  the
              stack, making the new top
              of  the stack the current
              working directory.   With
              no    arguments,    pushd
              exchanges  the  top   two
              directories  and  returns
              0, unless  the  directory
              stack  is  empty.   Argu‐
              ments, if supplied,  have
              the following meanings:
              -n     Suppresses     the
                     normal  change  of
                     directory     when
                     rotating or adding
                     directories to the
                     stack,   so   that
                     only  the stack is
                     manipulated.
              +n     Rotates the  stack
                     so  that  the  nth
                     directory  (count‐
                     ing  from the left
                     of the list  shown
                     by  dirs, starting
                     with zero)  is  at
                     the top.
              -n     Rotates  the stack
                     so  that  the  nth
                     directory  (count‐
                     ing from the right
                     of  the list shown
                     by dirs,  starting
                     with  zero)  is at
                     the top.
              dir    Adds  dir  to  the
                     directory stack at
                     the top, making it
                     the   new  current
                     working  directory
                     as  if it had been
                     supplied  as   the
                     argument to the cd
                     builtin.

              If the pushd  command  is
              successful,   a  dirs  is
              performed  as  well.   If
              the  first  form is used,
              pushd  returns  0  unless
              the   cd  to  dir  fails.
              With  the  second   form,
              pushd  returns  0  unless
              the  directory  stack  is
              empty,   a   non-existent
              directory  stack  element
              is   specified,   or  the
              directory change  to  the
              specified   new   current
              directory fails.

       pwd [-LP]
              Print the absolute  path‐
              name of the current work‐
              ing directory.  The path‐
              name  printed contains no
              symbolic links if the  -P
              option is supplied or the
              -o physical option to the
              set  builtin  command  is
              enabled.    If   the   -L
              option is used, the path‐
              name printed may  contain
              symbolic    links.    The
              return status is 0 unless
              an   error  occurs  while
              reading the name  of  the
              current  directory  or an
              invalid  option  is  sup‐
              plied.

       read   [-ers]   [-a  aname]  [-d
       delim] [-i text] [-n nchars] [-N
       nchars] [-p prompt] [-t timeout]
       [-u fd] [name ...]
              One line is read from the
              standard  input,  or from
              the  file  descriptor  fd
              supplied  as  an argument
              to the -u  option,  split
              into  words  as described
              above under  Word  Split‐
              ting,  and the first word
              is assigned to the  first
              name,  the second word to
              the second name,  and  so
              on.   If  there  are more
              words  than  names,   the
              remaining words and their
              intervening    delimiters
              are  assigned to the last
              name.  If there are fewer
              words read from the input
              stream  than  names,  the
              remaining    names    are
              assigned  empty   values.
              The characters in IFS are
              used to  split  the  line
              into words using the same
              rules the shell uses  for
              expansion      (described
              above under  Word  Split‐
              ting).    The   backslash
              character (\) may be used
              to   remove  any  special
              meaning  for   the   next
              character  read  and  for
              line        continuation.
              Options,   if   supplied,
              have the following  mean‐
              ings:
              -a aname
                     The    words   are
                     assigned        to
                     sequential indices
                     of the array vari‐
                     able aname, start‐
                     ing at  0.   aname
                     is   unset  before
                     any new values are
                     assigned.    Other
                     name arguments are
                     ignored.
              -d delim
                     The  first charac‐
                     ter  of  delim  is
                     used  to terminate
                     the  input   line,
                     rather  than  new‐
                     line.
              -e     If  the   standard
                     input   is  coming
                     from  a  terminal,
                     readline      (see
                     READLINE above) is
                     used to obtain the
                     line.     Readline
                     uses  the  current
                     (or  default,   if
                     line  editing  was
                     not     previously
                     active)    editing
                     settings.
              -i text
                     If   readline   is
                     being used to read
                     the line, text  is
                     placed   into  the
                     editing     buffer
                     before     editing
                     begins.
              -n nchars
                     read returns after
                     reading     nchars
                     characters  rather
                     than waiting for a
                     complete  line  of
                     input,  but honors
                     a   delimiter   if
                     fewer  than nchars
                     characters     are
                     read   before  the
                     delimiter.
              -N nchars
                     read returns after
                     reading    exactly
                     nchars  characters
                     rather  than wait‐
                     ing for a complete
                     line   of   input,
                     unless   EOF    is
                     encountered     or
                     read  times   out.
                     Delimiter  charac‐
                     ters   encountered
                     in  the  input are
                     not  treated  spe‐
                     cially  and do not
                     cause   read    to
                     return       until
                     nchars  characters
                     are   read.    The
                     result   is    not
                     split on the char‐
                     acters in IFS; the
                     intent is that the
                     variable        is
                     assigned   exactly
                     the     characters
                     read   (with   the
                     exception of back‐
                     slash;  see the -r
                     option below).
              -p prompt
                     Display prompt  on
                     standard    error,
                     without a trailing
                     newline,    before
                     attempting to read
                     any   input.   The
                     prompt   is   dis‐
                     played   only   if
                     input  is   coming
                     from a terminal.
              -r     Backslash does not
                     act as  an  escape
                     character.     The
                     backslash is  con‐
                     sidered to be part
                     of the  line.   In
                     particular,      a
                     backslash-newline
                     pair  may  not  be
                     used  as  a   line
                     continuation.
              -s     Silent  mode.   If
                     input  is   coming
                     from  a  terminal,
                     characters are not
                     echoed.
              -t timeout
                     Cause read to time
                     out   and   return
                     failure  if a com‐
                     plete   line    of
                     input (or a speci‐
                     fied   number   of
                     characters) is not
                     read within  time‐
                     out       seconds.
                     timeout may  be  a
                     decimal     number
                     with a  fractional
                     portion  following
                     the decimal point.
                     This   option   is
                     only effective  if
                     read   is  reading
                     input from a  ter‐
                     minal,   pipe,  or
                     other      special
                     file;  it  has  no
                     effect when  read‐
                     ing  from  regular
                     files.   If   read
                     times   out,  read
                     saves any  partial
                     input   read  into
                     the      specified
                     variable name.  If
                     timeout is 0, read
                     returns    immedi‐
                     ately,     without
                     trying to read any
                     data.   The   exit
                     status   is  0  if
                     input is available
                     on  the  specified
                     file   descriptor,
                     non-zero    other‐
                     wise.   The   exit
                     status  is greater
                     than  128  if  the
                     timeout         is
                     exceeded.
              -u fd  Read  input   from
                     file    descriptor
                     fd.

              If no names are supplied,
              the line read is assigned
              to  the  variable  REPLY.
              The  exit status is zero,
              unless   end-of-file   is
              encountered,  read  times
              out (in  which  case  the
              status  is  greater  than
              128), a variable  assign‐
              ment   error   (such   as
              assigning to  a  readonly
              variable)  occurs,  or an
              invalid  file  descriptor
              is  supplied as the argu‐
              ment to -u.

       readonly       [-aAf]       [-p]
       [name[=word] ...]
              The   given   names   are
              marked readonly; the val‐
              ues  of  these  names may
              not be changed by  subse‐
              quent assignment.  If the
              -f  option  is  supplied,
              the functions correspond‐
              ing to the names  are  so
              marked.   The  -a  option
              restricts  the  variables
              to indexed arrays; the -A
              option   restricts    the
              variables  to associative
              arrays.  If both  options
              are  supplied,  -A  takes
              precedence.  If  no  name
              arguments  are  given, or
              if the -p option is  sup‐
              plied,   a  list  of  all
              readonly     names     is
              printed.     The    other
              options may  be  used  to
              restrict  the output to a
              subset  of  the  set   of
              readonly  names.   The -p
              option causes  output  to
              be  displayed in a format
              that  may  be  reused  as
              input.    If  a  variable
              name   is   followed   by
              =word,  the  value of the
              variable is set to  word.
              The  return  status  is 0
              unless an invalid  option
              is  encountered,  one  of
              the names is not a  valid
              shell  variable  name, or
              -f  is  supplied  with  a
              name  that is not a func‐
              tion.

       return [n]
              Causes a function to stop
              executing  and return the
              value specified by  n  to
              its   caller.   If  n  is
              omitted, the return  sta‐
              tus  is  that of the last
              command executed  in  the
              function body.  If return
              is  executed  by  a  trap
              handler, the last command
              used  to  determine   the
              status  is  the last com‐
              mand executed before  the
              trap  handler.  if return
              is  executed   during   a
              DEBUG trap, the last com‐
              mand  used  to  determine
              the  status  is  the last
              command executed  by  the
              trap    handler    before
              return was  invoked.   If
              return  is used outside a
              function, but during exe‐
              cution of a script by the
              .  (source)  command,  it
              causes  the shell to stop
              executing that script and
              return  either  n  or the
              exit status of  the  last
              command  executed  within
              the script  as  the  exit
              status of the script.  If
              n is supplied, the return
              value  is  its least sig‐
              nificant  8  bits.    The
              return status is non-zero
              if return is  supplied  a
              non-numeric  argument, or
              is used outside  a  func‐
              tion  and not during exe‐
              cution of a script  by  .
              or  source.   Any command
              associated    with    the
              RETURN  trap  is executed
              before execution  resumes
              after   the  function  or
              script.

       set [--abefhkmnptuvxBCEHPT]  [-o
       option-name] [arg ...]
       set  [+abefhkmnptuvxBCEHPT]  [+o
       option-name] [arg ...]
              Without options, the name
              and  value  of each shell
              variable are displayed in
              a   format  that  can  be
              reused as input for  set‐
              ting   or  resetting  the
              currently-set  variables.
              Read-only  variables can‐
              not be reset.   In  posix
              mode,  only  shell  vari‐
              ables  are  listed.   The
              output  is sorted accord‐
              ing   to   the    current
              locale.  When options are
              specified,  they  set  or
              unset  shell  attributes.
              Any  arguments  remaining
              after  option  processing
              are treated as values for
              the positional parameters
              and  are   assigned,   in
              order,  to  $1,  $2,  ...
              $n.  Options,  if  speci‐
              fied,  have the following
              meanings:
              -a      Each variable  or
                      function  that is
                      created or  modi‐
                      fied is given the
                      export  attribute
                      and   marked  for
                      export   to   the
                      environment    of
                      subsequent   com‐
                      mands.
              -b      Report the status
                      of     terminated
                      background   jobs
                      immediately,
                      rather       than
                      before  the  next
                      primary   prompt.
                      This is effective
                      only   when   job
                      control        is
                      enabled.
              -e      Exit  immediately
                      if   a   pipeline
                      (which  may  con‐
                      sist of a  single
                      simple  command),
                      a list, or a com‐
                      pound     command
                      (see SHELL  GRAM‐
                      MAR above), exits
                      with  a  non-zero
                      status.       The
                      shell  does   not
                      exit  if the com‐
                      mand  that  fails
                      is  part  of  the
                      command      list
                      immediately  fol‐
                      lowing a while or
                      until    keyword,
                      part of the  test
                      following  the if
                      or elif  reserved
                      words,   part  of
                      any command  exe‐
                      cuted  in a && or
                      ||  list   except
                      the  command fol‐
                      lowing the  final
                      &&   or  ||,  any
                      command   in    a
                      pipeline  but the
                      last, or  if  the
                      command's  return
                      value  is   being
                      inverted  with !.
                      If   a   compound
                      command     other
                      than  a  subshell
                      returns   a  non-
                      zero       status
                      because a command
                      failed  while  -e
                      was         being
                      ignored,      the
                      shell   does  not
                      exit.  A trap  on
                      ERR,  if  set, is
                      executed   before
                      the  shell exits.
                      This       option
                      applies   to  the
                      shell environment
                      and each subshell
                      environment sepa‐
                      rately  (see COM‐
                      MAND    EXECUTION
                      ENVIRONMENT
                      above),  and  may
                      cause   subshells
                      to  exit   before
                      executing all the
                      commands  in  the
                      subshell.

                      If   a   compound
                      command or  shell
                      function executes
                      in   a    context
                      where -e is being
                      ignored, none  of
                      the commands exe‐
                      cuted within  the
                      compound  command
                      or function  body
                      will  be affected
                      by  the  -e  set‐
                      ting,  even if -e
                      is set and a com‐
                      mand   returns  a
                      failure   status.
                      If   a   compound
                      command or  shell
                      function  sets -e
                      while   executing
                      in    a   context
                      where    -e    is
                      ignored,     that
                      setting will  not
                      have  any  effect
                      until  the   com‐
                      pound  command or
                      the command  con‐
                      taining the func‐
                      tion  call   com‐
                      pletes.
              -f      Disable  pathname
                      expansion.
              -h      Remember      the
                      location  of com‐
                      mands as they are
                      looked   up   for
                      execution.   This
                      is   enabled   by
                      default.
              -k      All arguments  in
                      the    form    of
                      assignment state‐
                      ments  are placed
                      in  the  environ‐
                      ment  for  a com‐
                      mand,  not   just
                      those  that  pre‐
                      cede the  command
                      name.
              -m      Monitor     mode.
                      Job  control   is
                      enabled.     This
                      option is  on  by
                      default       for
                      interactive
                      shells on systems
                      that  support  it
                      (see  JOB CONTROL
                      above).  All pro‐
                      cesses  run  in a
                      separate  process
                      group.    When  a
                      background    job
                      completes,    the
                      shell  prints   a
                      line   containing
                      its exit status.
              -n      Read commands but
                      do   not  execute
                      them.   This  may
                      be  used to check
                      a  shell   script
                      for        syntax
                      errors.  This  is
                      ignored by inter‐
                      active shells.
              -o option-name
                      The   option-name
                      can be one of the
                      following:
                      allexport
                              Same   as
                              -a.
                      braceexpand
                              Same   as
                              -B.
                      emacs   Use    an
                              emacs-
                              style
                              command
                              line
                              editing
                              inter‐
                              face.
                              This   is
                              enabled
                              by
                              default
                              when  the
                              shell  is
                              interac‐
                              tive,
                              unless
                              the shell
                              is
                              started
                              with  the
                              --noedit‐
                              ing
                              option.
                              This also
                              affects
                              the edit‐
                              ing
                              interface
                              used  for
                              read -e.
                      errexit Same   as
                              -e.
                      errtrace
                              Same   as
                              -E.
                      functrace
                              Same   as
                              -T.
                      hashall Same   as
                              -h.
                      histexpand
                              Same   as
                              -H.
                      history Enable
                              command
                              history,
                              as
                              described
                              above
                              under
                              HISTORY.
                              This
                              option is
                              on     by
                              default
                              in inter‐
                              active
                              shells.
                      ignoreeof
                              The
                              effect is
                              as if the
                              shell
                              command
                              ``IGNOREEOF=10''
                              had  been
                              executed
                              (see
                              Shell
                              Variables
                              above).
                      keyword Same   as
                              -k.
                      monitor Same   as
                              -m.
                      noclobber
                              Same   as
                              -C.
                      noexec  Same   as
                              -n.
                      noglob  Same   as
                              -f.
                      nolog   Currently
                              ignored.
                      notify  Same   as
                              -b.
                      nounset Same   as
                              -u.
                      onecmd  Same   as
                              -t.
                      physical
                              Same   as
                              -P.
                      pipefail
                              If   set,
                              the
                              return
                              value  of
                              a   pipe‐
                              line   is
                              the value
                              of    the
                              last
                              (right‐
                              most)
                              command
                              to   exit
                              with    a
                              non-zero
                              status,
                              or   zero
                              if    all
                              commands
                              in    the
                              pipeline
                              exit suc‐
                              cess‐
                              fully.
                              This
                              option is
                              disabled
                              by
                              default.
                      posix   Change
                              the
                              behavior
                              of   bash
                              where the
                              default
                              operation
                              differs
                              from  the
                              POSIX
                              standard
                              to  match
                              the stan‐
                              dard
                              (posix
                              mode).
                              See   SEE
                              ALSO
                              below for
                              a  refer‐
                              ence to a
                              document
                              that
                              details
                              how posix
                              mode
                              affects
                              bash's
                              behavior.
                      privileged
                              Same   as
                              -p.
                      verbose Same   as
                              -v.
                      vi      Use a vi-
                              style
                              command
                              line
                              editing
                              inter‐
                              face.
                              This also
                              affects
                              the edit‐
                              ing
                              interface
                              used  for
                              read -e.
                      xtrace  Same   as
                              -x.
                      If -o is supplied
                      with           no
                      option-name,  the
                      values   of   the
                      current   options
                      are  printed.  If
                      +o  is   supplied
                      with           no
                      option-name,    a
                      series   of   set
                      commands       to
                      recreate the cur‐
                      rent option  set‐
                      tings   is   dis‐
                      played   on   the
                      standard output.
              -p      Turn   on  privi‐
                      leged  mode.   In
                      this   mode,  the
                      $ENV          and
                      $BASH_ENV   files
                      are   not    pro‐
                      cessed,     shell
                      functions are not
                      inherited    from
                      the  environment,
                      and   the   SHEL‐
                      LOPTS,  BASHOPTS,
                      CDPATH,  and GLO‐
                      BIGNORE     vari‐
                      ables,   if  they
                      appear   in   the
                      environment,  are
                      ignored.  If  the
                      shell  is started
                      with  the  effec‐
                      tive user (group)
                      id not  equal  to
                      the   real   user
                      (group)  id,  and
                      the  -p option is
                      not     supplied,
                      these actions are
                      taken   and   the
                      effective user id
                      is  set  to   the
                      real user id.  If
                      the -p option  is
                      supplied       at
                      startup,      the
                      effective user id
                      is   not   reset.
                      Turning      this
                      option off causes
                      the     effective
                      user  and   group
                      ids  to be set to
                      the real user and
                      group ids.
              -t      Exit  after read‐
                      ing and executing
                      one command.
              -u      Treat unset vari‐
                      ables and parame‐
                      ters  other  than
                      the       special
                      parameters    "@"
                      and  "*"  as   an
                      error  when  per‐
                      forming parameter
                      expansion.     If
                      expansion      is
                      attempted  on  an
                      unset variable or
                      parameter,    the
                      shell  prints  an
                      error    message,
                      and,    if    not
                      interactive,
                      exits with a non-
                      zero status.
              -v      Print shell input
                      lines as they are
                      read.
              -x      After   expanding
                      each simple  com‐
                      mand,   for  com‐
                      mand,  case  com‐
                      mand, select com‐
                      mand,  or  arith‐
                      metic   for  com‐
                      mand, display the
                      expanded value of
                      PS4, followed  by
                      the  command  and
                      its      expanded
                      arguments      or
                      associated   word
                      list.
              -B      The   shell  per‐
                      forms       brace
                      expansion    (see
                      Brace   Expansion
                      above).   This is
                      on by default.
              -C      If set, bash does
                      not  overwrite an
                      existing     file
                      with  the  >, >&,
                      and <>  redirect‐
                      ion    operators.
                      This may be over‐
                      ridden  when cre‐
                      ating      output
                      files   by  using
                      the   redirection
                      operator       >|
                      instead of >.
              -E      If set, any  trap
                      on  ERR is inher‐
                      ited   by   shell
                      functions,   com‐
                      mand    substitu‐
                      tions,  and  com‐
                      mands executed in
                      a  subshell envi‐
                      ronment.  The ERR
                      trap  is normally
                      not inherited  in
                      such cases.
              -H      Enable  !   style
                      history substitu‐
                      tion.        This
                      option is  on  by
                      default  when the
                      shell is interac‐
                      tive.
              -P      If set, the shell
                      does not  resolve
                      symbolic    links
                      when    executing
                      commands  such as
                      cd  that   change
                      the current work‐
                      ing    directory.
                      It uses the phys‐
                      ical    directory
                      structure
                      instead.       By
                      default,     bash
                      follows the logi‐
                      cal    chain   of
                      directories  when
                      performing   com‐
                      mands       which
                      change  the  cur‐
                      rent directory.
              -T      If set, any traps
                      on    DEBUG   and
                      RETURN are inher‐
                      ited   by   shell
                      functions,   com‐
                      mand    substitu‐
                      tions,  and  com‐
                      mands executed in
                      a subshell  envi‐
                      ronment.      The
                      DEBUG and  RETURN
                      traps   are  nor‐
                      mally not  inher‐
                      ited    in   such
                      cases.
              --      If  no  arguments
                      follow       this
                      option, then  the
                      positional param‐
                      eters are  unset.
                      Otherwise,    the
                      positional param‐
                      eters  are set to
                      the args, even if
                      some    of   them
                      begin with a -.
              -       Signal the end of
                      options,    cause
                      all     remaining
                      args     to    be
                      assigned  to  the
                      positional param‐
                      eters.   The   -x
                      and   -v  options
                      are  turned  off.
                      If  there  are no
                      args,  the  posi‐
                      tional parameters
                      remain unchanged.

              The options  are  off  by
              default  unless otherwise
              noted.   Using  +  rather
              than   -   causes   these
              options to be turned off.
              The  options  can also be
              specified as arguments to
              an   invocation   of  the
              shell.  The  current  set
              of  options  may be found
              in $-.  The return status
              is  always true unless an
              invalid option is encoun‐
              tered.

       shift [n]
              The positional parameters
              from n+1 ... are  renamed
              to  $1  ....   Parameters
              represented by  the  num‐
              bers  $#  down  to $#-n+1
              are unset.  n must  be  a
              non-negative  number less
              than or equal to $#.   If
              n is 0, no parameters are
              changed.   If  n  is  not
              given,  it  is assumed to
              be 1.  If  n  is  greater
              than  $#,  the positional
              parameters    are     not
              changed.  The return sta‐
              tus is greater than  zero
              if  n  is greater than $#
              or less than zero; other‐
              wise 0.

       shopt [-pqsu] [-o] [optname ...]
              Toggle the values of set‐
              tings         controlling
              optional  shell behavior.
              The   settings   can   be
              either    those    listed
              below,  or,  if  the   -o
              option   is  used,  those
              available  with  the   -o
              option to the set builtin
              command.      With     no
              options,  or  with the -p
              option,  a  list  of  all
              settable  options is dis‐
              played, with  an  indica‐
              tion  of  whether  or not
              each  is  set.   The   -p
              option  causes  output to
              be displayed  in  a  form
              that  may  be  reused  as
              input.    Other   options
              have  the following mean‐
              ings:
              -s     Enable (set)  each
                     optname.
              -u     Disable    (unset)
                     each optname.
              -q     Suppresses  normal
                     output      (quiet
                     mode); the  return
                     status   indicates
                     whether  the  opt‐
                     name   is  set  or
                     unset.  If  multi‐
                     ple  optname argu‐
                     ments  are   given
                     with    -q,    the
                     return  status  is
                     zero  if  all opt‐
                     names are enabled;
                     non-zero    other‐
                     wise.
              -o     Restricts the val‐
                     ues  of optname to
                     be  those  defined
                     for  the -o option
                     to     the     set
                     builtin.

              If  either  -s  or  -u is
              used  with   no   optname
              arguments,   shopt  shows
              only those options  which
              are set or unset, respec‐
              tively.  Unless otherwise
              noted,  the shopt options
              are disabled  (unset)  by
              default.

              The  return  status  when
              listing options  is  zero
              if   all   optnames   are
              enabled, non-zero  other‐
              wise.   When  setting  or
              unsetting  options,   the
              return   status  is  zero
              unless an optname is  not
              a valid shell option.

              The list of shopt options
              is:

              autocd  If set, a command
                      name  that is the
                      name of a  direc‐
                      tory  is executed
                      as if it were the
                      argument  to  the
                      cd command.  This
                      option   is  only
                      used by  interac‐
                      tive shells.
              cdable_vars
                      If  set, an argu‐
                      ment  to  the  cd
                      builtin   command
                      that  is  not   a
                      directory      is
                      assumed to be the
                      name  of  a vari‐
                      able whose  value
                      is  the directory
                      to change to.
              cdspell If   set,   minor
                      errors   in   the
                      spelling   of   a
                      directory  compo‐
                      nent in a cd com‐
                      mand will be cor‐
                      rected.       The
                      errors    checked
                      for  are   trans‐
                      posed characters,
                      a missing charac‐
                      ter,    and   one
                      character     too
                      many.   If a cor‐
                      rection is found,
                      the     corrected
                      filename       is
                      printed,  and the
                      command proceeds.
                      This   option  is
                      only   used    by
                      interactive
                      shells.
              checkhash
                      If   set,    bash
                      checks   that   a
                      command found  in
                      the   hash  table
                      exists     before
                      trying to execute
                      it.  If a  hashed
                      command no longer
                      exists, a  normal
                      path   search  is
                      performed.
              checkjobs
                      If   set,    bash
                      lists  the status
                      of  any   stopped
                      and  running jobs
                      before exiting an
                      interactive
                      shell.   If   any
                      jobs are running,
                      this  causes  the
                      exit     to    be
                      deferred until  a
                      second   exit  is
                      attempted without
                      an    intervening
                      command (see  JOB
                      CONTROL   above).
                      The shell  always
                      postpones exiting
                      if any  jobs  are
                      stopped.
              checkwinsize
                      If    set,   bash
                      checks the window
                      size  after  each
                      command  and,  if
                      necessary,
                      updates the  val‐
                      ues  of LINES and
                      COLUMNS.
              cmdhist If   set,    bash
                      attempts  to save
                      all  lines  of  a
                      multiple-line
                      command  in   the
                      same      history
                      entry.       This
                      allows  easy  re-
                      editing of multi-
                      line commands.
              compat31
                      If    set,   bash
                      changes       its
                      behavior  to that
                      of  version   3.1
                      with  respect  to
                      quoted  arguments
                      to  the [[ condi‐
                      tional  command's
                      =~  operator  and
                      locale-specific
                      string comparison
                      when using the [[
                      conditional  com‐
                      mand's  <  and  >
                      operators.   Bash
                      versions prior to
                      bash-4.1      use
                      ASCII   collation
                      and    strcmp(3);
                      bash-4.1      and
                      later   use   the
                      current  locale's
                      collation
                      sequence and str‐
                      coll(3).
              compat32
                      If    set,   bash
                      changes       its
                      behavior  to that
                      of  version   3.2
                      with  respect  to
                      locale-specific
                      string comparison
                      when using the [[
                      conditional  com‐
                      mand's  <  and  >
                      operators    (see
                      previous    item)
                      and the effect of
                      interrupting    a
                      command     list.
                      Bash versions 3.2
                      and  earlier con‐
                      tinue  with   the
                      next  command  in
                      the  list   after
                      one    terminates
                      due to an  inter‐
                      rupt.
              compat40
                      If    set,   bash
                      changes       its
                      behavior  to that
                      of  version   4.0
                      with  respect  to
                      locale-specific
                      string comparison
                      when using the [[
                      conditional  com‐
                      mand's  <  and  >
                      operators    (see
                      description    of
                      compat31) and the
                      effect of  inter‐
                      rupting a command
                      list.  Bash  ver‐
                      sions   4.0   and
                      later   interrupt
                      the  list  as  if
                      the         shell
                      received      the
                      interrupt; previ‐
                      ous versions con‐
                      tinue  with   the
                      next  command  in
                      the list.
              compat41
                      If   set,   bash,
                      when   in   posix
                      mode,  treats   a
                      single quote in a
                      double-quoted
                      parameter  expan‐
                      sion as a special
                      character.    The
                      single     quotes
                      must   match  (an
                      even number)  and
                      the    characters
                      between the  sin‐
                      gle   quotes  are
                      considered
                      quoted.   This is
                      the  behavior  of
                      posix        mode
                      through   version
                      4.1.  The default
                      bash     behavior
                      remains   as   in
                      previous     ver‐
                      sions.
              compat42
                      If set, bash does
                      not  process  the
                      replacement
                      string   in   the
                      pattern substitu‐
                      tion word  expan‐
                      sion  using quote
                      removal.
              compat43
                      If set, bash does
                      not print a warn‐
                      ing message if an
                      attempt  is  made
                      to use  a  quoted
                      compound    array
                      assignment as  an
                      argument       to
                      declare,    makes
                      word    expansion
                      errors  non-fatal
                      errors that cause
                      the current  com‐
                      mand to fail (the
                      default  behavior
                      is  to  make them
                      fatal errors that
                      cause  the  shell
                      to   exit),   and
                      does   not  reset
                      the  loop   state
                      when    a   shell
                      function is  exe‐
                      cuted       (this
                      allows  break  or
                      continue   in   a
                      shell function to
                      affect  loops  in
                      the caller's con‐
                      text).
              complete_fullquote
                      If    set,   bash
                      quotes all  shell
                      metacharacters in
                      filenames     and
                      directory   names
                      when   performing
                      completion.    If
                      not   set,   bash
                      removes metachar‐
                      acters  such   as
                      the  dollar  sign
                      from the  set  of
                      characters   that
                      will be quoted in
                      completed   file‐
                      names when  these
                      metacharacters
                      appear  in  shell
                      variable   refer‐
                      ences in words to
                      be     completed.
                      This  means  that
                      dollar  signs  in
                      variable    names
                      that   expand  to
                      directories  will
                      not   be  quoted;
                      however, any dol‐
                      lar signs appear‐
                      ing in  filenames
                      will    not    be
                      quoted,   either.
                      This   is  active
                      only when bash is
                      using backslashes
                      to   quote   com‐
                      pleted filenames.
                      This variable  is
                      set  by  default,
                      which   is    the
                      default      bash
                      behavior in  ver‐
                      sions     through
                      4.2.
              direxpand
                      If   set,    bash
                      replaces   direc‐
                      tory  names  with
                      the   results  of
                      word    expansion
                      when   performing
                      filename  comple‐
                      tion.        This
                      changes the  con‐
                      tents    of   the
                      readline  editing
                      buffer.   If  not
                      set,         bash
                      attempts  to pre‐
                      serve  what   the
                      user typed.
              dirspell
                      If    set,   bash
                      attempts spelling
                      correction     on
                      directory   names
                      during  word com‐
                      pletion  if   the
                      directory    name
                      initially    sup‐
                      plied   does  not
                      exist.
              dotglob If   set,    bash
                      includes    file‐
                      names   beginning
                      with a `.' in the
                      results of  path‐
                      name expansion.
              execfail
                      If  set,  a  non-
                      interactive shell
                      will  not exit if
                      it cannot execute
                      the  file  speci‐
                      fied as an  argu‐
                      ment  to the exec
                      builtin  command.
                      An    interactive
                      shell  does   not
                      exit    if   exec
                      fails.
              expand_aliases
                      If  set,  aliases
                      are  expanded  as
                      described   above
                      under    ALIASES.
                      This  option   is
                      enabled        by
                      default       for
                      interactive
                      shells.
              extdebug
                      If set  at  shell
                      invocation,
                      arrange  to  exe‐
                      cute the debugger
                      profile    before
                      the shell starts,
                      identical to  the
                      --debugger
                      option.   If  set
                      after invocation,
                      behavior intended
                      for use by debug‐
                      gers is enabled:
                      1.     The     -F
                             option  to
                             the
                             declare
                             builtin
                             displays
                             the source
                             file  name
                             and   line
                             number
                             corre‐
                             sponding
                             to    each
                             function
                             name  sup‐
                             plied   as
                             an   argu‐
                             ment.
                      2.     If     the
                             command
                             run by the
                             DEBUG trap
                             returns  a
                             non-zero
                             value, the
                             next  com‐
                             mand    is
                             skipped
                             and    not
                             executed.
                      3.     If     the
                             command
                             run by the
                             DEBUG trap
                             returns  a
                             value   of
                             2, and the
                             shell   is
                             executing
                             in  a sub‐
                             routine (a
                             shell
                             function
                             or a shell
                             script
                             executed
                             by  the  .
                             or  source
                             builtins),
                             the  shell
                             simulates
                             a  call to
                             return.
                      4.     BASH_ARGC
                             and
                             BASH_ARGV
                             are
                             updated as
                             described
                             in   their
                             descrip‐
                             tions
                             above.
                      5.     Function
                             tracing is
                             enabled:
                             command
                             substitu‐
                             tion,
                             shell
                             functions,
                             and   sub‐
                             shells
                             invoked
                             with     (
                             command  )
                             inherit
                             the  DEBUG
                             and RETURN
                             traps.
                      6.     Error
                             tracing is
                             enabled:
                             command
                             substitu‐
                             tion,
                             shell
                             functions,
                             and   sub‐
                             shells
                             invoked
                             with     (
                             command  )
                             inherit
                             the    ERR
                             trap.
              extglob If    set,    the
                      extended  pattern
                      matching features
                      described   above
                      under    Pathname
                      Expansion     are
                      enabled.
              extquote
                      If set, $'string'
                      and     $"string"
                      quoting  is  per‐
                      formed     within
                      ${parameter}
                      expansions
                      enclosed in  dou‐
                      ble quotes.  This
                      option is enabled
                      by default.
              failglob
                      If  set, patterns
                      which   fail   to
                      match   filenames
                      during   pathname
                      expansion  result
                      in  an  expansion
                      error.
              force_fignore
                      If  set, the suf‐
                      fixes   specified
                      by   the  FIGNORE
                      shell    variable
                      cause words to be
                      ignored when per‐
                      forming word com‐
                      pletion  even  if
                      the ignored words
                      are the only pos‐
                      sible     comple‐
                      tions.  See SHELL
                      VARIABLES   above
                      for a description
                      of FIGNORE.  This
                      option is enabled
                      by default.
              globasciiranges
                      If   set,   range
                      expressions  used
                      in pattern match‐
                      ing       bracket
                      expressions  (see
                      Pattern  Matching
                      above)  behave as
                      if in the  tradi‐
                      tional  C  locale
                      when   performing
                      comparisons.
                      That is, the cur‐
                      rent     locale's
                      collating
                      sequence  is  not
                      taken        into
                      account,   so   b
                      will not  collate
                      between  A and B,
                      and    upper-case
                      and    lower-case
                      ASCII  characters
                      will      collate
                      together.
              globstar
                      If set, the  pat‐
                      tern ** used in a
                      pathname   expan‐
                      sion context will
                      match  all  files
                      and  zero or more
                      directories   and
                      subdirectories.
                      If the pattern is
                      followed  by a /,
                      only  directories
                      and   subdirecto‐
                      ries match.
              gnu_errfmt
                      If   set,   shell
                      error    messages
                      are  written   in
                      the  standard GNU
                      error     message
                      format.
              histappend
                      If  set, the his‐
                      tory   list    is
                      appended  to  the
                      file named by the
                      value    of   the
                      HISTFILE variable
                      when   the  shell
                      exits,     rather
                      than  overwriting
                      the file.
              histreedit
                      If set, and read‐
                      line   is   being
                      used, a  user  is
                      given  the oppor‐
                      tunity to re-edit
                      a  failed history
                      substitution.
              histverify
                      If set, and read‐
                      line   is   being
                      used, the results
                      of  history  sub‐
                      stitution are not
                      immediately
                      passed   to   the
                      shell     parser.
                      Instead,      the
                      resulting line is
                      loaded  into  the
                      readline  editing
                      buffer,  allowing
                      further modifica‐
                      tion.
              hostcomplete
                      If set, and read‐
                      line   is   being
                      used,  bash  will
                      attempt  to  per‐
                      form     hostname
                      completion when a
                      word containing a
                      @  is  being com‐
                      pleted (see  Com‐
                      pleting     under
                      READLINE  above).
                      This  is  enabled
                      by default.
              huponexit
                      If set, bash will
                      send   SIGHUP  to
                      all jobs when  an
                      interactive login
                      shell exits.
              inherit_errexit
                      If  set,  command
                      substitution
                      inherits      the
                      value    of   the
                      errexit   option,
                      instead of unset‐
                      ting  it  in  the
                      subshell environ‐
                      ment.        This
                      option is enabled
                      when  posix  mode
                      is enabled.
              interactive_comments
                      If  set,  allow a
                      word    beginning
                      with  #  to cause
                      that word and all
                      remaining charac‐
                      ters on that line
                      to  be ignored in
                      an    interactive
                      shell  (see  COM‐
                      MENTS     above).
                      This   option  is
                      enabled        by
                      default.
              lastpipe
                      If  set,  and job
                      control  is   not
                      active, the shell
                      runs   the   last
                      command    of   a
                      pipeline not exe‐
                      cuted    in   the
                      background in the
                      current     shell
                      environment.
              lithist If set,  and  the
                      cmdhist option is
                      enabled,   multi-
                      line commands are
                      saved to the his‐
                      tory  with embed‐
                      ded      newlines
                      rather than using
                      semicolon separa‐
                      tors where possi‐
                      ble.
              login_shell
                      The  shell   sets
                      this option if it
                      is started  as  a
                      login  shell (see
                      INVOCATION
                      above).       The
                      value may not  be
                      changed.
              mailwarn
                      If   set,  and  a
                      file that bash is
                      checking for mail
                      has been accessed
                      since   the  last
                      time    it    was
                      checked, the mes‐
                      sage  ``The  mail
                      in  mailfile  has
                      been  read''   is
                      displayed.
              no_empty_cmd_completion
                      If set, and read‐
                      line   is   being
                      used,  bash  will
                      not  attempt   to
                      search  the  PATH
                      for possible com‐
                      pletions     when
                      completion     is
                      attempted  on  an
                      empty line.
              nocaseglob
                      If   set,    bash
                      matches filenames
                      in a  case-insen‐
                      sitive    fashion
                      when   performing
                      pathname   expan‐
                      sion  (see  Path‐
                      name    Expansion
                      above).
              nocasematch
                      If   set,    bash
                      matches  patterns
                      in a  case-insen‐
                      sitive    fashion
                      when   performing
                      matching    while
                      executing case or
                      [[    conditional
                      commands,    when
                      performing   pat‐
                      tern substitution
                      word  expansions,
                      or when filtering
                      possible  comple‐
                      tions as part  of
                      programmable com‐
                      pletion.
              nullglob
                      If   set,    bash
                      allows   patterns
                      which  match   no
                      files  (see Path‐
                      name    Expansion
                      above)  to expand
                      to a null string,
                      rather than them‐
                      selves.
              progcomp
                      If set, the  pro‐
                      grammable comple‐
                      tion   facilities
                      (see Programmable
                      Completion above)
                      are      enabled.
                      This  option   is
                      enabled        by
                      default.
              promptvars
                      If  set,   prompt
                      strings   undergo
                      parameter  expan‐
                      sion,     command
                      substitution,
                      arithmetic expan‐
                      sion,  and  quote
                      removal     after
                      being expanded as
                      described      in
                      PROMPTING  above.
                      This   option  is
                      enabled        by
                      default.
              restricted_shell
                      The   shell  sets
                      this option if it
                      is   started   in
                      restricted   mode
                      (see   RESTRICTED
                      SHELL     below).
                      The value may not
                      be changed.  This
                      is not reset when
                      the startup files
                      are     executed,
                      allowing      the
                      startup  files to
                      discover  whether
                      or not a shell is
                      restricted.
              shift_verbose
                      If set, the shift
                      builtin prints an
                      error     message
                      when   the  shift
                      count exceeds the
                      number  of  posi‐
                      tional    parame‐
                      ters.
              sourcepath
                      If    set,    the
                      source        (.)
                      builtin  uses the
                      value of PATH  to
                      find  the  direc‐
                      tory   containing
                      the file supplied
                      as  an  argument.
                      This   option  is
                      enabled        by
                      default.
              xpg_echo
                      If  set, the echo
                      builtin   expands
                      backslash-escape
                      sequences      by
                      default.

       suspend [-f]
              Suspend  the execution of
              this   shell   until   it
              receives  a  SIGCONT sig‐
              nal.  A login shell  can‐
              not  be suspended; the -f
              option  can  be  used  to
              override  this  and force
              the   suspension.     The
              return status is 0 unless
              the  shell  is  a   login
              shell  and -f is not sup‐
              plied, or if job  control
              is not enabled.

       test expr
       [ expr ]
              Return   a  status  of  0
              (true)   or   1   (false)
              depending  on the evalua‐
              tion of  the  conditional
              expression   expr.   Each
              operator and operand must
              be  a  separate argument.
              Expressions are  composed
              of      the     primaries
              described   above   under
              CONDITIONAL  EXPRESSIONS.
              test does not accept  any
              options,   nor   does  it
              accept  and   ignore   an
              argument  of -- as signi‐
              fying the end of options.

              Expressions may  be  com‐
              bined using the following
              operators,   listed    in
              decreasing    order    of
              precedence.  The  evalua‐
              tion  depends on the num‐
              ber  of  arguments;   see
              below.   Operator  prece‐
              dence is used when  there
              are  five  or  more argu‐
              ments.
              ! expr True  if  expr  is
                     false.
              ( expr )
                     Returns  the value
                     of expr.  This may
                     be  used  to over‐
                     ride  the   normal
                     precedence      of
                     operators.
              expr1 -a expr2
                     True if both expr1
                     and    expr2   are
                     true.
              expr1 -o expr2
                     True   if   either
                     expr1  or expr2 is
                     true.

              test and [ evaluate  con‐
              ditional      expressions
              using  a  set  of   rules
              based  on  the  number of
              arguments.

              0 arguments
                     The expression  is
                     false.
              1 argument
                     The  expression is
                     true if  and  only
                     if the argument is
                     not null.
              2 arguments
                     If the first argu‐
                     ment   is  !,  the
                     expression is true
                     if and only if the
                     second argument is
                     null.     If   the
                     first argument  is
                     one  of  the unary
                     conditional opera‐
                     tors  listed above
                     under  CONDITIONAL
                     EXPRESSIONS,   the
                     expression is true
                     if  the unary test
                     is true.   If  the
                     first  argument is
                     not a valid  unary
                     conditional opera‐
                     tor,  the  expres‐
                     sion is false.
              3 arguments
                     The following con‐
                     ditions        are
                     applied   in   the
                     order listed.   If
                     the  second  argu‐
                     ment is one of the
                     binary conditional
                     operators   listed
                     above under CONDI‐
                     TIONAL     EXPRES‐
                     SIONS,  the result
                     of the  expression
                     is  the  result of
                     the  binary   test
                     using   the  first
                     and  third   argu‐
                     ments as operands.
                     The  -a   and   -o
                     operators are con‐
                     sidered     binary
                     operators     when
                     there  are   three
                     arguments.  If the
                     first argument  is
                     !,  the  value  is
                     the  negation   of
                     the   two-argument
                     test   using   the
                     second  and  third
                     arguments.  If the
                     first  argument is
                     exactly ( and  the
                     third  argument is
                     exactly   ),   the
                     result is the one-
                     argument  test  of
                     the  second  argu‐
                     ment.   Otherwise,
                     the  expression is
                     false.
              4 arguments
                     If the first argu‐
                     ment   is  !,  the
                     result   is    the
                     negation   of  the
                     three-argument
                     expression    com‐
                     posed    of    the
                     remaining    argu‐
                     ments.  Otherwise,
                     the  expression is
                     parsed and  evalu‐
                     ated  according to
                     precedence   using
                     the  rules  listed
                     above.
              5 or more arguments
                     The expression  is
                     parsed  and evalu‐
                     ated according  to
                     precedence   using
                     the  rules  listed
                     above.

              When used with test or [,
              the  <  and  >  operators
              sort    lexicographically
              using ASCII ordering.

       times  Print   the   accumulated
              user and system times for
              the shell  and  for  pro‐
              cesses   run   from   the
              shell.  The return status
              is 0.

       trap [-lp] [[arg] sigspec ...]
              The  command arg is to be
              read  and  executed  when
              the  shell  receives sig‐
              nal(s) sigspec.   If  arg
              is absent (and there is a
              single  sigspec)  or   -,
              each  specified signal is
              reset  to  its   original
              disposition (the value it
              had upon entrance to  the
              shell).   If  arg  is the
              null  string  the  signal
              specified by each sigspec
              is ignored by  the  shell
              and  by  the  commands it
              invokes.  If arg  is  not
              present  and  -p has been
              supplied, then  the  trap
              commands  associated with
              each  sigspec  are   dis‐
              played.   If no arguments
              are supplied or  if  only
              -p  is given, trap prints
              the  list   of   commands
              associated with each sig‐
              nal.    The   -l   option
              causes the shell to print
              a list  of  signal  names
              and  their  corresponding
              numbers.  Each sigspec is
              either   a   signal  name
              defined in <signal.h>, or
              a  signal number.  Signal
              names are  case  insensi‐
              tive  and  the SIG prefix
              is optional.

              If a sigspec is EXIT  (0)
              the  command  arg is exe‐
              cuted on  exit  from  the
              shell.   If  a sigspec is
              DEBUG, the command arg is
              executed   before   every
              simple command, for  com‐
              mand,    case    command,
              select   command,   every
              arithmetic  for  command,
              and before the first com‐
              mand  executes in a shell
              function (see SHELL GRAM‐
              MAR above).  Refer to the
              description of the extde‐
              bug  option  to the shopt
              builtin  for  details  of
              its  effect  on the DEBUG
              trap.  If  a  sigspec  is
              RETURN,  the  command arg
              is executed each  time  a
              shell   function   or   a
              script executed with  the
              . or source builtins fin‐
              ishes executing.

              If a sigspec is ERR,  the
              command  arg  is executed
              whenever    a    pipeline
              (which  may  consist of a
              single simple command), a
              list,  or a compound com‐
              mand returns  a  non-zero
              exit  status,  subject to
              the following conditions.
              The  ERR trap is not exe‐
              cuted if the failed  com‐
              mand  is part of the com‐
              mand   list   immediately
              following   a   while  or
              until  keyword,  part  of
              the  test in an if state‐
              ment, part of  a  command
              executed  in  a  && or ||
              list except  the  command
              following the final && or
              ||,  any  command  in   a
              pipeline but the last, or
              if the  command's  return
              value  is  being inverted
              using !.  These  are  the
              same conditions obeyed by
              the errexit (-e) option.

              Signals   ignored    upon
              entry to the shell cannot
              be  trapped   or   reset.
              Trapped  signals that are
              not  being  ignored   are
              reset  to  their original
              values in a  subshell  or
              subshell environment when
              one  is   created.    The
              return status is false if
              any sigspec  is  invalid;
              otherwise   trap  returns
              true.

       type [-aftpP] name [name ...]
              With no options, indicate
              how  each  name  would be
              interpreted if used as  a
              command  name.  If the -t
              option  is   used,   type
              prints  a string which is
              one  of  alias,  keyword,
              function,   builtin,   or
              file if name is an alias,
              shell    reserved   word,
              function,   builtin,   or
              disk  file, respectively.
              If the name is not found,
              then  nothing is printed,
              and  an  exit  status  of
              false  is  returned.   If
              the -p  option  is  used,
              type  either  returns the
              name  of  the  disk  file
              that would be executed if
              name were specified as  a
              command  name, or nothing
              if ``type -t name'' would
              not  return file.  The -P
              option  forces   a   PATH
              search   for  each  name,
              even if ``type -t  name''
              would  not  return  file.
              If a command  is  hashed,
              -p   and   -P  print  the
              hashed  value,  which  is
              not  necessarily the file
              that  appears  first   in
              PATH.   If  the -a option
              is used, type prints  all
              of  the  places that con‐
              tain an executable  named
              name.     This   includes
              aliases and functions, if
              and only if the -p option
              is not  also  used.   The
              table  of hashed commands
              is  not  consulted   when
              using  -a.  The -f option
              suppresses shell function
              lookup,  as with the com‐
              mand    builtin.     type
              returns  true  if  all of
              the arguments are  found,
              false   if  any  are  not
              found.

       ulimit [-HSabcdefiklmnpqrstuvxPT
       [limit]]
              Provides control over the
              resources  available   to
              the  shell  and  to  pro‐
              cesses started by it,  on
              systems  that  allow such
              control.  The -H  and  -S
              options  specify that the
              hard or soft limit is set
              for  the  given resource.
              A hard  limit  cannot  be
              increased  by  a non-root
              user once it  is  set;  a
              soft    limit    may   be
              increased up to the value
              of  the  hard  limit.  If
              neither  -H  nor  -S   is
              specified,  both the soft
              and hard limits are  set.
              The value of limit can be
              a  number  in  the   unit
              specified     for     the
              resource or  one  of  the
              special    values   hard,
              soft, or unlimited, which
              stand   for  the  current
              hard limit,  the  current
              soft limit, and no limit,
              respectively.   If  limit
              is  omitted,  the current
              value of the  soft  limit
              of    the   resource   is
              printed,  unless  the  -H
              option  is  given.   When
              more than one resource is
              specified, the limit name
              and  unit   are   printed
              before  the value.  Other
              options  are  interpreted
              as follows:
              -a     All current limits
                     are reported
              -b     The maximum socket
                     buffer size
              -c     The  maximum  size
                     of core files cre‐
                     ated
              -d     The  maximum  size
                     of   a   process's
                     data segment
              -e     The maximum sched‐
                     uling     priority
                     ("nice")
              -f     The  maximum  size
                     of  files  written
                     by  the  shell and
                     its children
              -i     The maximum number
                     of pending signals
              -k     The maximum number
                     of  kqueues   that
                     may be allocated
              -l     The  maximum  size
                     that may be locked
                     into memory
              -m     The  maximum resi‐
                     dent   set    size
                     (many  systems  do
                     not   honor   this
                     limit)
              -n     The maximum number
                     of    open    file
                     descriptors  (most
                     systems   do   not
                     allow  this  value
                     to be set)
              -p     The pipe  size  in
                     512-byte    blocks
                     (this may  not  be
                     set)
              -q     The maximum number
                     of bytes in  POSIX
                     message queues
              -r     The  maximum real-
                     time    scheduling
                     priority
              -s     The  maximum stack
                     size
              -t     The maximum amount
                     of   cpu  time  in
                     seconds
              -u     The maximum number
                     of       processes
                     available   to   a
                     single user
              -v     The maximum amount
                     of virtual  memory
                     available  to  the
                     shell and, on some
                     systems,   to  its
                     children
              -x     The maximum number
                     of file locks
              -P     The maximum number
                     of pseudoterminals
              -T     The maximum number
                     of threads

              If  limit  is  given, and
              the  -a  option  is   not
              used,  limit  is  the new
              value  of  the  specified
              resource.   If  no option
              is  given,  then  -f   is
              assumed.   Values  are in
              1024-byte     increments,
              except  for  -t, which is
              in seconds; -p, which  is
              in   units   of  512-byte
              blocks; -P, -T,  -b,  -k,
              -n,  and  -u,  which  are
              unscaled   values;   and,
              when  in  Posix  mode, -c
              and  -f,  which  are   in
              512-byte increments.  The
              return status is 0 unless
              an   invalid   option  or
              argument is supplied,  or
              an   error  occurs  while
              setting a new limit.

       umask [-p] [-S] [mode]
              The  user   file-creation
              mask  is set to mode.  If
              mode begins with a digit,
              it  is  interpreted as an
              octal  number;  otherwise
              it  is  interpreted  as a
              symbolic mode mask  simi‐
              lar  to  that accepted by
              chmod(1).   If  mode   is
              omitted,    the   current
              value  of  the  mask   is
              printed.   The  -S option
              causes  the  mask  to  be
              printed in symbolic form;
              the default output is  an
              octal  number.  If the -p
              option is  supplied,  and
              mode is omitted, the out‐
              put is in a form that may
              be  reused as input.  The
              return status is 0 if the
              mode   was   successfully
              changed  or  if  no  mode
              argument   was  supplied,
              and false otherwise.

       unalias [-a] [name ...]
              Remove each name from the
              list  of defined aliases.
              If -a  is  supplied,  all
              alias   definitions   are
              removed.    The    return
              value  is  true  unless a
              supplied name  is  not  a
              defined alias.

       unset [-fv] [-n] [name ...]
              For each name, remove the
              corresponding variable or
              function.    If   the  -v
              option  is  given,   each
              name  refers  to  a shell
              variable, and that  vari‐
              able  is  removed.  Read-
              only variables may not be
              unset.   If  -f is speci‐
              fied, each name refers to
              a shell function, and the
              function  definition   is
              removed.    If   the   -n
              option is  supplied,  and
              name  is  a variable with
              the  nameref   attribute,
              name will be unset rather
              than the variable it ref‐
              erences.    -n   has   no
              effect if the  -f  option
              is   supplied.    If   no
              options   are   supplied,
              each  name  refers  to  a
              variable; if there is  no
              variable  by  that  name,
              any  function  with  that
              name   is   unset.   Each
              unset variable  or  func‐
              tion  is removed from the
              environment   passed   to
              subsequent  commands.  If
              any  of  COMP_WORDBREAKS,
              RANDOM,  SECONDS, LINENO,
              HISTCMD,        FUNCNAME,
              GROUPS,  or  DIRSTACK are
              unset,  they  lose  their
              special  properties, even
              if they are  subsequently
              reset.   The  exit status
              is true unless a name  is
              readonly.

       wait [-n] [n ...]
              Wait  for  each specified
              child process and  return
              its  termination  status.
              Each n may be  a  process
              ID  or  a  job specifica‐
              tion; if a  job  spec  is
              given,  all  processes in
              that job's  pipeline  are
              waited  for.  If n is not
              given,   all    currently
              active   child  processes
              are waited for,  and  the
              return  status  is  zero.
              If the -n option is  sup‐
              plied, wait waits for any
              job  to   terminate   and
              returns  its exit status.
              If  n  specifies  a  non-
              existent  process or job,
              the return status is 127.
              Otherwise,   the   return
              status is the exit status
              of  the  last  process or
              job waited for.

RESTRICTED SHELL
       If bash is started with the name
       rbash,  or the -r option is sup‐
       plied at invocation,  the  shell
       becomes      restricted.       A
       restricted shell is used to  set
       up   an  environment  more  con‐
       trolled than the standard shell.
       It  behaves  identically to bash
       with the exception that the fol‐
       lowing  are  disallowed  or  not
       performed:

       ·      changing directories with
              cd

       ·      setting  or unsetting the
              values  of  SHELL,  PATH,
              ENV, or BASH_ENV

       ·      specifying  command names
              containing /

       ·      specifying   a   filename
              containing   a  /  as  an
              argument   to    the    .
              builtin command

       ·      specifying   a   filename
              containing a slash as  an
              argument to the -p option
              to the hash builtin  com‐
              mand

       ·      importing  function defi‐
              nitions  from  the  shell
              environment at startup

       ·      parsing   the   value  of
              SHELLOPTS from the  shell
              environment at startup

       ·      redirecting  output using
              the >, >|,  <>,  >&,  &>,
              and >> redirection opera‐
              tors

       ·      using  the  exec  builtin
              command  to  replace  the
              shell with  another  com‐
              mand

       ·      adding     or    deleting
              builtin commands with the
              -f  and -d options to the
              enable builtin command

       ·      using the enable  builtin
              command  to  enable  dis‐
              abled shell builtins

       ·      specifying the -p  option
              to  the  command  builtin
              command

       ·      turning  off   restricted
              mode  with  set +r or set
              +o restricted.

       These restrictions are  enforced
       after   any  startup  files  are
       read.

       When a command that is found  to
       be  a  shell  script is executed
       (see COMMAND  EXECUTION  above),
       rbash turns off any restrictions
       in the shell spawned to  execute
       the script.

SEE ALSO
       Bash Reference Manual, Brian Fox
       and Chet Ramey
       The Gnu Readline Library,  Brian
       Fox and Chet Ramey
       The  Gnu  History Library, Brian
       Fox and Chet Ramey
       Portable Operating System Inter‐
       face  (POSIX)  Part 2: Shell and
       Utilities, IEEE --
              http://pubs.open‐
              group.org/onlinepubs/9699919799/
       http://tiswww.case.edu/~chet/bash/POSIX
       -- a description of posix mode
       sh(1), ksh(1), csh(1)
       emacs(1), vi(1)
       readline(3)

FILES
       /bin/bash
              The bash executable
       /etc/profile
              The  systemwide  initial‐
              ization  file,   executed
              for login shells
       /etc/bash.bashrc
              The systemwide per-inter‐
              active-shell startup file
       /etc/bash.bash.logout
              The   systemwide    login
              shell  cleanup file, exe‐
              cuted when a login  shell
              exits
       ~/.bash_profile
              The  personal initializa‐
              tion file,  executed  for
              login shells
       ~/.bashrc
              The individual per-inter‐
              active-shell startup file
       ~/.bash_logout
              The   individual    login
              shell  cleanup file, exe‐
              cuted when a login  shell
              exits
       ~/.inputrc
              Individual  readline ini‐
              tialization file

AUTHORS
       Brian Fox, Free Software Founda‐
       tion
       bfox@gnu.org

       Chet Ramey, Case Western Reserve
       University
       chet.ramey@case.edu

BUG REPORTS
       If you find a bug in  bash,  you
       should  report  it.   But first,
       you should  make  sure  that  it
       really  is  a  bug,  and that it
       appears in the latest version of
       bash.   The  latest  version  is
       always      available       from
       ftp://ftp.gnu.org/pub/gnu/bash/.

       Once  you have determined that a
       bug  actually  exists,  use  the
       bashbug  command to submit a bug
       report.  If you have a fix,  you
       are  encouraged  to mail that as
       well!  Suggestions  and  `philo‐
       sophical'  bug  reports  may  be
       mailed  to  bug-bash@gnu.org  or
       posted  to  the Usenet newsgroup
       gnu.bash.bug.

       ALL bug reports should include:

       The version number of bash
       The hardware and operating  sys‐
       tem
       The compiler used to compile
       A  description of the bug behav‐
       iour
       A short script or `recipe' which
       exercises the bug

       bashbug  inserts the first three
       items  automatically  into   the
       template  it provides for filing
       a bug report.

       Comments and  bug  reports  con‐
       cerning  this manual page should
       be          directed          to
       chet.ramey@case.edu.

BUGS
       It's too big and too slow.

       There  are  some  subtle differ‐
       ences between  bash  and  tradi‐
       tional  versions  of  sh, mostly
       because of the POSIX  specifica‐
       tion.

       Aliases  are  confusing  in some
       uses.

       Shell builtin commands and func‐
       tions      are     not     stop‐
       pable/restartable.

       Compound  commands  and  command
       sequences  of  the form `a ; b ;
       c' are  not  handled  gracefully
       when   process   suspension   is
       attempted.  When  a  process  is
       stopped,  the  shell immediately
       executes the next command in the
       sequence.   It suffices to place
       the sequence of commands between
       parentheses  to  force it into a
       subshell, which may  be  stopped
       as a unit.

       Array variables may not (yet) be
       exported.

       There may  be  only  one  active
       coprocess at a time.

GNU Bash 4.4 2016 August 26     BASH(1)
